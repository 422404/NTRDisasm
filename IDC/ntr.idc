//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2014 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-3057-7374-2C                      |
// |     Zhou Tao, Jiangsu Australia Sinuo Network Technology Co., Ltd.      |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&GetCharPrm(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("ARM");
	SetCharPrm(INF_COMPILER, 6);
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0);
	;
	SegCreate(0X100100,0X10B18C,0,1,1,2);
	SegRename(0X100100,"ROM");
	SegClass (0X100100,"CODE");
	SegDefReg(0x100100,"T",0x0);
	SegDefReg(0x100100,"DS",0x0);
	SetSegmentType(0X100100,2);
	LowVoids(0x100100);
	HighVoids(0x10B560);
}

static Enums_0(id) {

	id = AddEnum(-1,"FS_pathType",0x1100000);
	AddConstEx(id,"PATH_INVALID",	0,	-1);
	AddConstEx(id,"PATH_EMPTY",	0X1,	-1);
	AddConstEx(id,"PATH_BINARY",	0X2,	-1);
	AddConstEx(id,"PATH_CHAR",	0X3,	-1);
	AddConstEx(id,"PATH_WCHAR",	0X4,	-1);
	id = AddEnum(-1,"MemOp",0x1100000);
	AddConstEx(id,"MEMOP_FREE",	0X1,	-1);
	AddConstEx(id,"MEMOP_ALLOC",	0X3,	-1);
	AddConstEx(id,"MEMOP_MAP",	0X4,	-1);
	AddConstEx(id,"MEMOP_UNMAP",	0X5,	-1);
	AddConstEx(id,"MEMOP_PROT",	0X6,	-1);
	AddConstEx(id,"MEMOP_ALLOC_LINEAR",	0X10003,	-1);
	id = AddEnum(-1,"MemPerm",0x1100000);
	AddConstEx(id,"MEMPERM_READ",	0X1,	-1);
	AddConstEx(id,"MEMPERM_WRITE",	0X2,	-1);
	AddConstEx(id,"MEMPERM_EXECUTE",	0X4,	-1);
	AddConstEx(id,"MEMPERM_DONTCARE",	0X10000000,	-1);
	AddConstEx(id,"MEMPERM_MAX",	0XFFFFFFFF,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
	id = Enums_0(id);
        EndTypeUpdating(UTP_ENUM);
}

static Structures_0(id) {
        auto mid;

	id = AddStrucEx(-1,"PLGLOADER_INFO",0);
	id = AddStrucEx(-1,"RT_HOOK",0);
	id = AddStrucEx(-1,"RT_LOCK",0);
	id = AddStrucEx(-1,"NS_CONFIG",0);
	id = AddStrucEx(-1,"NS_BREAKPOINT",0);
	id = AddStrucEx(-1,"FS_archive",0);
	id = AddStrucEx(-1,"FS_path",0);
	
	id = GetStrucIdByName("PLGLOADER_INFO");
	mid = AddStrucMember(id,"plgCount",	0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"plgBufferPtr",	0X4,	0x20000400,	-1,	128);
	mid = AddStrucMember(id,"plgSize",	0X84,	0x20000400,	-1,	128);
	mid = AddStrucMember(id,"arm11BinStart",	0X104,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"arm11BinSize",	0X108,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"tid",	0X10C,	0x20000400,	-1,	8);
	SetMemberComment(id,	0X10C,	"title id",	1);
	
	id = GetStrucIdByName("RT_LOCK");
	mid = AddStrucMember(id,"value",	0,	0x20000400,	-1,	4);
	
	id = GetStrucIdByName("NS_CONFIG");
	mid = AddStrucMember(id,"initMode",	0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"startupCommand",	0X4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"hSOCU",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"debugBuf",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"debugBufSize",	0X10,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"debugPtr",	0X14,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"debugReady",	0X18,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"debugBufferLock",	0X1C,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"startupInfo",	0X20,	0x20000400,	-1,	128);
	mid = AddStrucMember(id,"allowDirectScreenAccess",	0XA0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"exitFlag",	0XA4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"sharedFunc",	0XA8,	0x20000400,	-1,	400);
	
	id = GetStrucIdByName("RT_HOOK");
	mid = AddStrucMember(id,"model",	0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"isEnabled",	0X4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"funcAddr",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"bakCode",	0XC,	0x20000400,	-1,	64);
	mid = AddStrucMember(id,"jmpCode",	0X4C,	0x20000400,	-1,	64);
	mid = AddStrucMember(id,"callCode",	0X8C,	0x20000400,	-1,	64);
	
	id = GetStrucIdByName("NS_BREAKPOINT");
	mid = AddStrucMember(id,"type",	0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"flag",	0X4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"addr",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"hook",	0XC,	0x60000400,	GetStrucIdByName("RT_HOOK"),	204);
	mid = AddStrucMember(id,"stubCode",	0XD8,	0x20000400,	-1,	128);
	mid = AddStrucMember(id,"isEnabled",	0X158,	0x20000400,	-1,	4);
	
	id = GetStrucIdByName("FS_path");
	mid = AddStrucMember(id,"type",	0,	0x28800400,	GetEnum("FS_pathType"),	4);
	mid = AddStrucMember(id,"size",	0X4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"data",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = GetStrucIdByName("FS_archive");
	mid = AddStrucMember(id,"id",	0,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"lowPath",	0X4,	0x60000400,	GetStrucIdByName("FS_path"),	12);
	mid = AddStrucMember(id,"handleLow",	0X10,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"handleHigh",	0X14,	0x20000400,	-1,	4);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        BeginTypeUpdating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0X100100,	0,	"; File Name   : ntr.bin");
	ExtLinA		(0X100100,	1,	"; Format      : Binary file");
	ExtLinA		(0X100100,	2,	"; Base Address: 0000h Range: 0000h - B08Ch Loaded length: B08Ch");
	MakeCode	(0X100100);
	MakeName	(0X100100,	"ntr_base");
	MakeDword	(0X100104);
	MakeDword	(0X100108);
	MakeName	(0X100108,	"cfw_01");
	MakeDword	(0X10010C);
	MakeName	(0X10010C,	"cfw_02");
	MakeComm	(0X100110,	"ptr to code to inject into home menu");
	MakeDword	(0X100110);
	MakeName	(0X100110,	"pFunc");
	MakeDword	(0X100114);
	MakeName	(0X100114,	"size");
	MakeDword	(0X100118);
	MakeDword	(0X10011C);
	MakeDword	(0X100120);
	MakeCode	(0X100124);
	MakeCode	(x=0X100130);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100134);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10013C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100140);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100174,	"argv");
	MakeCode	(x=0X100174);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100178);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10017C,	"envp");
	MakeComm	(0X100180,	"FlushProcessDataCache");
	MakeComm	(0X10018C,	"argc");
	MakeCode	(0X1001A4);
	MakeName	(0X1001A4,	"nsDbgPrint_0");
	MakeDword	(x=0X1001B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1001B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1001BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1001C0);
	MakeByte	(0X1001C4);
	MakeArray	(0X1001C4,	0XC);
	MakeName	(0X1001C4,	"nsDbgPrint_1");
	MakeCode	(0X1001D0);
	MakeName	(0X1001D0,	"ntr2dPaintPixel");
	MakeCode	(x=0X1001E4);
	OpStkvar	(x,	1);
	MakeComm	(0X1001E8,	"address");
	MakeComm	(0X1001EC,	"r");
	MakeComm	(0X1001F0,	"g");
	MakeComm	(0X1001F4,	"b");
	MakeCode	(x=0X1001F4);
	OpStkvar	(x,	1);
	MakeCode	(0X1001FC);
	MakeName	(0X1001FC,	"ntr2dPaintSquare");
	MakeCode	(x=0X100204);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100208);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10020C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100238);
	OpStkvar	(x,	1);
	MakeComm	(0X10023C,	"y");
	MakeComm	(0X100240,	"screen");
	MakeCode	(x=0X100240);
	OpStkvar	(x,	1);
	MakeComm	(0X100244,	"b");
	MakeCode	(x=0X100244);
	OpStkvar	(x,	1);
	MakeComm	(0X100248,	"x");
	MakeComm	(0X10024C,	"r");
	MakeComm	(0X100250,	"g");
	MakeCode	(0X100260);
	MakeCode	(0X100268);
	MakeCode	(0X100270);
	MakeName	(0X100270,	"ntr2dBlank");
	MakeComm	(0X100274,	"b");
	MakeCode	(x=0X100278);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100288,	"h");
	MakeCode	(x=0X100288);
	OpStkvar	(x,	1);
	MakeComm	(0X100290,	"r");
	MakeComm	(0X100294,	"screen");
	MakeCode	(x=0X100294);
	OpStkvar	(x,	1);
	MakeComm	(0X10029C,	"g");
	MakeComm	(0X1002B4,	"screen");
	MakeCode	(x=0X1002B4);
	OpStkvar	(x,	1);
	MakeComm	(0X1002B8,	"h");
	MakeCode	(x=0X1002B8);
	OpStkvar	(x,	1);
	MakeComm	(0X1002BC,	"x");
	MakeComm	(0X1002C0,	"y");
	MakeComm	(0X1002C4,	"r");
	MakeComm	(0X1002C8,	"g");
	MakeDword	(x=0X1002D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1002DC);
	MakeName	(0X1002DC,	"ntr2dPaintLetter");
	MakeCode	(x=0X1002E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1002F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1002F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100304);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100308);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100328);
	OpStkvar	(x,	1);
	MakeComm	(0X10032C,	"y");
	MakeComm	(0X100330,	"b");
	MakeCode	(x=0X100330);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100334);
	OpStkvar	(x,	1);
	MakeComm	(0X100338,	"x");
	MakeComm	(0X10033C,	"screen");
	MakeCode	(x=0X10033C);
	OpStkvar	(x,	1);
	MakeComm	(0X100340,	"r");
	MakeComm	(0X100344,	"g");
	MakeCode	(x=0X100344);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100348);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100350);
	OpStkvar	(x,	1);
	MakeDword	(x=0X100374);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X100378);
	MakeName	(0X100378,	"ntr2dPaintWord");
	MakeComm	(0X10037C,	"g");
	MakeCode	(x=0X100384);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100388);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1003A0);
	OpStkvar	(x,	1);
	MakeComm	(0X1003A4,	"a1");
	MakeCode	(x=0X1003B4);
	OpStkvar	(x,	1);
	MakeComm	(0X1003C0,	"screen");
	MakeCode	(x=0X1003C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1003C4);
	OpStkvar	(x,	1);
	MakeComm	(0X1003CC,	"letter");
	MakeComm	(0X1003D0,	"x");
	MakeComm	(0X1003D4,	"y");
	MakeComm	(0X1003DC,	"r");
	MakeCode	(0X1003F0);
	MakeCode	(0X1003F8);
	MakeName	(0X1003F8,	"ntr2dPrint");
	MakeCode	(x=0X100410);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100414);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100418);
	OpStkvar	(x,	1);
	MakeComm	(0X10041C,	"y");
	MakeComm	(0X100420,	"ys");
	MakeComm	(0X100424,	"xs");
	MakeComm	(0X100428,	"x");
	MakeComm	(0X100434,	"word");
	MakeComm	(0X100438,	"screen");
	MakeCode	(x=0X100438);
	OpStkvar	(x,	1);
	MakeComm	(0X10043C,	"x");
	MakeComm	(0X100440,	"y");
	MakeComm	(0X100444,	"r");
	MakeComm	(0X100448,	"g");
	MakeCode	(x=0X100448);
	OpStkvar	(x,	1);
	MakeComm	(0X10044C,	"b");
	MakeCode	(x=0X10044C);
	OpStkvar	(x,	1);
	MakeComm	(0X100458,	"g");
	MakeCode	(x=0X100458);
	OpStkvar	(x,	1);
	MakeComm	(0X10045C,	"screen");
	MakeCode	(x=0X10045C);
	OpStkvar	(x,	1);
	MakeComm	(0X100460,	"b");
	MakeCode	(x=0X100460);
	OpStkvar	(x,	1);
	MakeComm	(0X100464,	"word");
	MakeComm	(0X100468,	"x");
	MakeComm	(0X10046C,	"y");
	MakeComm	(0X100470,	"r");
	MakeDword	(x=0X100480);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X100484);
	MakeName	(0X100484,	"ntr2dPrintU8");
	MakeComm	(0X100490,	"ret");
	MakeCode	(x=0X100490);
	OpStkvar	(x,	1);
	MakeComm	(0X100494,	"max_len");
	MakeCode	(x=0X1004A0);
	OpStkvar	(x,	1);
	MakeComm	(0X1004A4,	"s");
	MakeCode	(x=0X1004A4);
	OpStkvar	(x,	1);
	MakeComm	(0X1004A8,	"x");
	MakeComm	(0X1004AC,	"g");
	MakeCode	(x=0X1004AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1004B0);
	OpStkvar	(x,	1);
	MakeComm	(0X1004B4,	"y");
	MakeComm	(0X1004B8,	"b");
	MakeCode	(x=0X1004B8);
	OpStkvar	(x,	1);
	MakeComm	(0X1004BC,	"r");
	MakeCode	(0X1004CC);
	MakeName	(0X1004CC,	"ntr2dPrintU32");
	MakeComm	(0X1004DC,	"ret");
	MakeCode	(x=0X1004DC);
	OpStkvar	(x,	1);
	MakeComm	(0X1004E0,	"max_len");
	MakeCode	(x=0X1004EC);
	OpStkvar	(x,	1);
	MakeComm	(0X1004F0,	"s");
	MakeCode	(x=0X1004F0);
	OpStkvar	(x,	1);
	MakeComm	(0X1004F4,	"x");
	MakeComm	(0X1004F8,	"g");
	MakeCode	(x=0X1004F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1004FC);
	OpStkvar	(x,	1);
	MakeComm	(0X100500,	"y");
	MakeComm	(0X100504,	"b");
	MakeCode	(x=0X100504);
	OpStkvar	(x,	1);
	MakeComm	(0X100508,	"r");
	MakeCode	(0X100518);
	MakeName	(0X100518,	"acuCmd1");
	MakeComm	(0X100548,	"session");
	MakeDword	(0X100564);
	MakeCode	(0X100568);
	MakeName	(0X100568,	"acuCmd26");
	MakeComm	(0X1005A4,	"session");
	MakeDword	(0X1005C0);
	MakeDword	(0X1005C4);
	MakeCode	(0X1005C8);
	MakeName	(0X1005C8,	"acuGetWifiStatus");
	MakeComm	(0X1005E4,	"session");
	MakeCode	(0X100600);
	MakeName	(0X100600,	"acuWaitInternetConnection");
	MakeComm	(0X100604,	"handleptr");
	MakeComm	(0X100608,	"out");
	MakeCode	(x=0X100610);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100614);
	OpStkvar	(x,	1);
	MakeComm	(0X100624,	"servhandle");
	MakeCode	(x=0X100624);
	OpStkvar	(x,	1);
	MakeComm	(0X100628,	"out");
	MakeCode	(x=0X100628);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100638);
	OpStkvar	(x,	1);
	MakeComm	(0X100644,	"handle");
	MakeCode	(x=0X100644);
	OpStkvar	(x,	1);
	MakeDword	(x=0X100658);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X100658,	"server");
	MakeCode	(x=0X10065C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X10065C,	"main");
	MakeDword	(x=0X100680);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X100684);
	MakeDword	(0X100688);
	MakeCode	(0X10068C);
	MakeName	(0X10068C,	"FSUSER_Initialize");
	MakeComm	(0X1006A8,	"session");
	MakeDword	(0X1006BC);
	MakeCode	(0X1006C0);
	MakeName	(0X1006C0,	"FSUSER_OpenFile");
	MakeCode	(x=0X1006CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1006D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1006EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1006F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100704);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100708);
	OpHex		(x,	1);
	MakeCode	(x=0X100714);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100720);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100728);
	OpStkvar	(x,	1);
	MakeComm	(0X100730,	"session");
	MakeDword	(0X10075C);
	MakeCode	(0X100760);
	MakeName	(0X100760,	"FSUSER_OpenFileDirectly");
	MakeCode	(x=0X10076C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100770);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10077C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100790);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10079C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1007AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1007B0);
	OpHex		(x,	1);
	MakeCode	(x=0X1007BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1007C0);
	OpHex		(x,	1);
	MakeCode	(x=0X1007C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1007CC);
	OpHex		(x,	1);
	MakeCode	(x=0X1007D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1007E0);
	OpStkvar	(x,	1);
	MakeComm	(0X1007F0,	"session");
	MakeDword	(0X10081C);
	MakeCode	(0X100820);
	MakeName	(0X100820,	"FSUSER_OpenArchive");
	MakeCode	(x=0X100864);
	OpHex		(x,	1);
	MakeComm	(0X100874,	"session");
	MakeCode	(0X100898);
	MakeDword	(0X1008A0);
	MakeCode	(0X1008A4);
	MakeName	(0X1008A4,	"FSUSER_OpenDirectory");
	MakeCode	(x=0X1008B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1008B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1008CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1008D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1008E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1008E8);
	OpHex		(x,	1);
	MakeCode	(x=0X1008F4);
	OpStkvar	(x,	1);
	MakeComm	(0X100900,	"session");
	MakeDword	(0X10092C);
	MakeCode	(0X100930);
	MakeName	(0X100930,	"FSUSER_CloseArchive");
	MakeComm	(0X100964,	"session");
	MakeCode	(0X100978);
	MakeDword	(0X100980);
	MakeCode	(0X100984);
	MakeName	(0X100984,	"FSFILE_Close");
	MakeComm	(0X10099C,	"session");
	MakeDword	(0X1009B0);
	MakeCode	(0X1009B4);
	MakeName	(0X1009B4,	"FSFILE_Read");
	MakeCode	(x=0X1009C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1009E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1009E4);
	OpHex		(x,	1);
	MakeComm	(0X1009F8,	"session");
	MakeDword	(0X100A1C);
	MakeCode	(0X100A20);
	MakeName	(0X100A20,	"FSFILE_Write");
	MakeCode	(x=0X100A2C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100A44);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100A54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100A58);
	OpHex		(x,	1);
	MakeComm	(0X100A6C,	"session");
	MakeDword	(0X100A90);
	MakeCode	(0X100A94);
	MakeName	(0X100A94,	"FSFILE_GetSize");
	MakeComm	(0X100AB0,	"session");
	MakeDword	(0X100AD4);
	MakeCode	(0X100AD8);
	MakeName	(0X100AD8,	"FSFILE_SetSize");
	MakeComm	(0X100AFC,	"session");
	MakeDword	(0X100B10);
	MakeCode	(0X100B14);
	MakeName	(0X100B14,	"FSDIR_Read");
	MakeCode	(x=0X100B3C);
	OpHex		(x,	1);
	MakeComm	(0X100B50,	"session");
	MakeDword	(0X100B74);
	MakeCode	(0X100B78);
	MakeName	(0X100B78,	"FSDIR_Close");
	MakeComm	(0X100B90,	"session");
	MakeDword	(0X100BA4);
	MakeCode	(0X100BA8);
	MakeName	(0X100BA8,	"callback_return_C821180B");
	MakeDword	(0X100BB0);
	MakeCode	(0X100BB4);
	MakeName	(0X100BB4,	"callback_patch_smdh");
	MakeCode	(x=0X100BB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100BBC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100BC0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100BC8,	"calls original (hooked) function:\n---------------------------------\n1. executes the two backed up instructions that have\n   been overwritten by the function hook mechanism\n\n2. executes a ldr pc, orig_func + 8, in order to execute\n   the original function\n\n3. waits for the original function to return (which will\n   then contain:\n\n   R0 = return value of original function\n   [the following registers are preserved]\n   R4 = pointer to SMDH\n   R5 = size of SMDH\n\n(for details refer to the rtInitHook function in the NTR plugin SDK)");
	MakeComm	(0X100BCC,	"size of SMDH");
	MakeComm	(0X100BDC,	"magic");
	MakeCode	(x=0X100BE8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100BF4,	"Nintendo defines region free as 0x7fffffff");
	MakeComm	(0X100BF8,	"patch region lockout (offset 0x2018)");
	MakeDword	(x=0X100C08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X100C0C);
	OpChr		(x,	0);
	MakeDword	(x=0X100C10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X100C14);
	MakeName	(0X100C14,	"is_BUTTON_DL_pressed");
	MakeCode	(x=0X100C20);
	OpHex		(x,	1);
	MakeComm	(0X100C28,	"kernel version register");
	MakeCode	(0X100C28);
	MakeName	(0X100C28,	"get_kernel_version_info");
	MakeComm	(0X100C2C,	"kernel ver x");
	MakeComm	(0X100C30,	"kernel ver y");
	MakeCode	(x=0X100C40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100C44,	"is supported");
	MakeCode	(x=0X100C50);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100C54);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100C74);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100C78);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(0X100C88);
	MakeDword	(0X100C8C);
	MakeDword	(0X100C90);
	MakeDword	(x=0X100C94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X100C98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X100C9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X100CA0);
	MakeDword	(x=0X100CA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X100CA8);
	MakeName	(0X100CA8,	"get_nintendo_home_version_info");
	MakeCode	(x=0X100CB0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100CB4);
	OpStkvar	(x,	1);
	MakeComm	(0X100CB8,	"process");
	MakeCode	(x=0X100CB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100CBC);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X100CC0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100CC4,	"processId");
	MakeComm	(0X100CD0,	"size");
	MakeCode	(x=0X100CD0);
	OpStkvar	(x,	1);
	MakeComm	(0X100CD4,	"hSrc");
	MakeCode	(x=0X100CD4);
	OpStkvar	(x,	1);
	MakeComm	(0X100CD8,	"src_addr");
	MakeCode	(x=0X100CD8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100CDC,	"hDst");
	MakeComm	(0X100CE0,	"dst_addr");
	MakeCode	(x=0X100CE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100CE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100CFC);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X100D00);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100D0C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100D18);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X100D2C);
	MakeCode	(x=0X100D3C);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X100D40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100D4C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100D58);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100D68);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X100D78);
	MakeCode	(x=0X100D88);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X100D8C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100D98);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100DA4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100DB0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X100DC4);
	MakeCode	(x=0X100DD4);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X100DD8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100DE4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100DF0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100DFC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100E0C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100E14,	"handle");
	MakeCode	(x=0X100E14);
	OpStkvar	(x,	1);
	MakeDword	(x=0X100E28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X100E2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X100E30);
	MakeName	(0X100E30,	"hDst");
	MakeDword	(0X100E34);
	MakeDword	(x=0X100E38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X100E3C);
	MakeDword	(x=0X100E40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X100E44);
	MakeDword	(x=0X100E48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X100E4C);
	MakeDword	(0X100E50);
	MakeDword	(0X100E54);
	MakeDword	(0X100E58);
	MakeDword	(x=0X100E5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X100E60);
	MakeDword	(0X100E64);
	MakeDword	(0X100E68);
	MakeDword	(0X100E6C);
	MakeDword	(0X100E70);
	MakeDword	(0X100E74);
	MakeDword	(0X100E78);
	MakeDword	(0X100E7C);
	MakeDword	(0X100E80);
	MakeDword	(0X100E84);
	MakeDword	(0X100E88);
	MakeDword	(0X100E8C);
	MakeDword	(0X100E90);
	MakeDword	(x=0X100E94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X100E98);
	MakeName	(0X100E98,	"lcd_solid_fill");
	MakeCode	(x=0X100EA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100EB4);
	OpOff		(x,	1,	0X10833C);
	OpOff		(x,	129,	0X10833C);
	MakeComm	(0X100EB8,	"nanoseconds");
	MakeRptCmt	(0X100EC0,	"offs 0x204 = REG_LCDCOLORFILLMAIN");
	MakeCode	(x=0X100ED0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X100ED8);
	OpOff		(x,	1,	0X10833C);
	OpOff		(x,	129,	0X10833C);
	MakeDword	(x=0X100EE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X100EE8);
	MakeName	(0X100EE8,	"nanoseconds");
	MakeCode	(0X100EEC);
	MakeName	(0X100EEC,	"thread_setup_ntr_network_server");
	MakeDword	(0X100F18);
	MakeDword	(0X100F1C);
	MakeCode	(0X100F20);
	MakeName	(0X100F20,	"fatal_LR");
	MakeCode	(x=0X100F30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X100F44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X100F48);
	MakeComm	(0X100F54,	"archive");
	MakeCode	(x=0X100F58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100F60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100F68);
	OpStkvar	(x,	1);
	MakeComm	(0X100F80,	"a1");
	MakeCode	(x=0X100F84);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100F90);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100F94);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100F98);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100F9C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100FA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100FB0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100FC0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X100FC8,	"handle");
	MakeCode	(x=0X100FC8);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeComm	(0X100FCC,	"out");
	MakeCode	(x=0X100FCC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100FE0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X100FF0);
	MakeCode	(x=0X100FFC);
	OpStkvar	(x,	1);
	MakeComm	(0X101000,	"buffer");
	MakeComm	(0X101004,	"handle");
	MakeCode	(x=0X101004);
	OpStkvar	(x,	1);
	MakeComm	(0X101008,	"entriesRead");
	MakeCode	(x=0X101008);
	OpStkvar	(x,	1);
	MakeComm	(0X10100C,	"entrycount");
	MakeCode	(x=0X101010);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101018);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101024);
	OpStkvar	(x,	1);
	MakeCode	(0X10106C);
	MakeCode	(x=0X101074);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101080);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1010A8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1010B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1010BC);
	OpStkvar	(x,	1);
	MakeComm	(0X1010D4,	"handle");
	MakeCode	(x=0X1010D4);
	OpStkvar	(x,	1);
	MakeDword	(x=0X1010F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1010F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1010F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1010FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X101100);
	MakeCode	(x=0X101108);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101120);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101124);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10112C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101130);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101134);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101138,	"handle");
	MakeCode	(x=0X101138);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeComm	(0X10113C,	"archive");
	MakeCode	(x=0X101140);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101150);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101154);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10115C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101168);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10116C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101170);
	OpStkvar	(x,	1);
	MakeComm	(0X101184,	"handle");
	MakeCode	(x=0X101184);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeComm	(0X101188,	"archive");
	MakeDword	(0X101198);
	MakeDword	(x=0X10119C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1011A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1011A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1011A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1011AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1011AC,	"check_plugin_exit_flag");
	MakeCode	(x=0X1011B4);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeDword	(x=0X1011C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1011C8);
	MakeName	(0X1011C8,	"set_KProcess_refcount_to_1");
	MakeComm	(0X1011CC,	"processId");
	MakeComm	(0X1011D0,	"process");
	MakeCode	(x=0X1011E0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1011F4,	"handle");
	MakeCode	(x=0X1011F4);
	OpStkvar	(x,	1);
	MakeComm	(0X1011F8,	"get address of KProcess object by process handle");
	MakeCode	(x=0X1011FC);
	OpStkvar	(x,	1);
	MakeComm	(0X101200,	"count");
	MakeComm	(0X101204,	"init var_14");
	MakeComm	(0X101208,	"ptr to ref count");
	MakeComm	(0X10120C,	"src");
	MakeComm	(0X101210,	"dst");
	MakeComm	(0X101218,	"set ref count to 1");
	MakeComm	(0X10121C,	"dst");
	MakeComm	(0X101220,	"src");
	MakeComm	(0X101224,	"count");
	MakeCode	(x=0X101228);
	OpStkvar	(x,	1);
	MakeComm	(0X101230,	"handle");
	MakeCode	(x=0X101230);
	OpStkvar	(x,	1);
	MakeDword	(x=0X101240);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X101244);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X101244,	"thread_NTR_home_injectee");
	MakeComm	(0X10124C,	"funcaddr");
	MakeComm	(0X101250,	"callback_addr");
	MakeCode	(x=0X101250);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101254,	"hook");
	MakeCode	(x=0X101254);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101258,	"hook FSFile:Read (statically linked into homemenu) in order to disable region lock");
	MakeComm	(0X10125C,	"rthook");
	MakeCode	(x=0X10125C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101264);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101268,	"callback_addr");
	MakeCode	(x=0X101268);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10126C,	"hook");
	MakeCode	(x=0X10126C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101270,	"funcaddr");
	MakeComm	(0X101274,	"hook nss:CardUpdateInitialize (statically linked into homemenu) in order to bypass mandatory cart updates");
	MakeComm	(0X101278,	"rthook");
	MakeCode	(x=0X101278);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101280);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101284);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101298);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10129C);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X1012B4);
	OpOff		(x,	1,	0X108364);
	OpOff		(x,	129,	0X108364);
	MakeCode	(x=0X1012B8);
	OpOff		(x,	1,	0X108364);
	OpOff		(x,	129,	0X108364);
	MakeCode	(x=0X1012BC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1012C0);
	OpOff		(x,	1,	0X108364);
	OpOff		(x,	129,	0X108364);
	MakeCode	(x=0X1012DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1012E4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101300,	"nanoseconds");
	MakeComm	(0X101308,	"pid 0x27");
	MakeCode	(x=0X10131C);
	OpHex		(x,	1);
	MakeComm	(0X101320,	"X & Y pressed?");
	MakeComm	(0X101338,	"nanoseconds");
	MakeDword	(x=0X101348);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10134C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X10134C,	"callback_addr");
	MakeDword	(x=0X101350);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X101350,	"rthook");
	MakeDword	(x=0X101354);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101358);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X101358,	"callbackAddr");
	MakeDword	(x=0X10135C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X10135C,	"hook");
	MakeDword	(x=0X101360);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101364);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101368);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10136C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X101370);
	MakeDword	(x=0X101374);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101378);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X10137C);
	MakeDword	(x=0X101380);
	OpDecimal	(x,	0);
	MakeCode	(0X101384);
	MakeName	(0X101384,	"prepare_config_mem");
	MakeCode	(x=0X101388);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10138C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101394,	"addr");
	MakeComm	(0X101398,	"size");
	MakeComm	(0X1013AC,	"MEMPERM_READ | MEMPERM_WRITE");
	ExtLinA		(0X1013AC,	0,	"; on failure, fall back to RW only");
	ExtLinA		(0X1013AC,	1,	"");
	MakeComm	(0X1013B0,	"operation");
	MakeCode	(x=0X1013B0);
	OpStkvar	(x,	1);
	MakeComm	(0X1013B4,	"permissions");
	MakeCode	(x=0X1013B4);
	OpStkvar	(x,	1);
	MakeComm	(0X1013B8,	"addr0");
	MakeComm	(0X1013BC,	"outaddr");
	MakeCode	(x=0X1013BC);
	OpStkvar	(x,	1);
	MakeComm	(0X1013C0,	"addr1");
	MakeComm	(0X1013C4,	"size");
	MakeCode	(x=0X1013D4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1013E0);
	MakeCode	(x=0X1013E8);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeDword	(x=0X101400);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101404);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X101408);
	MakeName	(0X101408,	"inject_ntr_into_home_menu");
	MakeCode	(x=0X101414);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101420);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101424);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101428,	"offs 0x0C = func *");
	MakeCode	(x=0X101428);
	OpOff		(x,	1,	0X100104);
	OpOff		(x,	129,	0X100104);
	MakeComm	(0X10142C,	"size");
	MakeCode	(x=0X10142C);
	OpOff		(x,	1,	0X100104);
	OpOff		(x,	129,	0X100104);
	MakeCode	(x=0X101438);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101440);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10144C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101450,	"processId");
	MakeCode	(x=0X101464);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101468,	"buf");
	MakeCode	(x=0X101468);
	OpStkvar	(x,	1);
	MakeComm	(0X10146C,	"handle");
	MakeCode	(x=0X10146C);
	OpStkvar	(x,	1);
	MakeComm	(0X101470,	"addr_jmpcode");
	MakeComm	(0X101478,	"handle");
	MakeCode	(x=0X101478);
	OpStkvar	(x,	1);
	MakeDword	(x=0X101488);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10148C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101490);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101494);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101498);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X10149C);
	MakeName	(0X10149C,	"sleep_thread");
	MakeComm	(0X1014A4,	"nanoseconds");
	MakeDword	(x=0X1014BC);
	OpDecimal	(x,	0);
	MakeCode	(0X1014C0);
	MakeName	(0X1014C0,	"close_all_srv_handles?");
	MakeComm	(0X1014D0,	"nanoseconds");
	MakeDword	(0X1014E8);
	MakeCode	(0X1014EC);
	MakeDword	(0X101500);
	MakeComm	(0X101504,	"threadpriority");
	MakeCode	(0X101504);
	MakeName	(0X101504,	"ntrInstall");
	MakeCode	(x=0X101508);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10150C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10151C);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X101524);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101528);
	OpOff		(x,	1,	0X100104);
	OpOff		(x,	129,	0X100104);
	MakeCode	(x=0X10152C);
	OpOff		(x,	1,	0X100104);
	OpOff		(x,	129,	0X100104);
	MakeCode	(x=0X101530);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X10153C);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X101550);
	OpOff		(x,	1,	0X108364);
	OpOff		(x,	129,	0X108364);
	MakeCode	(x=0X101554);
	OpOff		(x,	1,	0X108364);
	OpOff		(x,	129,	0X108364);
	MakeCode	(x=0X101558);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10155C);
	OpOff		(x,	1,	0X108364);
	OpOff		(x,	129,	0X108364);
	MakeCode	(x=0X101574);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101588);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101594);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1015AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1015B4,	"pid");
	MakeCode	(x=0X1015B8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1015C0,	"pid");
	MakeCode	(x=0X1015C0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1015C4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1015CC,	"pid");
	MakeCode	(x=0X1015CC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1015D0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1015D8,	"pid");
	MakeCode	(x=0X1015DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1015E4,	"va_dumpaddr");
	MakeComm	(0X1015E8,	"size");
	MakeCode	(x=0X1015EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1015F4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1015FC,	"nanoseconds");
	MakeCode	(0X10160C);
	MakeCode	(x=0X101610);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10161C);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X101624);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X101640);
	MakeCode	(x=0X101648);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101658,	"size");
	MakeCode	(x=0X10165C);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X101660);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeComm	(0X101664,	"addr");
	MakeComm	(0X101678,	"dst");
	MakeComm	(0X10167C,	"src");
	MakeCode	(x=0X10167C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101684,	"size");
	MakeComm	(0X101688,	"addr");
	MakeCode	(x=0X1016A0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1016B0,	"current pid == pid of nintendo home menu?");
	ExtLinA		(0X1016BC,	0,	"; this will be executed if we're running from");
	ExtLinA		(0X1016BC,	1,	"; within nintendo home menu");
	ExtLinA		(0X1016BC,	2,	"");
	MakeCode	(x=0X1016BC);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeComm	(0X1016C8,	"entrypoint");
	MakeCode	(x=0X1016C8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1016D0,	"arg");
	MakeComm	(0X1016D4,	"thread");
	MakeCode	(x=0X1016D4);
	OpStkvar	(x,	1);
	MakeComm	(0X1016D8,	"stacktop");
	MakeCode	(x=0X1016E4);
	OpOff		(x,	1,	0X10A924);
	OpOff		(x,	129,	0X10A924);
	MakeCode	(x=0X1016F8);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeComm	(0X10171C,	"thread");
	MakeCode	(x=0X10171C);
	OpStkvar	(x,	1);
	MakeComm	(0X101720,	"entrypoint");
	MakeCode	(x=0X101720);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101724,	"arg");
	MakeComm	(0X101728,	"stacktop");
	MakeComm	(0X101730,	"nanoseconds");
	MakeComm	(0X10173C,	"r8+8 = pid of pm (=2)");
	MakeComm	(0X101740,	"are we process manager?");
	ExtLinA		(0X101748,	0,	"; this will be executed if we're running from");
	ExtLinA		(0X101748,	1,	"; within the process manager and will be used");
	ExtLinA		(0X101748,	2,	"; to force it to inject code into nintendo home menu");
	ExtLinA		(0X101748,	3,	"");
	MakeCode	(0X101750);
	MakeDword	(x=0X101780);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101784);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101788);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10178C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101790);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101794);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101798);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10179C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X10179C,	"filename");
	MakeDword	(x=0X1017A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1017A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1017A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1017AC);
	MakeName	(0X1017AC,	"va_dumpaddr");
	MakeDword	(x=0X1017B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1017B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1017B8);
	MakeDword	(x=0X1017BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1017C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1017C4);
	MakeDword	(x=0X1017C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1017CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1017CC,	"addr");
	MakeDword	(x=0X1017D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1017D4);
	MakeDword	(x=0X1017D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1017D8,	"entrypoint");
	MakeDword	(0X1017DC);
	MakeName	(0X1017DC,	"stacktop");
	MakeDword	(0X1017E0);
	MakeDword	(x=0X1017E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1017E8);
	MakeDword	(0X1017EC);
	MakeCode	(0X1017F0);
	MakeName	(0X1017F0,	"ntrMemoryWriteColor");
	MakeCode	(0X101800);
	MakeName	(0X101800,	"ntrMemoryWriteByte");
	MakeCode	(0X101808);
	MakeName	(0X101808,	"ntrMemoryNibbleToReadable");
	MakeCode	(0X10181C);
	MakeName	(0X10181C,	"ntrMemoryByteToString");
	MakeCode	(x=0X10182C);
	OpHex		(x,	1);
	MakeComm	(0X10183C,	"nibble");
	MakeCode	(0X101854);
	MakeCode	(0X101858);
	MakeName	(0X101858,	"ntrMemoryU32ToString");
	MakeCode	(0X1018AC);
	MakeCode	(0X1018B0);
	MakeName	(0X1018B0,	"sleep");
	MakeCode	(0X1018B8);
	MakeName	(0X1018B8,	"cb_arm11_dispatch");
	MakeComm	(0X1018C0,	"disable fiq and irq");
	MakeCode	(x=0X1018C0);
	OpHex		(x,	1);
	MakeCode	(0X1018D0);
	MakeName	(0X1018D0,	"InvalidateEntireInstructionCache");
	MakeCode	(0X1018DC);
	MakeName	(0X1018DC,	"CleanEntireDataCache");
	MakeByte	(0X1018E8);
	MakeArray	(0X1018E8,	0X8);
	MakeName	(0X1018E8,	"nsDbgPrint_2");
	MakeCode	(x=0X1018F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1018F0,	"init_debugger");
	MakeCode	(x=0X1018F8);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1018FC);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X101904);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X101910);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeDword	(x=0X101920);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X101924,	"sends str to connected network client");
	MakeCode	(0X101924);
	MakeName	(0X101924,	"nsDbgPrint");
	MakeCode	(x=0X10192C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101930);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101934);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101944);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeComm	(0X101950,	"lock");
	MakeCode	(x=0X101958);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10195C);
	OpStkvar	(x,	1);
	MakeComm	(0X101968,	"lock");
	MakeDword	(x=0X101980);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X101984);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X1019A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1019AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1019E8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X1019F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1019FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X101A00);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X101A00,	"recv_wrapper");
	MakeCode	(x=0X101A3C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X101A4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101A50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X101A54);
	MakeName	(0X101A54,	"handle_savefile_packet");
	MakeComm	(0X101A58,	"size");
	MakeCode	(x=0X101A5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101A84,	"a1");
	MakeCode	(x=0X101A88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101A8C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101A94);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101A98);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101A9C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101AA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101AAC);
	OpStkvar	(x,	1);
	MakeComm	(0X101ABC,	"openflags");
	MakeCode	(x=0X101ABC);
	OpStkvar	(x,	1);
	MakeComm	(0X101AC4,	"attributes");
	MakeCode	(x=0X101AC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101AD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101AD8,	"handle");
	MakeComm	(0X101ADC,	"out");
	MakeCode	(x=0X101ADC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101AF8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X101B08);
	MakeComm	(0X101B34,	"offset");
	MakeComm	(0X101B40,	"handle");
	MakeCode	(x=0X101B40);
	OpStkvar	(x,	1);
	MakeComm	(0X101B48,	"bytesWritten");
	MakeCode	(x=0X101B48);
	OpStkvar	(x,	1);
	MakeComm	(0X101B4C,	"buffer");
	MakeComm	(0X101B60,	"handle");
	MakeCode	(x=0X101B60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101B68);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X101B7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101B80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101B84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X101B88);
	MakeDword	(x=0X101B8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101B90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X101B94);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X101BD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X101BD4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X101BD4,	"debugcmd_enable_breakpoint");
	MakeCode	(x=0X101C00);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101C30,	"rthook");
	MakeCode	(x=0X101C38);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X101C48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101C4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101C50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X101C54);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X101C54,	"debugcmd_disable_breakpoint");
	MakeCode	(x=0X101C80);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101CB0,	"hook");
	MakeCode	(x=0X101CB8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X101CC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101CCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101CD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X101CD4);
	MakeCode	(x=0X101CDC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101CEC,	"lock");
	MakeComm	(0X101D20,	"lock");
	MakeComm	(0X101D40,	"lock");
	MakeComm	(0X101D50,	"lock");
	MakeComm	(0X101D64,	"lock");
	MakeCode	(x=0X101D68);
	OpStkvar	(x,	1);
	MakeComm	(0X101D70,	"nanoseconds");
	MakeCode	(x=0X101D7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101D90);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101D9C,	"lock");
	MakeDword	(x=0X101DAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X101DB0);
	MakeCode	(0X101DB4);
	MakeName	(0X101DB4,	"init_breakpoint?");
	MakeCode	(x=0X101DBC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101DDC,	"size");
	MakeComm	(0X101DE0,	"addr");
	MakeCode	(x=0X101DF0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X101E04);
	MakeCode	(x=0X101E28);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X101E54);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101E5C,	"addr");
	MakeComm	(0X101E68,	"size");
	MakeComm	(0X101E88,	"funcaddr");
	MakeComm	(0X101E8C,	"callback_addr");
	MakeComm	(0X101E90,	"hook");
	MakeComm	(0X101E98,	"nanoseconds");
	MakeDword	(x=0X101EAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101EB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101EB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101EB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X101EBC);
	MakeCode	(x=0X101EC0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X101EC0,	"debugcmd_init_breakpoint");
	MakeCode	(x=0X101F10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X101F2C);
	MakeCode	(x=0X101F30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X101F50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101F54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X101F58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X101F5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X101F5C,	"handle_queryhandle_packet");
	MakeCode	(x=0X101F74);
	OpStkvar	(x,	1);
	MakeComm	(0X101F7C,	"process");
	MakeComm	(0X101F80,	"processId");
	MakeCode	(x=0X101F84);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101F94);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101FA0,	"handle");
	MakeCode	(x=0X101FA0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X101FA8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X101FAC,	"count");
	MakeComm	(0X101FB4,	"src");
	MakeComm	(0X101FB8,	"dst");
	MakeComm	(0X101FC0,	"dst");
	MakeComm	(0X101FC4,	"src");
	MakeCode	(x=0X101FC4);
	OpStkvar	(x,	1);
	MakeComm	(0X101FC8,	"count");
	MakeComm	(0X101FCC,	"read 0x640 bytes at KProcessHandleTable");
	MakeCode	(x=0X101FEC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102004);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10200C,	"handle");
	MakeCode	(x=0X10200C);
	OpStkvar	(x,	1);
	MakeDword	(x=0X102020);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102024);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102028);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10202C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102030);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X102034);
	MakeName	(0X102034,	"handle_debugcmd_packet");
	MakeCode	(x=0X102038);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102064);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X102088);
	MakeCode	(x=0X102090);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1020B4);
	MakeCode	(x=0X1020BC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1020C8);
	MakeCode	(0X1020DC);
	MakeCode	(0X1020F0);
	MakeDword	(x=0X1020FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102100);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102104);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102108);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X10210C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X10210C,	"handle_reload_packet");
	MakeCode	(x=0X10211C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102120,	"operation");
	MakeCode	(x=0X102124);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeComm	(0X102130,	"sockfd");
	MakeCode	(x=0X102130);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeComm	(0X102140,	"sockfd");
	MakeCode	(x=0X10214C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102150);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102154);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102158);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10215C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102164);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102168);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102174,	"openflags");
	MakeCode	(x=0X102174);
	OpStkvar	(x,	1);
	MakeComm	(0X10217C,	"attributes");
	MakeCode	(x=0X10217C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102188);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102190,	"handle");
	MakeComm	(0X102194,	"out");
	MakeCode	(x=0X102194);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1021A4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1021AC,	"handle");
	MakeCode	(x=0X1021AC);
	OpStkvar	(x,	1);
	MakeComm	(0X1021B0,	"size");
	MakeCode	(x=0X1021B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1021BC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1021CC,	"size");
	MakeCode	(x=0X1021CC);
	OpStkvar	(x,	1);
	MakeComm	(0X1021D8,	"addr0");
	MakeComm	(0X1021DC,	"addr1");
	MakeComm	(0X1021E8,	"size");
	MakeComm	(0X1021EC,	"outaddr");
	MakeCode	(x=0X1021EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1021FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102204);
	OpStkvar	(x,	1);
	MakeComm	(0X102208,	"handle");
	MakeCode	(x=0X102208);
	OpStkvar	(x,	1);
	MakeComm	(0X10220C,	"bytesRead");
	MakeCode	(x=0X10220C);
	OpStkvar	(x,	1);
	MakeComm	(0X102214,	"offset");
	MakeComm	(0X102218,	"buffer");
	MakeCode	(x=0X102224);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102234,	"size");
	MakeComm	(0X102238,	"addr");
	MakeCode	(x=0X102238);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102248);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102258);
	OpStkvar	(x,	1);
	MakeCode	(0X102264);
	MakeDword	(x=0X10226C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102270);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102274);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102278);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10227C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102280);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102284);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102288);
	MakeDword	(x=0X10228C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102290);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102294);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X102298);
	MakeName	(0X102298,	"handle_listprocess_packet");
	MakeCode	(x=0X1022A0);
	OpStkvar	(x,	1);
	MakeComm	(0X1022A4,	"processIds");
	MakeComm	(0X1022A8,	"processCount");
	MakeCode	(x=0X1022A8);
	OpStkvar	(x,	1);
	MakeComm	(0X1022AC,	"processIdMaxCount");
	MakeCode	(x=0X1022C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1022CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1022D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1022D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1022E8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1022F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1022F4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1022F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1022FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102300);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102304);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102308);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102318);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102324);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X102334);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102338);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10233C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102340);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X102344);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X102344,	"handle_memlayout_packet");
	MakeComm	(0X10234C,	"process");
	MakeCode	(x=0X10234C);
	OpStkvar	(x,	1);
	MakeComm	(0X102358,	"processId");
	MakeCode	(x=0X102368);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10237C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102384);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102390);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102398,	"hKProcess");
	MakeCode	(x=0X102398);
	OpStkvar	(x,	1);
	MakeComm	(0X10239C,	"addr");
	MakeComm	(0X1023A0,	"size");
	MakeCode	(x=0X1023C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1023E8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1023F0,	"handle");
	MakeCode	(x=0X1023F0);
	OpStkvar	(x,	1);
	MakeDword	(x=0X102408);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10240C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102410);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102414);
	MakeDword	(x=0X102418);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10241C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X102420);
	MakeName	(0X102420,	"handle_writemem_packet");
	MakeCode	(x=0X102424);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102448);
	OpStkvar	(x,	1);
	MakeComm	(0X102450,	"processId");
	MakeCode	(0X102450);
	MakeComm	(0X102454,	"process");
	MakeCode	(x=0X102454);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102464);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102474);
	OpStkvar	(x,	1);
	MakeCode	(0X10247C);
	MakeCode	(x=0X102488);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102490,	"addr");
	MakeCode	(0X102490);
	MakeComm	(0X102494,	"hProcess");
	MakeCode	(x=0X102494);
	OpStkvar	(x,	1);
	MakeComm	(0X102498,	"size");
	MakeCode	(x=0X1024A8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1024B8);
	MakeComm	(0X1024EC,	"dst");
	MakeComm	(0X1024F0,	"src");
	MakeComm	(0X1024F4,	"count");
	MakeCode	(0X102514);
	MakeCode	(0X10251C);
	MakeComm	(0X102520,	"dst_addr");
	MakeComm	(0X102528,	"size");
	MakeCode	(x=0X102528);
	OpStkvar	(x,	1);
	MakeComm	(0X10252C,	"hDst");
	MakeCode	(x=0X10252C);
	OpStkvar	(x,	1);
	MakeComm	(0X102530,	"hSrc");
	MakeComm	(0X102534,	"src_addr");
	MakeCode	(x=0X102544);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102554);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10255C,	"handle");
	MakeCode	(x=0X10255C);
	OpStkvar	(x,	1);
	MakeDword	(x=0X102578);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10257C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102580);
	MakeDword	(x=0X102584);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102588);
	MakeName	(0X102588,	"hSrc");
	MakeDword	(x=0X10258C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102590);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X102594);
	MakeName	(0X102594,	"handle_readmem_packet");
	MakeCode	(x=0X10259C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1025C0);
	OpStkvar	(x,	1);
	MakeComm	(0X1025C8,	"processId");
	MakeCode	(0X1025C8);
	MakeComm	(0X1025CC,	"process");
	MakeCode	(x=0X1025CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1025DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1025EC);
	OpStkvar	(x,	1);
	MakeCode	(0X1025F4);
	MakeComm	(0X1025FC,	"addr");
	MakeComm	(0X102600,	"hProcess");
	MakeCode	(x=0X102600);
	OpStkvar	(x,	1);
	MakeComm	(0X102604,	"size");
	MakeCode	(x=0X102614);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X102624);
	MakeComm	(0X102658,	"dst");
	MakeComm	(0X10265C,	"src");
	MakeComm	(0X102660,	"count");
	MakeCode	(0X102670);
	MakeCode	(0X102678);
	MakeComm	(0X10267C,	"size");
	MakeCode	(x=0X10267C);
	OpStkvar	(x,	1);
	MakeComm	(0X102684,	"dst_addr");
	MakeComm	(0X102688,	"hDst");
	MakeComm	(0X10268C,	"hSrc");
	MakeCode	(x=0X10268C);
	OpStkvar	(x,	1);
	MakeComm	(0X102690,	"src_addr");
	MakeCode	(x=0X1026A0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1026CC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1026D4,	"handle");
	MakeCode	(x=0X1026D4);
	OpStkvar	(x,	1);
	MakeDword	(x=0X1026F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1026F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1026F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1026FC);
	MakeDword	(0X102700);
	MakeDword	(x=0X102704);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102708);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X10270C);
	MakeName	(0X10270C,	"get_remote_PC");
	MakeCode	(x=0X10271C);
	OpStkvar	(x,	1);
	MakeComm	(0X102720,	"threadIds");
	MakeComm	(0X102724,	"threadCount");
	MakeComm	(0X102728,	"threadIdMaxCount");
	MakeComm	(0X10272C,	"domain");
	MakeCode	(x=0X102740);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102750);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10275C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102774);
	OpStkvar	(x,	1);
	MakeComm	(0X102778,	"context_struc");
	MakeComm	(0X10277C,	"hProcess");
	MakeComm	(0X102780,	"tid");
	MakeCode	(x=0X102788);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10278C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102794);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102798);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1027A8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1027B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1027D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1027F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1027F8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102818);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102824);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102844);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102860);
	OpStkvar	(x,	1);
	MakeCode	(0X102884);
	MakeDword	(x=0X102894);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102898);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10289C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1028A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1028A4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1028A4,	"handle_listthread_packet");
	MakeCode	(x=0X1028BC);
	OpStkvar	(x,	1);
	MakeComm	(0X1028C0,	"processId");
	MakeComm	(0X1028C4,	"process");
	MakeCode	(x=0X1028D4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1028E4);
	OpStkvar	(x,	1);
	MakeComm	(0X1028EC,	"threadIds");
	MakeCode	(0X1028EC);
	MakeComm	(0X1028F0,	"threadCount");
	MakeComm	(0X1028F4,	"threadIdMaxCount");
	MakeComm	(0X1028F8,	"domain");
	MakeCode	(x=0X1028F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102908);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102910);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X10291C);
	MakeCode	(x=0X102920);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102934);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10293C,	"handle");
	MakeCode	(x=0X102948);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102958);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102974,	"tid");
	MakeComm	(0X102978,	"context_struc");
	MakeComm	(0X10297C,	"hProcess");
	MakeCode	(x=0X10297C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102984);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102988);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10298C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10299C);
	OpStkvar	(x,	1);
	MakeComm	(0X1029A4,	"handle");
	MakeCode	(x=0X1029A4);
	OpStkvar	(x,	1);
	MakeDword	(x=0X1029C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1029C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1029C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1029CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1029D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1029D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1029D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1029DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1029DC,	"inject_ntr_into_remote_process");
	MakeCode	(x=0X1029EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102A00);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102A18);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X102A24);
	MakeComm	(0X102A28,	"addr");
	MakeCode	(x=0X102A28);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102A2C,	"handle");
	MakeComm	(0X102A30,	"size");
	MakeCode	(x=0X102A40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102A4C,	"size");
	MakeComm	(0X102A50,	"hKProcess");
	MakeComm	(0X102A54,	"addr");
	MakeCode	(x=0X102A54);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102A60);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102A68);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102A6C,	"size");
	MakeCode	(x=0X102A6C);
	OpStkvar	(x,	1);
	MakeComm	(0X102A70,	"hDst");
	MakeComm	(0X102A74,	"hSrc");
	MakeComm	(0X102A78,	"dst_addr");
	MakeComm	(0X102A7C,	"src_addr");
	MakeComm	(0X102A80,	"inject code into foreign process at addr 0x06005000");
	MakeCode	(x=0X102A88);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102AA4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102ABC,	"hProcess");
	MakeComm	(0X102AC0,	"addr");
	MakeComm	(0X102AC4,	"size");
	MakeCode	(x=0X102AD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102AD8,	"dst addr");
	MakeComm	(0X102AE8,	"hDst");
	MakeComm	(0X102AEC,	"size");
	MakeCode	(x=0X102AEC);
	OpStkvar	(x,	1);
	MakeComm	(0X102AF0,	"hSrc");
	MakeComm	(0X102AF4,	"src_addr");
	MakeComm	(0X102AF8,	"back up two instructions at current PC");
	MakeCode	(x=0X102B00);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102B0C,	"size");
	MakeCode	(x=0X102B0C);
	OpStkvar	(x,	1);
	MakeComm	(0X102B10,	"save backed up PC at offs 0x28");
	MakeComm	(0X102B14,	"hDst");
	MakeComm	(0X102B18,	"dst_addr");
	MakeCode	(x=0X102B18);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102B1C,	"hSrc");
	MakeComm	(0X102B20,	"src_addr");
	MakeComm	(0X102B24,	"transfer backed up code and configuration to remote process\nat addr 0x06000000");
	MakeCode	(x=0X102B2C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102B38,	"size");
	MakeCode	(x=0X102B38);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102B3C);
	OpStkvar	(x,	1);
	MakeComm	(0X102B44,	"hDst");
	MakeCode	(x=0X102B48);
	OpStkvar	(x,	1);
	MakeComm	(0X102B4C,	"dst_addr");
	MakeComm	(0X102B50,	"hSrc");
	MakeComm	(0X102B54,	"src_addr");
	MakeCode	(x=0X102B54);
	OpStkvar	(x,	1);
	MakeComm	(0X102B58,	"patch code at current PC to redirect code flow to addr 0x06005000");
	MakeCode	(x=0X102B64);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X102B80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102B84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102B88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102B8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102B90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102B94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102B98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102B9C);
	MakeName	(0X102B9C,	"dst_addr");
	MakeDword	(x=0X102BA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102BA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102BA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102BAC);
	MakeDword	(x=0X102BB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102BB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102BB8);
	MakeDword	(x=0X102BBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X102BC0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X102BC0,	"handle_attachprocess_packet");
	MakeCode	(x=0X102BDC);
	OpStkvar	(x,	1);
	MakeComm	(0X102BF8,	"processId");
	MakeComm	(0X102BFC,	"process");
	MakeCode	(x=0X102BFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102C00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102C10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102C20);
	OpStkvar	(x,	1);
	MakeComm	(0X102C28,	"addr_jmpcode");
	MakeCode	(0X102C28);
	MakeComm	(0X102C2C,	"handle");
	MakeCode	(x=0X102C2C);
	OpStkvar	(x,	1);
	MakeComm	(0X102C30,	"buf");
	MakeCode	(x=0X102C30);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102C3C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102C48,	"handle");
	MakeCode	(x=0X102C48);
	OpStkvar	(x,	1);
	MakeDword	(x=0X102C60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102C64);
	MakeDword	(x=0X102C68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102C6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X102C70);
	MakeName	(0X102C70,	"send_proc_context_to_client");
	MakeCode	(x=0X102C7C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102C8C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102CA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102CB8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X102CC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102CC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102CCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102CD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X102CD4);
	MakeName	(0X102CD4,	"check_for_bp_hit");
	MakeCode	(x=0X102CD8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102CE4,	"lock");
	MakeCode	(x=0X102CF0);
	OpStkvar	(x,	1);
	MakeComm	(0X102D10,	"lock");
	MakeCode	(x=0X102D18);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102D24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102D48);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102D4C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102D54);
	OpStkvar	(x,	1);
	MakeDword	(x=0X102D74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102D78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X102D7C);
	MakeName	(0X102D7C,	"dispatch_client_cmd");
	MakeCode	(x=0X102D80);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	ExtLinA		(0X102DA0,	0,	"handle_hello_packet:");
	MakeCode	(x=0X102DA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X102DAC);
	ExtLinA		(0X102DB4,	0,	"handle_heartbeat_packet:");
	MakeCode	(x=0X102DB4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102DBC,	"lock");
	MakeCode	(x=0X102DC8);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X102DE4);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeComm	(0X102DF4,	"lock");
	MakeCode	(x=0X102DF4);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(0X102E04);
	MakeCode	(0X102E14);
	MakeCode	(0X102E24);
	MakeCode	(0X102E34);
	MakeCode	(0X102E44);
	MakeCode	(0X102E54);
	MakeCode	(0X102E64);
	MakeCode	(0X102E74);
	MakeCode	(0X102E84);
	MakeCode	(0X102E94);
	MakeDword	(x=0X102EA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102EA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102EAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X102EB0);
	MakeName	(0X102EB0,	"handle_network_client");
	MakeComm	(0X102EB8,	"domain");
	MakeComm	(0X102EBC,	"type");
	MakeComm	(0X102EC0,	"protocol");
	MakeComm	(0X102ED0,	"nanoseconds");
	MakeCode	(x=0X102EE0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X102EE8);
	OpStkvar	(x,	1);
	MakeComm	(0X102F00,	"addr");
	MakeComm	(0X102F04,	"addrlen");
	MakeCode	(x=0X102F08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X102F0C);
	OpStkvar	(x,	1);
	MakeComm	(0X102F10,	"sockfd");
	MakeCode	(x=0X102F1C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102F24,	"max_connections");
	MakeComm	(0X102F28,	"sockfd");
	MakeComm	(0X102F38,	"magic");
	MakeCode	(x=0X102F40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X102F54);
	MakeCode	(x=0X102F80);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X102F8C,	"sockfd");
	MakeComm	(0X102F98,	"addr");
	MakeComm	(0X102F9C,	"sockfd");
	MakeComm	(0X102FA0,	"addrlen");
	MakeComm	(0X102FBC,	"nanoseconds");
	MakeCode	(0X102FCC);
	MakeCode	(x=0X102FE0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(0X102FEC);
	MakeName	(0X102FEC,	"p_some_code");
	MakeDword	(x=0X102FF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X102FF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X102FF8);
	MakeDword	(x=0X102FFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103000);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103004);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103008);
	MakeName	(0X103008,	"thread_handle_network_client");
	MakeCode	(0X103018);
	MakeName	(0X103018,	"init_config_mem");
	MakeCode	(x=0X10301C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103020);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103024);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103030,	"lock");
	MakeCode	(x=0X103030);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeRptCmt	(0X103040,	"offset 0xC = 0x6000900");
	MakeComm	(0X103048,	"offs 0x10 = 0xF0");
	MakeDword	(x=0X103060);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103064);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103068);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X10306C);
	MakeComm	(0X103070,	"operation");
	MakeCode	(0X103070);
	MakeName	(0X103070,	"setup_ntr_network_server");
	MakeComm	(0X103074,	"size");
	MakeCode	(x=0X10307C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103084);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X103090);
	OpStkvar	(x,	1);
	MakeComm	(0X1030A4,	"addr0");
	MakeComm	(0X1030AC,	"addr1");
	MakeComm	(0X1030B0,	"outaddr");
	MakeCode	(x=0X1030B0);
	OpStkvar	(x,	1);
	MakeComm	(0X1030B4,	"size");
	MakeCode	(x=0X1030C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1030CC,	"addr");
	MakeComm	(0X1030D0,	"size");
	MakeCode	(x=0X1030E0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1030EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103104);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X10310C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103118,	"context_size");
	MakeComm	(0X10311C,	"context_addr");
	MakeCode	(x=0X10311C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10312C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103134);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103138);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103148);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10314C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103174);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeComm	(0X10318C,	"*r6 = pid + 0x1388");
	MakeComm	(0X103198,	"lock");
	MakeComm	(0X1031A8,	"lock");
	MakeCode	(x=0X1031BC);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1031C4);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1031CC);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeComm	(0X103204,	"size");
	MakeCode	(0X103204);
	MakeCode	(x=0X103208);
	OpStkvar	(x,	1);
	MakeComm	(0X103220,	"entrypoint");
	MakeCode	(x=0X103220);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103224,	"arg");
	MakeComm	(0X103230,	"stacktop");
	MakeComm	(0X103234,	"thread");
	MakeCode	(x=0X103234);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103244);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(0X103258);
	MakeDword	(x=0X10325C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X103260);
	MakeDword	(x=0X103264);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103268);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10326C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103270);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103274);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103278);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10327C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103280);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103284);
	MakeName	(0X103284,	"osConvertVaddr2Physaddr");
	MakeCode	(0X103298);
	MakeCode	(0X1032AC);
	MakeCode	(0X1032C0);
	MakeComm	(0X1032C4,	"processId");
	MakeComm	(0X1032C8,	"process");
	MakeCode	(x=0X1032C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1032D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1032DC);
	OpStkvar	(x,	1);
	MakeCode	(0X1032E0);
	MakeName	(0X1032E0,	"plgRegisterCallback");
	MakeCode	(x=0X1032E8);
	OpHex		(x,	1);
	MakeName	(0X1032E8,	"plgRequestMemory");
	MakeComm	(0X1032EC,	"operation");
	MakeCode	(x=0X1032FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103304,	"outaddr");
	MakeCode	(x=0X103304);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10330C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103314);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10332C,	"addr0");
	MakeComm	(0X103334,	"addr1");
	MakeComm	(0X103338,	"size");
	MakeDword	(x=0X103360);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103364);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X103368);
	MakeCode	(0X10336C);
	MakeName	(0X10336C,	"plgGetSharedServiceHandle");
	MakeCode	(x=0X103374);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103384);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X103394);
	MakeDword	(x=0X103398);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10339C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1033A0);
	MakeName	(0X1033A0,	"plgGetIoBase");
	MakeCode	(x=0X1033A4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1033B4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1033C0);
	MakeCode	(x=0X1033C4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X1033E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1033E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1033E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1033EC);
	MakeCode	(0X1033F0);
	MakeName	(0X1033F0,	"display_OSD_menu");
	MakeCode	(x=0X1033FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103400);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103404);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103408);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103410);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103414);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10341C);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X10343C);
	OpStkvar	(x,	1);
	MakeCode	(0X10345C);
	MakeCode	(x=0X103460);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X103484);
	MakeCode	(0X103494);
	MakeCode	(x=0X10349C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1034AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1034B8,	"call plugin?");
	MakeDword	(x=0X1034C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1034CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1034D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1034D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1034D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1034DC);
	MakeName	(0X1034DC,	"plgRegisterMenuEntry");
	MakeCode	(x=0X1034E0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1034E4);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(0X1034F8);
	MakeCode	(x=0X1034FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103510);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeDword	(x=0X10351C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103520);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X103524,	"operation");
	MakeCode	(0X103524);
	MakeName	(0X103524,	"alloc_plugin_memory");
	MakeCode	(x=0X103528);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10352C);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X103534);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103538);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeCode	(x=0X10353C);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X103540);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X10355C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10356C,	"outaddr");
	MakeCode	(x=0X10356C);
	OpStkvar	(x,	1);
	MakeComm	(0X103574,	"addr0");
	MakeComm	(0X103578,	"addr1");
	MakeComm	(0X10357C,	"size");
	MakeComm	(0X10358C,	"hProcess");
	MakeComm	(0X103590,	"addr");
	MakeComm	(0X103594,	"size");
	MakeCode	(x=0X1035A4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1035B8);
	MakeDword	(x=0X1035C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1035CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1035D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1035D4);
	MakeDword	(0X1035D8);
	MakeDword	(x=0X1035DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1035E0);
	MakeName	(0X1035E0,	"get_fs_user_handle_0");
	MakeCode	(x=0X1035E4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1035F4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103608,	"out");
	MakeCode	(x=0X103608);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10360C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103610,	"handleptr");
	MakeComm	(0X103618,	"handle");
	MakeCode	(x=0X103628);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103634);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X103640);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X103640,	"out");
	MakeDword	(x=0X103644);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103648);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10364C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103650);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103654);
	MakeName	(0X103654,	"inject_into_nintendo_home");
	MakeCode	(x=0X10365C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103668);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeComm	(0X103678,	"process");
	MakeComm	(0X10367C,	"pid 15 = \"menu\" process?");
	MakeCode	(x=0X103688);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X10368C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103694);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10369C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1036AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1036B4);
	OpStkvar	(x,	1);
	MakeComm	(0X1036BC,	"size");
	MakeCode	(x=0X1036BC);
	OpStkvar	(x,	1);
	MakeComm	(0X1036C0,	"hDst");
	MakeComm	(0X1036C4,	"dst_addr");
	MakeComm	(0X1036C8,	"hSrc");
	MakeComm	(0X1036CC,	"src_addr");
	MakeCode	(x=0X1036CC);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeCode	(x=0X1036D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1036E0,	"buf");
	MakeComm	(0X1036E4,	"handle");
	MakeCode	(x=0X1036EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1036F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1036F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1036FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103700);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10370C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103710);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10371C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103728);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103734);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103738);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103740);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103754);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeCode	(x=0X103760);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103764);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeComm	(0X10376C,	"size");
	MakeCode	(x=0X103774);
	OpStkvar	(x,	1);
	MakeCode	(0X10378C);
	MakeCode	(0X10379C);
	MakeComm	(0X1037C4,	"handle");
	MakeCode	(0X1037C4);
	MakeComm	(0X1037C8,	"addr");
	MakeCode	(x=0X1037C8);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeComm	(0X1037CC,	"size");
	MakeCode	(x=0X1037D4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1037DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1037E4,	"hProcess");
	MakeComm	(0X1037E8,	"addr");
	MakeCode	(x=0X1037E8);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeComm	(0X1037EC,	"size");
	MakeCode	(x=0X1037F8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103804,	"size");
	MakeCode	(x=0X103804);
	OpStkvar	(x,	1);
	MakeComm	(0X103808,	"hDst");
	MakeComm	(0X10380C,	"dst_addr");
	MakeCode	(x=0X10380C);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeComm	(0X103810,	"hSrc");
	MakeComm	(0X103814,	"src_addr");
	MakeCode	(x=0X103820);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10382C);
	OpStkvar	(x,	1);
	MakeComm	(0X103840,	"hDst");
	MakeComm	(0X103848,	"size");
	MakeCode	(x=0X103848);
	OpStkvar	(x,	1);
	MakeComm	(0X10384C,	"dst_addr");
	MakeComm	(0X103850,	"src_addr");
	MakeComm	(0X103854,	"hSrc");
	MakeCode	(x=0X103868);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103870,	"handle");
	MakeCode	(0X103870);
	MakeComm	(0X103874,	"addr_jmpcode");
	MakeComm	(0X103878,	"buf");
	MakeCode	(x=0X103878);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103888);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X103898);
	MakeCode	(0X1038A0);
	MakeDword	(x=0X1038B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1038C0);
	MakeDword	(x=0X1038C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1038D0);
	MakeDword	(x=0X1038D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1038E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1038E8);
	MakeName	(0X1038E8,	"callback_inject_into_nintendo_home");
	MakeCode	(x=0X103900);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X10390C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103910);
	MakeCode	(x=0X103920);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103924);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10392C);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X103938);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X10393C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103948);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10395C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X103968);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10396C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103970);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X103974);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X103974,	"install_home_injection_hook");
	MakeCode	(x=0X10397C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103980,	"funcaddr");
	MakeComm	(0X103984,	"hook");
	MakeComm	(0X103988,	"callback_addr");
	MakeCode	(x=0X103988);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103990,	"rthook");
	MakeDword	(x=0X10399C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1039A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1039A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1039A8);
	MakeName	(0X1039A8,	"find_files?");
	MakeComm	(0X1039B0,	"archive");
	MakeComm	(0X1039BC,	"a1");
	MakeCode	(x=0X1039C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1039D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1039D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1039D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1039DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1039E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1039FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103A04,	"handle");
	MakeComm	(0X103A08,	"out");
	MakeCode	(x=0X103A08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103A24);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X103A34);
	MakeComm	(0X103A60,	"buffer");
	MakeComm	(0X103A64,	"handle");
	MakeCode	(x=0X103A64);
	OpStkvar	(x,	1);
	MakeComm	(0X103A68,	"entriesRead");
	MakeCode	(x=0X103A68);
	OpStkvar	(x,	1);
	MakeComm	(0X103A6C,	"entrycount");
	MakeCode	(x=0X103A70);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103A78);
	OpStkvar	(x,	1);
	MakeComm	(0X103A90,	"handle");
	MakeCode	(x=0X103A90);
	OpStkvar	(x,	1);
	MakeDword	(x=0X103AA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103AAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103AB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X103AB4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X103AB4,	"update_plginfo_with_arm11_addresses");
	MakeCode	(x=0X103AC0);
	OpHex		(x,	1);
	MakeCode	(x=0X103AC4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103ACC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103AD4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103AD8);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X103ADC);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeDword	(x=0X103AEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103AF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103AF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103AF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103AFC);
	MakeCode	(0X103B00);
	MakeName	(0X103B00,	"load_ntr_plugins");
	MakeCode	(x=0X103B10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103B14);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103B20);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103B24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103B2C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103B40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103B44);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103B4C);
	OpStkvar	(x,	1);
	MakeComm	(0X103B54,	"fileName");
	MakeCode	(x=0X103B54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103B60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103B70);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103B88);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103B90,	"fileName");
	MakeCode	(x=0X103B90);
	OpStkvar	(x,	1);
	MakeComm	(0X103B94,	"pBuf");
	MakeComm	(0X103B98,	"bufSize");
	MakeCode	(x=0X103BA8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103BB4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X103BE8);
	MakeDword	(x=0X103BF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103BFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103C00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103C04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103C08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103C0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103C10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103C14);
	MakeName	(0X103C14,	"callback_applet_start");
	MakeCode	(x=0X103C30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103C3C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103C50);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103C60);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103C84);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X103C94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103C98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103C9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103CA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103CA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X103CA8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X103CA8,	"inject_ntr_into_process_manager");
	MakeCode	(x=0X103CBC);
	OpStkvar	(x,	1);
	MakeComm	(0X103CCC,	"pid 2");
	MakeComm	(0X103CD0,	"process");
	MakeCode	(x=0X103CD0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103CD4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103CE4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103CF4);
	OpStkvar	(x,	1);
	MakeComm	(0X103CFC,	"handle");
	MakeCode	(x=0X103CFC);
	OpStkvar	(x,	1);
	MakeComm	(0X103D00,	"addr_jmpcode");
	MakeComm	(0X103D04,	"buf");
	MakeCode	(x=0X103D04);
	OpStkvar	(x,	1);
	MakeComm	(0X103D0C,	"handle");
	MakeCode	(x=0X103D0C);
	OpStkvar	(x,	1);
	MakeDword	(x=0X103D24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103D28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103D2C);
	MakeName	(0X103D2C,	"init_all_plugins_0");
	MakeCode	(x=0X103D30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103D34);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103D48,	"addr");
	MakeComm	(0X103D4C,	"size");
	MakeCode	(x=0X103D5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103D64);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X103D70);
	MakeCode	(x=0X103D88);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X103DAC);
	MakeDword	(x=0X103DB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103DB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103DB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103DBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103DC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103DC4);
	MakeName	(0X103DC4,	"load_all_plugins_and_inject_ntr_into_pm");
	MakeCode	(x=0X103DC8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103DCC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103DD0);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeCode	(x=0X103DF4);
	OpOff		(x,	1,	0X10AFC0);
	OpOff		(x,	129,	0X10AFC0);
	MakeCode	(x=0X103DF8);
	OpOff		(x,	1,	0X10AFC0);
	OpOff		(x,	129,	0X10AFC0);
	MakeCode	(x=0X103DFC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103E00,	"archive");
	MakeCode	(x=0X103E04);
	OpOff		(x,	1,	0X10AFC0);
	OpOff		(x,	129,	0X10AFC0);
	MakeCode	(x=0X103E08);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103E0C,	"handle");
	MakeCode	(x=0X103E1C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103E28);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103E2C,	"size");
	MakeCode	(x=0X103E30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103E40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103E50);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X103E54);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103E5C);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X103E70);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103E7C,	"pBuf");
	MakeComm	(0X103E80,	"arm11 binsize");
	MakeCode	(x=0X103E88);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103E94);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103EA0);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X103EA4);
	OpOff		(x,	1,	0X10AB04);
	OpOff		(x,	129,	0X10AB04);
	MakeCode	(x=0X103EB8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103ED4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103EE0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103EF0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103EF4,	"hook");
	MakeCode	(x=0X103EF4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103EF8,	"callback_addr");
	MakeCode	(x=0X103EF8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103EFC,	"funcaddr");
	MakeComm	(0X103F04,	"rthook");
	MakeCode	(x=0X103F04);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X103F14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X103F30,	"fileName");
	MakeDword	(x=0X103F34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103F54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103F58);
	MakeName	(0X103F58,	"init_all_plugins");
	MakeCode	(x=0X103F60);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103F64);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103F6C);
	OpOff		(x,	1,	0X108358);
	OpOff		(x,	129,	0X108358);
	MakeCode	(x=0X103F7C);
	OpStroffEx	(x,	1,	GetStrucIdByName("PLGLOADER_INFO"),	0);
	MakeCode	(x=0X103F90);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103F94);
	OpStroffEx	(x,	1,	GetStrucIdByName("PLGLOADER_INFO"),	0);
	MakeCode	(x=0X103FA8);
	OpStroffEx	(x,	1,	GetStrucIdByName("PLGLOADER_INFO"),	0);
	MakeCode	(0X103FB4);
	MakeDword	(x=0X103FB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103FBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X103FC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X103FC4);
	MakeCode	(0X103FC8);
	MakeName	(0X103FC8,	"ntrGetCurrentProcessId");
	MakeCode	(x=0X103FCC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X103FD0,	"handle");
	MakeComm	(0X103FD4,	"out");
	MakeDword	(x=0X103FE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X103FE8);
	MakeName	(0X103FE8,	"handle");
	MakeCode	(0X103FEC);
	MakeName	(0X103FEC,	"ntrGetCurrentProcessHandle");
	MakeCode	(x=0X103FF4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X103FF8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103FFC);
	OpOff		(x,	1,	0X10B0AC);
	OpOff		(x,	129,	0X10B0AC);
	MakeComm	(0X104008,	"handle");
	MakeComm	(0X10400C,	"out");
	MakeComm	(0X104014,	"processId");
	MakeComm	(0X104018,	"process");
	MakeCode	(x=0X104018);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104024);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104028);
	OpOff		(x,	1,	0X10B0AC);
	OpOff		(x,	129,	0X10B0AC);
	MakeCode	(x=0X104030);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X104048);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X10404C);
	MakeDword	(x=0X104050);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X104054);
	MakeCode	(0X104058);
	MakeName	(0X104058,	"controlRemoteMemory");
	MakeComm	(0X10405C,	"operation");
	MakeCode	(x=0X104060);
	OpStkvar	(x,	1);
	MakeComm	(0X104094,	"outaddr");
	MakeComm	(0X10409C,	"addr0");
	MakeComm	(0X1040A0,	"addr1");
	MakeComm	(0X1040A4,	"size");
	MakeCode	(x=0X1040BC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1040CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1040D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(0X1040F0);
	MakeDword	(x=0X1040F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1040F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X1040FC,	"Type");
	MakeCode	(0X1040FC);
	MakeName	(0X1040FC,	"ntrProtectRemoteMemory");
	MakeComm	(0X104100,	"Size");
	MakeComm	(0X104104,	"permissions");
	MakeComm	(0X104108,	"type");
	MakeComm	(0X104110,	"Addr1");
	MakeCode	(x=0X10411C);
	OpStkvar	(x,	1);
	MakeCode	(0X104120);
	MakeName	(0X104120,	"ntrProtectMemory");
	MakeComm	(0X104130,	"addr");
	MakeComm	(0X104134,	"size");
	MakeCode	(0X104140);
	MakeName	(0X104140,	"inter_process_dma_copy");
	MakeCode	(x=0X104148);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10414C);
	OpStkvar	(x,	1);
	MakeComm	(0X104174,	"process");
	MakeComm	(0X104178,	"addr");
	MakeComm	(0X10417C,	"size");
	MakeCode	(x=0X104180);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10418C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104194,	"process");
	MakeComm	(0X104198,	"addr");
	MakeComm	(0X10419C,	"size");
	MakeCode	(x=0X1041AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1041BC,	"src");
	MakeCode	(x=0X1041BC);
	OpStkvar	(x,	1);
	MakeComm	(0X1041C4,	"hdma");
	MakeCode	(x=0X1041C4);
	OpStkvar	(x,	1);
	MakeComm	(0X1041C8,	"hdstProcess");
	MakeComm	(0X1041CC,	"dst");
	MakeComm	(0X1041D0,	"hsrcProcess");
	MakeComm	(0X1041F0,	"state");
	MakeCode	(x=0X1041F0);
	OpStkvar	(x,	1);
	MakeComm	(0X1041F4,	"dma");
	MakeCode	(x=0X1041F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1041F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104200);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10422C);
	OpHex		(x,	1);
	MakeComm	(0X104238,	"nanoseconds");
	MakeCode	(x=0X10424C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104250);
	OpStkvar	(x,	1);
	MakeComm	(0X104264,	"handle");
	MakeCode	(x=0X104264);
	OpStkvar	(x,	1);
	MakeComm	(0X10426C,	"process");
	MakeComm	(0X104270,	"addr");
	MakeComm	(0X104274,	"size");
	MakeDword	(x=0X104284);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104288);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X10428C);
	MakeDword	(0X104290);
	MakeDword	(0X104294);
	MakeDword	(0X104298);
	MakeDword	(0X10429C);
	MakeDword	(x=0X1042A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1042A4);
	MakeComm	(0X1042B4,	"count");
	MakeComm	(0X1042B8,	"src");
	MakeComm	(0X1042BC,	"dst");
	MakeCode	(x=0X1042C4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1042C8,	"dst");
	MakeCode	(x=0X1042C8);
	OpStkvar	(x,	1);
	MakeComm	(0X1042CC,	"count");
	MakeComm	(0X1042D4,	"src");
	MakeCode	(x=0X1042DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1042E4);
	OpStkvar	(x,	1);
	MakeDword	(x=0X1042F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1042F8);
	MakeName	(0X1042F8,	"get_process_name");
	MakeComm	(0X104308,	"process");
	MakeCode	(x=0X104308);
	OpStkvar	(x,	1);
	MakeComm	(0X10430C,	"processId");
	MakeCode	(x=0X104324);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104338,	"handle");
	MakeCode	(x=0X104338);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104340);
	OpStkvar	(x,	1);
	MakeComm	(0X104344,	"count");
	MakeComm	(0X10434C,	"src");
	MakeComm	(0X104350,	"dst");
	MakeCode	(x=0X104358);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10435C,	"dst");
	MakeCode	(x=0X10435C);
	OpStkvar	(x,	1);
	MakeComm	(0X104360,	"count");
	MakeComm	(0X104368,	"src");
	MakeCode	(x=0X104370);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10437C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104380);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104388);
	OpStkvar	(x,	1);
	MakeComm	(0X104394,	"handle");
	MakeCode	(x=0X104394);
	OpStkvar	(x,	1);
	MakeDword	(x=0X1043B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1043B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1043B8);
	MakeName	(0X1043B8,	"dumpProcessToFile");
	MakeComm	(0X1043C0,	"archive");
	MakeComm	(0X1043CC,	"a1");
	MakeCode	(x=0X1043D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1043DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1043E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1043E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1043E8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1043F4);
	OpStkvar	(x,	1);
	MakeComm	(0X104404,	"openflags");
	MakeCode	(x=0X104404);
	OpStkvar	(x,	1);
	MakeComm	(0X10440C,	"attributes");
	MakeCode	(x=0X10440C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104418);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104420,	"handle");
	MakeComm	(0X104424,	"out");
	MakeCode	(x=0X104424);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104430);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104440,	"processId");
	MakeComm	(0X104444,	"process");
	MakeCode	(x=0X104444);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104454);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10445C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104464);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10446C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104494,	"hKProcess");
	MakeCode	(x=0X104494);
	OpStkvar	(x,	1);
	MakeComm	(0X104498,	"addr");
	MakeComm	(0X10449C,	"size");
	MakeCode	(x=0X1044B0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1044C0,	"handle");
	MakeCode	(x=0X1044C0);
	OpStkvar	(x,	1);
	MakeCode	(0X1044D4);
	MakeComm	(0X1044D8,	"size");
	MakeCode	(x=0X1044D8);
	OpStkvar	(x,	1);
	MakeComm	(0X1044DC,	"dst_addr");
	MakeComm	(0X1044E0,	"hDst");
	MakeComm	(0X1044E4,	"hSrc");
	MakeCode	(x=0X1044E4);
	OpStkvar	(x,	1);
	MakeComm	(0X1044E8,	"src_addr");
	MakeCode	(x=0X1044F8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10450C,	"size");
	MakeCode	(x=0X10450C);
	OpStkvar	(x,	1);
	MakeComm	(0X104514,	"handle");
	MakeCode	(x=0X104514);
	OpStkvar	(x,	1);
	MakeComm	(0X104518,	"bytesWritten");
	MakeComm	(0X10451C,	"offset");
	MakeComm	(0X104520,	"buffer");
	MakeComm	(0X104530,	"handle");
	MakeCode	(x=0X104530);
	OpStkvar	(x,	1);
	MakeDword	(x=0X10454C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104550);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104554);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104558);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10455C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X104560);
	MakeDword	(x=0X104564);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X104568);
	MakeDword	(x=0X10456C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X104570);
	MakeComm	(0X104574,	"fileLowPath");
	MakeComm	(0X104578,	"archive");
	MakeComm	(0X104588,	"string");
	MakeCode	(x=0X104590);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104594);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104598);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1045A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1045A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1045A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1045AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1045B4);
	OpStkvar	(x,	1);
	MakeComm	(0X1045C4,	"openflags");
	MakeCode	(x=0X1045C4);
	OpStkvar	(x,	1);
	MakeComm	(0X1045CC,	"attributes");
	MakeCode	(x=0X1045CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1045D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1045E0,	"handle");
	MakeComm	(0X1045E4,	"out");
	MakeCode	(x=0X1045E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1045F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104600);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104604);
	OpStkvar	(x,	1);
	MakeComm	(0X104610,	"debug");
	MakeCode	(x=0X104610);
	OpStkvar	(x,	1);
	MakeComm	(0X104614,	"processID");
	MakeCode	(x=0X104620);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104630);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104634);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104640);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104644);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104654);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104660,	"x");
	MakeComm	(0X104668,	"y");
	MakeComm	(0X10466C,	"g");
	MakeCode	(x=0X10466C);
	OpStkvar	(x,	1);
	MakeComm	(0X104670,	"b");
	MakeCode	(x=0X104670);
	OpStkvar	(x,	1);
	MakeComm	(0X104674,	"s");
	MakeComm	(0X104678,	"r");
	MakeComm	(0X104684,	"addr");
	MakeComm	(0X104688,	"buffer");
	MakeComm	(0X10468C,	"debug");
	MakeCode	(x=0X10468C);
	OpStkvar	(x,	1);
	MakeComm	(0X104690,	"size");
	MakeCode	(x=0X1046A0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1046AC,	"handle");
	MakeCode	(x=0X1046AC);
	OpStkvar	(x,	1);
	MakeCode	(0X1046C0);
	MakeComm	(0X1046C4,	"flushFlags");
	MakeCode	(x=0X1046C4);
	OpStkvar	(x,	1);
	MakeComm	(0X1046C8,	"flushFlags");
	MakeCode	(x=0X1046C8);
	OpStkvar	(x,	1);
	MakeComm	(0X1046CC,	"size");
	MakeCode	(x=0X1046CC);
	OpStkvar	(x,	1);
	MakeComm	(0X1046D0,	"offset");
	MakeComm	(0X1046D4,	"handle");
	MakeCode	(x=0X1046D4);
	OpStkvar	(x,	1);
	MakeComm	(0X1046D8,	"bytesWritten");
	MakeComm	(0X1046DC,	"buffer");
	MakeComm	(0X1046EC,	"handle");
	MakeCode	(x=0X1046EC);
	OpStkvar	(x,	1);
	MakeDword	(x=0X104708);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10470C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104710);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104714);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104718);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10471C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104720);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104724);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X104728);
	MakeName	(0X104728,	"dumpMemoryToFile");
	MakeComm	(0X10472C,	"flushFlags");
	MakeComm	(0X104730,	"archive");
	MakeCode	(x=0X104734);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104744);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10475C,	"a1");
	MakeCode	(x=0X104774);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104780);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104788);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104794,	"openflags");
	MakeCode	(x=0X104794);
	OpStkvar	(x,	1);
	MakeComm	(0X10479C,	"attributes");
	MakeCode	(x=0X10479C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1047A8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1047B0,	"handle");
	MakeComm	(0X1047B4,	"out");
	MakeCode	(x=0X1047B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1047BC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1047CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1047D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1047E4,	"dst");
	MakeCode	(0X1047E4);
	MakeComm	(0X1047E8,	"src");
	MakeComm	(0X1047EC,	"count");
	MakeComm	(0X1047FC,	"size");
	MakeCode	(x=0X1047FC);
	OpStkvar	(x,	1);
	MakeComm	(0X104804,	"bytesWritten");
	MakeCode	(x=0X104804);
	OpStkvar	(x,	1);
	MakeComm	(0X104808,	"offset");
	MakeComm	(0X10480C,	"handle");
	MakeComm	(0X104810,	"buffer");
	MakeCode	(x=0X10482C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X104860);
	MakeDword	(x=0X10486C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104870);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104874);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104878);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10487C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X104880);
	MakeDword	(x=0X104884);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104888);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X10488C);
	MakeName	(0X10488C,	"inject_code");
	MakeCode	(x=0X104898);
	OpStkvar	(x,	1);
	MakeComm	(0X1048AC,	"processId");
	MakeComm	(0X1048C0,	"hProcess");
	MakeCode	(x=0X1048C0);
	OpStkvar	(x,	1);
	MakeComm	(0X1048C4,	"addr");
	MakeComm	(0X1048C8,	"size");
	MakeComm	(0X1048D8,	"size");
	MakeCode	(x=0X1048D8);
	OpStkvar	(x,	1);
	MakeComm	(0X1048DC,	"hDst");
	MakeCode	(x=0X1048DC);
	OpStkvar	(x,	1);
	MakeComm	(0X1048E0,	"dst_addr");
	MakeComm	(0X1048E4,	"hSrc");
	MakeComm	(0X1048E8,	"src_addr");
	MakeComm	(0X1048F4,	"handle");
	MakeCode	(x=0X1048F4);
	OpStkvar	(x,	1);
	MakeDword	(0X104910);
	MakeCode	(0X104914);
	MakeName	(0X104914,	"patch_sm");
	MakeCode	(x=0X10491C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104924);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104944);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104954);
	OpStkvar	(x,	1);
	MakeDword	(0X104958);
	MakeDword	(0X10495C);
	MakeDword	(x=0X104960);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104964);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X104968);
	MakeName	(0X104968,	"ntr_cmd_process");
	MakeCode	(x=0X104974);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104978);
	OpStkvar	(x,	1);
	MakeComm	(0X104980,	"processIds");
	MakeComm	(0X104984,	"processCount");
	MakeComm	(0X104988,	"processIdMaxCount");
	MakeCode	(x=0X10498C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10499C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1049A8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1049B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1049BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1049CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1049D0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1049D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1049E0);
	OpStkvar	(x,	1);
	MakeComm	(0X1049EC,	"a1");
	MakeCode	(x=0X1049EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104A04);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104A08);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104A0C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104A24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104A50);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104A54);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104A60,	"pid");
	MakeComm	(0X104A64,	"filename");
	MakeCode	(x=0X104A64);
	OpStkvar	(x,	1);
	MakeCode	(0X104A70);
	MakeCode	(x=0X104A7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104A80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104A8C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104A94);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104A98);
	OpStkvar	(x,	1);
	MakeCode	(0X104AA8);
	MakeDword	(x=0X104AB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104AB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104ABC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104AC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104AC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104AC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X104ACC);
	MakeName	(0X104ACC,	"rtInitLock");
	MakeCode	(0X104AD8);
	MakeName	(0X104AD8,	"rtAcquireLock");
	MakeComm	(0X104AEC,	"nanoseconds");
	MakeCode	(0X104AFC);
	MakeDword	(0X104B08);
	MakeCode	(0X104B0C);
	MakeName	(0X104B0C,	"rtReleaseLock");
	MakeCode	(0X104B18);
	MakeName	(0X104B18,	"rtAlignToPageSize");
	MakeCode	(x=0X104B20);
	OpHex		(x,	1);
	MakeCode	(x=0X104B24);
	OpHex		(x,	1);
	MakeCode	(x=0X104B30);
	OpHex		(x,	1);
	MakeName	(0X104B30,	"rtGetPageOfAddress");
	MakeCode	(x=0X104B34);
	OpHex		(x,	1);
	MakeCode	(0X104B3C);
	MakeName	(0X104B3C,	"rtCheckRemoteMemoryRegionSafeForWrite");
	MakeCode	(x=0X104B48);
	OpHex		(x,	1);
	MakeCode	(x=0X104B4C);
	OpHex		(x,	1);
	MakeCode	(x=0X104B54);
	OpHex		(x,	1);
	MakeCode	(x=0X104B58);
	OpHex		(x,	1);
	MakeComm	(0X104B64,	"hKProcess");
	MakeComm	(0X104B68,	"addr");
	MakeComm	(0X104B6C,	"size");
	MakeCode	(0X104B84);
	MakeCode	(0X104B8C);
	MakeName	(0X104B8C,	"rtSafeCopyMemory");
	MakeComm	(0X104B98,	"hProcess");
	MakeComm	(0X104B9C,	"addr");
	MakeComm	(0X104BB0,	"hProcess");
	MakeComm	(0X104BB4,	"addr");
	MakeComm	(0X104BB8,	"size");
	MakeDword	(0X104BE0);
	MakeCode	(0X104BE4);
	MakeName	(0X104BE4,	"recv?");
	MakeComm	(0X104C04,	"sockfd");
	MakeComm	(0X104C08,	"buf");
	MakeComm	(0X104C0C,	"len");
	MakeComm	(0X104C10,	"flags");
	MakeCode	(0X104C2C);
	MakeCode	(0X104C38);
	MakeCode	(0X104C40);
	MakeComm	(0X104C60,	"sockfd");
	MakeComm	(0X104C64,	"buf");
	MakeComm	(0X104C68,	"len");
	MakeComm	(0X104C6C,	"flags");
	MakeCode	(0X104C84);
	MakeCode	(0X104C90);
	MakeCode	(0X104C98);
	MakeCode	(x=0X104CA0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104CA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104CA8);
	OpStkvar	(x,	1);
	MakeCode	(0X104CB4);
	MakeName	(0X104CB4,	"rtGetFileSize");
	MakeComm	(0X104CB8,	"archive");
	MakeCode	(x=0X104CC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104CCC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104CD0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104CD4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104CD8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104CE4);
	OpStkvar	(x,	1);
	MakeComm	(0X104CF4,	"openflags");
	MakeCode	(x=0X104CF4);
	OpStkvar	(x,	1);
	MakeComm	(0X104CFC,	"attributes");
	MakeCode	(x=0X104CFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104D08);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104D10,	"handle");
	MakeComm	(0X104D14,	"out");
	MakeCode	(x=0X104D14);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104D28);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104D38);
	OpStkvar	(x,	1);
	MakeCode	(0X104D40);
	MakeComm	(0X104D44,	"size");
	MakeCode	(x=0X104D44);
	OpStkvar	(x,	1);
	MakeComm	(0X104D48,	"handle");
	MakeCode	(x=0X104D48);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104D54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104D5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104D6C,	"handle");
	MakeCode	(x=0X104D6C);
	OpStkvar	(x,	1);
	MakeDword	(x=0X104D90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104D94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104D98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104D9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X104DA0);
	MakeName	(0X104DA0,	"rtLoadFileToBuffer");
	MakeComm	(0X104DA4,	"archive");
	MakeCode	(x=0X104DB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104DC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104DC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104DC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104DCC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104DD8);
	OpStkvar	(x,	1);
	MakeComm	(0X104DE8,	"openflags");
	MakeCode	(x=0X104DE8);
	OpStkvar	(x,	1);
	MakeComm	(0X104DF0,	"attributes");
	MakeCode	(x=0X104DF0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104DFC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104E04,	"handle");
	MakeComm	(0X104E08,	"out");
	MakeCode	(x=0X104E08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104E1C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104E2C);
	OpStkvar	(x,	1);
	MakeCode	(0X104E34);
	MakeComm	(0X104E38,	"size");
	MakeCode	(x=0X104E38);
	OpStkvar	(x,	1);
	MakeComm	(0X104E3C,	"handle");
	MakeCode	(x=0X104E3C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104E4C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X104E5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X104E68);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104E78,	"size");
	MakeCode	(x=0X104E78);
	OpStkvar	(x,	1);
	MakeComm	(0X104E7C,	"size");
	MakeCode	(x=0X104E7C);
	OpStkvar	(x,	1);
	MakeComm	(0X104E80,	"handle");
	MakeCode	(x=0X104E80);
	OpStkvar	(x,	1);
	MakeComm	(0X104E84,	"bytesRead");
	MakeCode	(x=0X104E84);
	OpStkvar	(x,	1);
	MakeComm	(0X104E88,	"offset");
	MakeComm	(0X104E8C,	"buffer");
	MakeCode	(x=0X104E9C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104EAC,	"handle");
	MakeCode	(x=0X104EAC);
	OpStkvar	(x,	1);
	MakeDword	(x=0X104ED0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104ED4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104ED8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104EDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104EE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X104EE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X104EE8);
	MakeName	(0X104EE8,	"rtGetThreadContext");
	MakeComm	(0X104EF8,	"thread");
	MakeCode	(x=0X104EF8);
	OpStkvar	(x,	1);
	MakeComm	(0X104EFC,	"process");
	MakeComm	(0X104F00,	"threadId");
	MakeCode	(x=0X104F10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X104F24,	"handle");
	MakeCode	(x=0X104F24);
	OpStkvar	(x,	1);
	MakeComm	(0X104F2C,	"count");
	MakeComm	(0X104F30,	"src");
	MakeComm	(0X104F34,	"dst");
	MakeComm	(0X104F38,	"get first 0xA0 bytes of KThread object");
	MakeComm	(0X104F3C,	"end address of the page for this thread");
	MakeComm	(0X104F40,	"dst");
	MakeComm	(0X104F44,	"src");
	MakeComm	(0X104F48,	"get very last 0x10C number of bytes of the end address");
	MakeComm	(0X104F50,	"handle");
	MakeCode	(x=0X104F50);
	OpStkvar	(x,	1);
	MakeDword	(x=0X104F64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X104F68);
	MakeName	(0X104F68,	"rtGenerateJumpCode");
	MakeDword	(0X104F7C);
	MakeName	(0X104F7C,	"LDR_PC_PC_MINUS_4");
	MakeCode	(0X104F80);
	MakeName	(0X104F80,	"rtFlushInstructionCache");
	MakeComm	(0X104F84,	"size");
	MakeComm	(0X104F88,	"process");
	MakeComm	(0X104F8C,	"addr");
	MakeDword	(0X104F94);
	MakeName	(0X104F94,	"process");
	MakeCode	(0X104F98);
	MakeName	(0X104F98,	"rtInitHook");
	MakeCode	(x=0X104FA4);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeComm	(0X104FB8,	"addr");
	MakeComm	(0X104FBC,	"size");
	MakeComm	(0X104FC8,	"ldr pc, [pc-4]");
	MakeCode	(x=0X104FCC);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeCode	(x=0X104FD4);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeCode	(x=0X104FD8);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeCode	(x=0X104FDC);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeComm	(0X104FE4,	"addr");
	MakeCode	(x=0X104FE8);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeCode	(x=0X104FF8);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeCode	(x=0X104FFC);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeComm	(0X105000,	"size");
	MakeDword	(0X10500C);
	MakeCode	(x=0X105010);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeName	(0X105010,	"rtEnableHook");
	MakeComm	(0X105028,	"get patch addr");
	MakeCode	(x=0X105028);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeComm	(0X10502C,	"get code: ldr pc, [pc-4]");
	MakeCode	(x=0X10502C);
	OpStroffEx	(x,	1,	GetStrucIdByName("RT_HOOK"),	0);
	MakeComm	(0X105030,	"place jmp");
	MakeCode	(x=0X105034);
	OpHex		(x,	1);
	MakeComm	(0X105038,	"place target addr");
	MakeComm	(0X10503C,	"size");
	MakeComm	(0X105040,	"addr");
	MakeCode	(0X105054);
	MakeName	(0X105054,	"rtDisableHook");
	MakeComm	(0X105080,	"size");
	MakeComm	(0X105084,	"addr");
	MakeCode	(0X105098);
	MakeName	(0X105098,	"ntrFileCreate");
	MakeComm	(0X10509C,	"archive");
	MakeCode	(x=0X1050AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1050B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1050B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1050BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1050C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1050C8);
	OpStkvar	(x,	1);
	MakeComm	(0X1050D8,	"attributes");
	MakeCode	(x=0X1050D8);
	OpStkvar	(x,	1);
	MakeComm	(0X1050E0,	"openflags");
	MakeCode	(x=0X1050E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1050EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1050F4,	"handle");
	MakeComm	(0X1050F8,	"out");
	MakeCode	(x=0X1050F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105104);
	OpStkvar	(x,	1);
	MakeDword	(x=0X105110);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105114);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X105118);
	MakeName	(0X105118,	"ntrFileRead");
	MakeComm	(0X10511C,	"size");
	MakeComm	(0X10512C,	"bytesRead");
	MakeCode	(x=0X10512C);
	OpStkvar	(x,	1);
	MakeComm	(0X105130,	"offset");
	MakeComm	(0X105134,	"buffer");
	MakeCode	(x=0X105140);
	OpStkvar	(x,	1);
	MakeCode	(0X10514C);
	MakeName	(0X10514C,	"ntrFileWrite");
	MakeComm	(0X105150,	"size");
	MakeComm	(0X105164,	"flushFlags");
	MakeCode	(x=0X105164);
	OpStkvar	(x,	1);
	MakeComm	(0X105168,	"bytesWritten");
	MakeCode	(x=0X105168);
	OpStkvar	(x,	1);
	MakeComm	(0X10516C,	"offset");
	MakeComm	(0X105170,	"buffer");
	MakeCode	(x=0X10517C);
	OpStkvar	(x,	1);
	MakeCode	(0X105188);
	MakeName	(0X105188,	"ntrFileClose");
	MakeCode	(0X10518C);
	MakeName	(0X10518C,	"ntrU32ToU8Array");
	MakeCode	(0X1051AC);
	MakeName	(0X1051AC,	"ntrU16ToU8Array");
	MakeComm	(0X1051BC,	"flushFlags");
	MakeCode	(0X1051BC);
	MakeName	(0X1051BC,	"ntrScreenShotSaveFile");
	MakeRptCmt	(0X1051C4,	"Header Length");
	MakeComm	(0X1051FC,	"array");
	MakeComm	(0X105200,	"number");
	MakeComm	(0X105218,	"array");
	MakeComm	(0X10521C,	"number");
	MakeComm	(0X10523C,	"array");
	MakeComm	(0X105240,	"number");
	MakeComm	(0X105254,	"number");
	MakeComm	(0X10525C,	"array");
	MakeComm	(0X105294,	"filename");
	MakeComm	(0X105298,	"mode");
	MakeComm	(0X1052A8,	"offset");
	MakeComm	(0X1052AC,	"buffer");
	MakeComm	(0X1052B0,	"size");
	MakeComm	(0X1052B8,	"handle");
	MakeCode	(0X1052C4);
	MakeName	(0X1052C4,	"ntrScreenShotCopyImageAsBMP");
	MakeCode	(x=0X1052C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1052CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1052D0);
	OpHex		(x,	1);
	MakeCode	(0X10533C);
	MakeCode	(x=0X10535C);
	OpHex		(x,	1);
	MakeCode	(0X105364);
	MakeCode	(x=0X10537C);
	OpHex		(x,	1);
	MakeCode	(x=0X105388);
	OpHex		(x,	1);
	MakeCode	(x=0X105394);
	OpHex		(x,	1);
	MakeCode	(0X10539C);
	MakeCode	(x=0X1053B0);
	OpHex		(x,	1);
	MakeCode	(x=0X1053C0);
	OpHex		(x,	1);
	MakeCode	(x=0X1053C4);
	OpHex		(x,	1);
	MakeCode	(0X1053E0);
	MakeCode	(0X1053F0);
	MakeCode	(0X1053F4);
	MakeName	(0X1053F4,	"ntrScreenShotGetIndex");
	MakeCode	(x=0X105404);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X105410,	"filename");
	MakeComm	(0X105414,	"mode");
	MakeCode	(0X105430);
	MakeDword	(x=0X10543C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X105440);
	MakeName	(0X105440,	"ntrScreenShotCreate");
	MakeCode	(x=0X105448);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105458);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10545C,	"dst");
	MakeCode	(x=0X10546C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105478);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105484);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1054A4);
	OpHex		(x,	1);
	MakeCode	(x=0X1054A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1054AC);
	OpStkvar	(x,	1);
	MakeComm	(0X1054B4,	"number of pixels");
	MakeComm	(0X1054B8,	"src");
	MakeCode	(x=0X1054C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1054C8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0X1054D0,	"width");
	MakeRptCmt	(0X1054D8,	"height");
	MakeCode	(x=0X1054DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1054E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1054E8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0X1054F0,	"Now it builds the full path");
	MakeComm	(0X1054F4,	"buffer");
	MakeComm	(0X1054F8,	"width");
	MakeComm	(0X1054FC,	"height");
	MakeComm	(0X105500,	"filename");
	MakeCode	(x=0X105500);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10550C);
	OpStkvar	(x,	1);
	MakeComm	(0X105518,	"dst");
	MakeCode	(x=0X10551C);
	OpHex		(x,	1);
	MakeComm	(0X105524,	"number of pixels");
	MakeComm	(0X105528,	"src");
	MakeRptCmt	(0X105534,	"width");
	MakeRptCmt	(0X105538,	"54=0x36=header length");
	MakeRptCmt	(0X10553C,	"height");
	MakeCode	(x=0X105544);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105548);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105550);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105554);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X105560,	"filename");
	MakeCode	(x=0X105560);
	OpStkvar	(x,	1);
	MakeComm	(0X105564,	"buffer");
	MakeComm	(0X105568,	"width");
	MakeComm	(0X10556C,	"height");
	MakeDword	(x=0X105594);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105598);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X10559C);
	MakeName	(0X10559C,	"count");
	MakeDword	(x=0X1055A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1055A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1055A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1055AC);
	MakeCode	(0X1055B0);
	MakeName	(0X1055B0,	"ntrCreateScreenShotCallback");
	MakeCode	(x=0X1055B4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1055C4,	"size");
	MakeCode	(x=0X1055D4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1055E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1055E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1055F0);
	OpStkvar	(x,	1);
	MakeComm	(0X1055FC,	"arg1");
	MakeComm	(0X105600,	"arg2");
	MakeComm	(0X105604,	"arg3");
	MakeComm	(0X105608,	"cmd");
	MakeComm	(0X105610,	"nanoseconds");
	MakeComm	(0X105620,	"arg1");
	MakeComm	(0X105624,	"arg2");
	MakeComm	(0X105628,	"arg3");
	MakeComm	(0X10562C,	"cmd");
	MakeDword	(x=0X105640);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105644);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X105648);
	MakeCode	(0X10564C);
	MakeName	(0X10564C,	"ntrScreenShotBuiltinPluginInit");
	MakeCode	(x=0X105650);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105654);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10565C,	"callback");
	MakeCode	(x=0X10565C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	MakeCode	(x=0X105660);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X105664,	"catalog");
	MakeCode	(x=0X105670);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10567C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105688);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105694);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X1056A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1056A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1056A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1056A8,	"callback");
	MakeDword	(x=0X1056AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1056AC,	"title");
	MakeDword	(x=0X1056B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1056B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1056B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1056BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1056C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1056C0,	"ntrPlgInitSharedFunctions");
	MakeCode	(x=0X1056C4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1056CC);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1056D0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1056D4);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1056D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1056DC);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1056E0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1056E4);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1056E8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1056EC);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1056F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1056F4);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X1056F8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1056FC);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X105700);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105704);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeCode	(x=0X105708);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10570C);
	OpStroffEx	(x,	1,	GetStrucIdByName("NS_CONFIG"),	0);
	MakeDword	(x=0X105714);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105718);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10571C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105720);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105724);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105728);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10572C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105730);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105734);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105738);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X10573C);
	MakeName	(0X10573C,	"socketNetConvertError");
	MakeCode	(x=0X10574C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X10576C);
	MakeDword	(x=0X105774);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X105778);
	MakeName	(0X105778,	"socketCmd1");
	MakeCode	(x=0X1057A0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1057AC,	"session");
	MakeDword	(0X1057C0);
	MakeDword	(x=0X1057C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1057C8);
	MakeCode	(x=0X1057D0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X105800);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X105804);
	MakeName	(0X105804,	"socketInitialize");
	MakeCode	(x=0X10580C);
	OpStkvar	(x,	1);
	MakeComm	(0X105810,	"mypermission");
	MakeComm	(0X105820,	"otherpermission");
	MakeCode	(x=0X105820);
	OpStkvar	(x,	1);
	MakeComm	(0X105824,	"addr");
	MakeComm	(0X105828,	"size");
	MakeComm	(0X105834,	"handleptr");
	MakeComm	(0X10583C,	"out");
	MakeCode	(x=0X10583C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105840);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X105850,	"memhandle");
	MakeCode	(x=0X105850);
	OpStkvar	(x,	1);
	MakeComm	(0X105854,	"memsize");
	MakeDword	(x=0X105864);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X105868);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X10586C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X10586C,	"socketGetErrno");
	MakeCode	(x=0X105870);
	OpOff		(x,	1,	0X10B0BC);
	OpOff		(x,	129,	0X10B0BC);
	MakeDword	(x=0X105878);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X10587C);
	MakeName	(0X10587C,	"socketOpen");
	MakeCode	(x=0X105898);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1058B0,	"session");
	MakeComm	(0X1058D0,	"sock_retval");
	MakeCode	(0X1058DC);
	MakeDword	(0X1058E4);
	MakeDword	(x=0X1058E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1058EC);
	MakeName	(0X1058EC,	"socketClose");
	MakeCode	(x=0X105900);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X105910,	"session");
	MakeComm	(0X10592C,	"sock_retval");
	MakeDword	(0X105944);
	MakeDword	(x=0X105948);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X10594C);
	MakeName	(0X10594C,	"socketShutdown");
	MakeCode	(x=0X105964);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X105978,	"session");
	MakeComm	(0X105994,	"sock_retval");
	MakeDword	(0X1059AC);
	MakeDword	(x=0X1059B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1059B4);
	MakeName	(0X1059B4,	"socketListen");
	MakeCode	(x=0X1059CC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1059E0,	"session");
	MakeComm	(0X1059FC,	"sock_retval");
	MakeDword	(0X105A14);
	MakeDword	(x=0X105A18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X105A1C);
	MakeName	(0X105A1C,	"socketAccept");
	MakeCode	(x=0X105A34);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105A64);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X105A7C,	"session");
	MakeComm	(0X105AA0,	"sock_retval");
	MakeCode	(x=0X105ACC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105ADC);
	OpStkvar	(x,	1);
	MakeCode	(0X105B00);
	MakeDword	(0X105B14);
	MakeDword	(x=0X105B18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X105B1C);
	MakeCode	(0X105B20);
	MakeName	(0X105B20,	"socketBind");
	MakeCode	(x=0X105B38);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105B64);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105B70);
	OpOff		(x,	1,	0X10B0BC);
	OpOff		(x,	129,	0X10B0BC);
	MakeCode	(x=0X105B84);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105B88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105BA0);
	OpHex		(x,	1);
	MakeComm	(0X105BB4,	"session");
	MakeComm	(0X105BD0,	"sock_retval");
	MakeDword	(x=0X105BE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X105BEC);
	MakeCode	(0X105BF0);
	MakeName	(0X105BF0,	"socketConnect");
	MakeCode	(x=0X105C08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105C14);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105C3C);
	OpOff		(x,	1,	0X10B0BC);
	OpOff		(x,	129,	0X10B0BC);
	MakeCode	(x=0X105C54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105C58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105C68);
	OpHex		(x,	1);
	MakeComm	(0X105C84,	"session");
	MakeComm	(0X105CA0,	"sock_retval");
	MakeDword	(x=0X105CB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X105CBC);
	MakeCode	(0X105CC0);
	MakeName	(0X105CC0,	"socketIpcCmd7RecvFromOther");
	MakeCode	(x=0X105CD8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105CDC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105CE4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105D10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105D20);
	OpHex		(x,	1);
	MakeComm	(0X105D40,	"session");
	MakeCode	(x=0X105D4C);
	OpHex		(x,	1);
	MakeComm	(0X105D74,	"sock_retval");
	MakeCode	(x=0X105D94);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105DA4);
	OpStkvar	(x,	1);
	MakeCode	(0X105DC8);
	MakeDword	(0X105DDC);
	MakeDword	(x=0X105DE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X105DE4);
	MakeName	(0X105DE4,	"socketIpcCmd8RecvFrom");
	MakeCode	(x=0X105DF8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105DFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105E00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105E08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105E38);
	OpHex		(x,	1);
	MakeCode	(x=0X105E44);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105E54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105E60);
	OpHex		(x,	1);
	MakeComm	(0X105E80,	"session");
	MakeCode	(x=0X105E84);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105E88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105E9C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105EA0);
	OpStkvar	(x,	1);
	MakeComm	(0X105EBC,	"sock_retval");
	MakeCode	(x=0X105EDC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105EEC);
	OpStkvar	(x,	1);
	MakeCode	(0X105F10);
	MakeDword	(0X105F24);
	MakeDword	(x=0X105F28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X105F2C);
	MakeName	(0X105F2C,	"socketIpcCmd9SendToOther");
	MakeCode	(x=0X105F38);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105F40);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105F50);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105F5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105F6C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105F7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105F94);
	OpOff		(x,	1,	0X10B0BC);
	OpOff		(x,	129,	0X10B0BC);
	MakeCode	(x=0X105F9C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X105FAC);
	OpStkvar	(x,	1);
	MakeCode	(0X105FB8);
	MakeCode	(x=0X105FCC);
	OpHex		(x,	1);
	MakeCode	(x=0X105FD8);
	OpHex		(x,	1);
	MakeCode	(x=0X105FE0);
	OpHex		(x,	1);
	MakeComm	(0X105FFC,	"session");
	MakeComm	(0X106018,	"sock_retval");
	MakeDword	(x=0X106038);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X10603C);
	MakeCode	(0X106040);
	MakeName	(0X106040,	"socketIpcCmdASendTo");
	MakeCode	(x=0X10604C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106054);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106064);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106070);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106080);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106090);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1060A8);
	OpOff		(x,	1,	0X10B0BC);
	OpOff		(x,	129,	0X10B0BC);
	MakeCode	(x=0X1060B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1060C0);
	OpStkvar	(x,	1);
	MakeCode	(0X1060CC);
	MakeCode	(x=0X1060E4);
	OpHex		(x,	1);
	MakeCode	(x=0X1060E8);
	OpHex		(x,	1);
	MakeCode	(x=0X1060F0);
	OpHex		(x,	1);
	MakeCode	(x=0X1060F8);
	OpHex		(x,	1);
	MakeComm	(0X106114,	"session");
	MakeComm	(0X106130,	"sock_retval");
	MakeDword	(x=0X106150);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X106154);
	MakeCode	(x=0X106158);
	OpStkvar	(x,	1);
	MakeName	(0X106158,	"socketRecvFrom");
	MakeCode	(x=0X106160);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106164);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10616C);
	OpStkvar	(x,	1);
	MakeComm	(0X106174,	"src_addr");
	MakeCode	(x=0X106174);
	OpStkvar	(x,	1);
	MakeComm	(0X106178,	"addrlen");
	MakeCode	(x=0X106178);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10617C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106184);
	OpStkvar	(x,	1);
	MakeName	(0X106184,	"socketSendTo");
	MakeCode	(x=0X10618C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106190);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106198);
	OpStkvar	(x,	1);
	MakeComm	(0X1061A0,	"dest_addr");
	MakeCode	(x=0X1061A0);
	OpStkvar	(x,	1);
	MakeComm	(0X1061A4,	"addrlen");
	MakeCode	(x=0X1061A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1061A8);
	OpStkvar	(x,	1);
	MakeCode	(0X1061B0);
	MakeName	(0X1061B0,	"socketRecv");
	MakeComm	(0X1061B8,	"src_addr");
	MakeCode	(x=0X1061B8);
	OpStkvar	(x,	1);
	MakeComm	(0X1061BC,	"addrlen");
	MakeCode	(x=0X1061BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1061C8);
	OpStkvar	(x,	1);
	MakeCode	(0X1061CC);
	MakeName	(0X1061CC,	"socketSend");
	MakeComm	(0X1061D4,	"dest_addr");
	MakeCode	(x=0X1061D4);
	OpStkvar	(x,	1);
	MakeComm	(0X1061D8,	"addrlen");
	MakeCode	(x=0X1061D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1061E4);
	OpStkvar	(x,	1);
	MakeCode	(0X1061E8);
	MakeName	(0X1061E8,	"socketGetSockOpt");
	MakeCode	(x=0X1061FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106218);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106228);
	OpHex		(x,	1);
	MakeComm	(0X106244,	"session");
	MakeComm	(0X106268,	"sock_retval");
	MakeCode	(0X106284);
	MakeCode	(0X106290);
	MakeDword	(0X106298);
	MakeDword	(x=0X10629C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1062A0);
	MakeName	(0X1062A0,	"socketSetSockOpt");
	MakeCode	(x=0X1062B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1062C8);
	OpHex		(x,	1);
	MakeCode	(x=0X1062CC);
	OpHex		(x,	1);
	MakeCode	(x=0X1062D4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1062F4,	"session");
	MakeComm	(0X106310,	"sock_retval");
	MakeDword	(0X106328);
	MakeDword	(x=0X10632C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106330);
	MakeName	(0X106330,	"socketFcntl");
	MakeCode	(x=0X10633C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106348);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106350);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106354);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106360);
	OpOff		(x,	1,	0X10B0BC);
	OpOff		(x,	129,	0X10B0BC);
	MakeCode	(0X106368);
	MakeCode	(x=0X10637C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106380);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106384);
	OpHex		(x,	1);
	MakeComm	(0X1063AC,	"session");
	MakeComm	(0X1063C8,	"sock_retval");
	MakeDword	(x=0X1063F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1063F4);
	MakeCode	(0X1063F8);
	MakeName	(0X1063F8,	"socketAtMark");
	MakeCode	(x=0X10640C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10641C,	"session");
	MakeComm	(0X106438,	"sock_retval");
	MakeDword	(0X106450);
	MakeDword	(x=0X106454);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106458);
	MakeName	(0X106458,	"socketGetHostId");
	MakeCode	(x=0X106468);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106470,	"session");
	MakeDword	(x=0X106494);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106498);
	MakeName	(0X106498,	"socketGetSockName");
	MakeCode	(x=0X1064B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1064C4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1064E8,	"session");
	MakeComm	(0X10650C,	"sock_retval");
	MakeCode	(x=0X10651C);
	OpOff		(x,	1,	0X10B0BC);
	OpOff		(x,	129,	0X10B0BC);
	MakeCode	(0X106528);
	MakeCode	(x=0X10652C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10653C);
	OpStkvar	(x,	1);
	MakeCode	(0X106570);
	MakeDword	(0X10657C);
	MakeDword	(x=0X106580);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X106584);
	MakeCode	(0X106588);
	MakeName	(0X106588,	"socketGetPeerName");
	MakeCode	(x=0X1065A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1065B4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1065D8,	"session");
	MakeComm	(0X1065FC,	"sock_retval");
	MakeCode	(x=0X10660C);
	OpOff		(x,	1,	0X10B0BC);
	OpOff		(x,	129,	0X10B0BC);
	MakeCode	(0X106618);
	MakeCode	(x=0X10661C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10662C);
	OpStkvar	(x,	1);
	MakeCode	(0X106660);
	MakeDword	(0X10666C);
	MakeDword	(x=0X106670);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X106674);
	MakeCode	(x=0X106678);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X106678,	"srvExit");
	MakeComm	(0X106684,	"handle");
	MakeDword	(x=0X1066A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1066A4);
	MakeName	(0X1066A4,	"srvRegisterClient");
	MakeCode	(x=0X1066AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1066C8,	"session");
	MakeDword	(x=0X1066DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1066E0);
	MakeCode	(0X1066E4);
	MakeName	(0X1066E4,	"srvInit");
	MakeComm	(0X1066E8,	"out");
	MakeCode	(x=0X1066E8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1066EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1066FC,	"handleptr");
	MakeCode	(x=0X1066FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X106708);
	MakeDword	(x=0X106710);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X106710,	"handleptr");
	MakeDword	(x=0X106714);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X106714,	"portName");
	MakeCode	(0X106718);
	MakeName	(0X106718,	"srvGetServiceHandle");
	MakeCode	(x=0X106724);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10672C,	"a1");
	MakeCode	(x=0X10674C);
	OpHex		(x,	1);
	MakeComm	(0X10675C,	"GetServiceSessionHandle(8-byte servicename, u32 strlen, u32 flags).\nFlags bit0: if not set, return port-handle instead of session-handle\nwhen session-handle unavailable (max sessions/timeout?).");
	MakeComm	(0X106778,	"session");
	MakeCode	(0X106794);
	MakeDword	(x=0X10679C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1067A0);
	MakeByte	(0X1067A4);
	MakeArray	(0X1067A4,	0XC);
	MakeComm	(0X1067B0,	"Read User read-only Thread and Process ID Register");
	MakeCode	(0X1067B0);
	MakeName	(0X1067B0,	"svcGetThreadCommandBuffer");
	MakeCode	(0X1067BC);
	MakeName	(0X1067BC,	"svcControlMemory");
	MakeCode	(x=0X1067C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1067C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1067CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1067D4);
	OpStkvar	(x,	1);
	MakeCode	(0X1067DC);
	MakeName	(0X1067DC,	"svcExitProcess");
	MakeCode	(0X1067E4);
	MakeName	(0X1067E4,	"svcCreateThread");
	MakeCode	(x=0X1067E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1067EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1067F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1067FC);
	OpStkvar	(x,	1);
	MakeCode	(0X106804);
	MakeName	(0X106804,	"svcExitThread");
	MakeCode	(0X10680C);
	MakeName	(0X10680C,	"svcSleepThread");
	MakeCode	(x=0X106814);
	OpStkvar	(x,	1);
	MakeName	(0X106814,	"svcCreateMutex");
	MakeCode	(x=0X10681C);
	OpStkvar	(x,	1);
	MakeCode	(0X106828);
	MakeName	(0X106828,	"svcReleaseMutex");
	MakeCode	(x=0X106830);
	OpStkvar	(x,	1);
	MakeName	(0X106830,	"svcReleaseSemaphore");
	MakeCode	(x=0X106838);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106844);
	OpStkvar	(x,	1);
	MakeName	(0X106844,	"svcCreateEvent");
	MakeCode	(x=0X10684C);
	OpStkvar	(x,	1);
	MakeCode	(0X106858);
	MakeName	(0X106858,	"svcSignalEvent");
	MakeCode	(0X106860);
	MakeName	(0X106860,	"svcClearEvent");
	MakeCode	(x=0X106868);
	OpStkvar	(x,	1);
	MakeName	(0X106868,	"svcCreateMemoryBlock");
	MakeCode	(x=0X10686C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106874);
	OpStkvar	(x,	1);
	MakeCode	(0X106880);
	MakeName	(0X106880,	"svcMapMemoryBlock");
	MakeCode	(0X106888);
	MakeName	(0X106888,	"svcUnmapMemoryBlock");
	MakeCode	(0X106890);
	MakeName	(0X106890,	"svcArbitrateAddress");
	MakeCode	(0X106898);
	MakeName	(0X106898,	"svcCloseHandle");
	MakeCode	(0X1068A0);
	MakeName	(0X1068A0,	"svcWaitSynchronization1");
	MakeCode	(x=0X1068A8);
	OpStkvar	(x,	1);
	MakeName	(0X1068A8,	"svcWaitSynchronizationN");
	MakeCode	(x=0X1068B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1068B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1068C0);
	OpStkvar	(x,	1);
	MakeCode	(0X1068C8);
	MakeName	(0X1068C8,	"svcGetSystemTick");
	MakeCode	(0X1068D0);
	MakeName	(0X1068D0,	"svcGetSystemInfo");
	MakeCode	(x=0X1068D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1068E4);
	OpStkvar	(x,	1);
	MakeCode	(0X1068EC);
	MakeName	(0X1068EC,	"svcGetProcessInfo");
	MakeCode	(x=0X1068F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106900);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106908);
	OpStkvar	(x,	1);
	MakeName	(0X106908,	"svcConnectToPort");
	MakeCode	(x=0X106910);
	OpStkvar	(x,	1);
	MakeCode	(0X10691C);
	MakeName	(0X10691C,	"svcSendSyncRequest");
	MakeCode	(x=0X106924);
	OpStkvar	(x,	1);
	MakeName	(0X106924,	"svcGetProcessId");
	MakeCode	(x=0X10692C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106938);
	OpStkvar	(x,	1);
	MakeName	(0X106938,	"svcGetThreadId");
	MakeCode	(x=0X106940);
	OpStkvar	(x,	1);
	MakeCode	(0X10694C);
	MakeName	(0X10694C,	"svcSetThreadIdealProcessor");
	MakeCode	(x=0X106954);
	OpStkvar	(x,	1);
	MakeName	(0X106954,	"svcOpenThread");
	MakeCode	(x=0X10695C);
	OpStkvar	(x,	1);
	MakeCode	(0X106968);
	MakeName	(0X106968,	"svcFlushProcessDataCache");
	MakeCode	(0X106970);
	MakeName	(0X106970,	"svcInvalidateProcessDataCache");
	MakeCode	(0X106978);
	MakeName	(0X106978,	"svcQueryMemory");
	MakeCode	(0X106980);
	MakeName	(0X106980,	"svcAddCodeSegment");
	MakeCode	(0X106988);
	MakeName	(0X106988,	"svcTerminateProcess");
	MakeCode	(x=0X106990);
	OpStkvar	(x,	1);
	MakeName	(0X106990,	"svcOpenProcess");
	MakeCode	(x=0X106998);
	OpStkvar	(x,	1);
	MakeCode	(0X1069A4);
	MakeName	(0X1069A4,	"svcControlProcessMemory");
	MakeCode	(x=0X1069A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1069AC);
	OpStkvar	(x,	1);
	MakeCode	(0X1069BC);
	MakeName	(0X1069BC,	"svcMapProcessMemory");
	MakeCode	(0X1069C4);
	MakeName	(0X1069C4,	"svcStartInterProcessDma");
	MakeCode	(x=0X1069C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1069CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1069D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1069E4);
	OpStkvar	(x,	1);
	MakeName	(0X1069E4,	"svcGetDmaState");
	MakeCode	(x=0X1069EC);
	OpStkvar	(x,	1);
	MakeCode	(0X1069F8);
	MakeName	(0X1069F8,	"svcBackdoor");
	MakeCode	(x=0X106A00);
	OpStkvar	(x,	1);
	MakeName	(0X106A00,	"svcGetProcessList");
	MakeCode	(x=0X106A08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106A14);
	OpStkvar	(x,	1);
	MakeName	(0X106A14,	"svcGetThreadList");
	MakeCode	(x=0X106A1C);
	OpStkvar	(x,	1);
	MakeCode	(0X106A28);
	MakeName	(0X106A28,	"svcGetThreadContext");
	MakeCode	(x=0X106A30);
	OpStkvar	(x,	1);
	MakeName	(0X106A30,	"svcDebugActiveProcess");
	MakeCode	(x=0X106A38);
	OpStkvar	(x,	1);
	MakeCode	(0X106A44);
	MakeName	(0X106A44,	"svcReadProcessMemory");
	MakeCode	(0X106A4C);
	MakeName	(0X106A4C,	"svcWriteProcessMemory");
	MakeByte	(0X106A54);
	MakeArray	(0X106A54,	0XC);
	MakeName	(0X106A54,	"nsDbgPrint_3");
	MakeComm	(0X106A60,	"r3 now holds handledata *?");
	MakeCode	(0X106A60);
	MakeName	(0X106A60,	"get_kernel_object_ptr");
	MakeComm	(0X106A68,	"hProcess * 8");
	MakeComm	(0X106A6C,	"get Pointer to the kernel object that the handle references.");
	MakeCode	(0X106A74);
	MakeCode	(0X106A78);
	MakeComm	(0X106A80,	"-> DFFFC7FC");
	MakeCode	(0X106A80);
	MakeName	(0X106A80,	"mmu_stuff");
	MakeComm	(0X106A84,	"-> DFFF87FC");
	MakeCode	(x=0X106AA0);
	OpHex		(x,	1);
	MakeCode	(x=0X106AAC);
	OpHex		(x,	1);
	MakeCode	(x=0X106AD0);
	OpHex		(x,	1);
	MakeCode	(x=0X106AD4);
	OpHex		(x,	1);
	MakeCode	(0X106AE0);
	MakeCode	(x=0X106AE8);
	OpHex		(x,	1);
	MakeCode	(x=0X106AEC);
	OpHex		(x,	1);
	MakeCode	(x=0X106B20);
	OpHex		(x,	1);
	MakeCode	(x=0X106B28);
	OpHex		(x,	1);
	MakeCode	(x=0X106B2C);
	OpHex		(x,	1);
	MakeCode	(x=0X106B38);
	OpHex		(x,	1);
	MakeCode	(x=0X106B3C);
	OpHex		(x,	1);
	MakeCode	(x=0X106B40);
	OpHex		(x,	1);
	MakeDword	(0X106B60);
	MakeDword	(0X106B64);
	MakeCode	(0X106B68);
	MakeName	(0X106B68,	"install_SVC_6D_hook");
	MakeCode	(x=0X106B70);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106B74,	"mapped IO I2C");
	MakeComm	(0X106B90,	"get va_arm11_kernel_base");
	MakeComm	(0X106BA0,	"patch error code 0xE0E01BEE");
	MakeComm	(0X106BAC,	"patch error code 0xE0E01BF5");
	MakeCode	(x=0X106BB0);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	ExtLinA		(0X106BBC,	0,	"");
	ExtLinA		(0X106BBC,	1,	"patch svc 6D handler's code to force it to disable FIQ and IRQ");
	ExtLinA		(0X106BBC,	2,	"");
	ExtLinA		(0X106BBC,	3,	"MRS             R0, CPSR");
	ExtLinA		(0X106BBC,	4,	"ORR             R0, R0, #0xC0");
	ExtLinA		(0X106BBC,	5,	"MSR             CPSR_cf, R0");
	ExtLinA		(0X106BBC,	6,	"");
	MakeComm	(0X106BC8,	"dst");
	MakeCode	(x=0X106BC8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106BD0,	"src");
	ExtLinA		(0X106BD0,	0,	"");
	ExtLinA		(0X106BD0,	1,	"then redirect to arm11 cmd dispatcher");
	ExtLinA		(0X106BD0,	2,	"");
	MakeComm	(0X106BD4,	"hook SVC 6D");
	MakeCode	(x=0X106BD8);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeCode	(x=0X106BDC);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	ExtLinA		(0X106BE4,	0,	"");
	ExtLinA		(0X106BE4,	1,	"let arm11 cb point to modified handler 6D code");
	ExtLinA		(0X106BE4,	2,	"");
	MakeCode	(x=0X106BE4);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeDword	(x=0X106BF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X106BF8);
	MakeDword	(0X106BFC);
	MakeDword	(0X106C00);
	MakeDword	(0X106C04);
	MakeDword	(x=0X106C08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X106C08,	"dst");
	MakeCode	(0X106C0C);
	MakeName	(0X106C0C,	"clean_cache");
	MakeCode	(x=0X106C30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(0X106C5C);
	MakeDword	(x=0X106C60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106C64);
	MakeName	(0X106C64,	"dispatch_arm11_kernel_cmd");
	MakeCode	(x=0X106C68);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	ExtLinA		(0X106C78,	0,	"handle_cmd_1:");
	MakeCode	(x=0X106C78);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeCode	(x=0X106C7C);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeCode	(x=0X106C80);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeCode	(0X106CA0);
	MakeCode	(x=0X106CA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	ExtLinA		(0X106CA8,	0,	"handle_cmd_2:");
	MakeCode	(x=0X106CA8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106CAC,	"hProcess");
	MakeCode	(x=0X106CAC);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeCode	(x=0X106CB0);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeComm	(0X106CB8,	"KProcess");
	MakeComm	(0X106CBC,	"r0 points to KProcessHandleTable");
	MakeCode	(x=0X106CC4);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeCode	(0X106CCC);
	ExtLinA		(0X106CD0,	0,	"handle_cmd_3:");
	MakeCode	(x=0X106CD8);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	ExtLinA		(0X106CE0,	0,	"set_kprocess:");
	ExtLinA		(0X106CE4,	0,	"handle_cmd_4:");
	ExtLinA		(0X106CFC,	0,	"handle_cmd_5:");
	MakeCode	(x=0X106CFC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106D00,	"param 1");
	MakeComm	(0X106D04,	"param 2");
	MakeCode	(x=0X106D08);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeComm	(0X106D10,	"param 3");
	MakeCode	(0X106D1C);
	ExtLinA		(0X106D24,	0,	"handle_cmd_6:");
	MakeCode	(x=0X106D24);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X106D50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106D54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106D58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106D5C);
	MakeName	(0X106D5C,	"arm11k_unknown_cmd5");
	MakeCode	(x=0X106D64);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106D6C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106D74,	"CodeAddress");
	MakeCode	(x=0X106D74);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeCode	(x=0X106D7C);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeDword	(x=0X106D84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106D88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X106D8C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X106D8C,	"arm11k_set_current_kprocess");
	MakeCode	(x=0X106D94);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeCode	(x=0X106D9C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106DA0,	"CodeAddress");
	MakeCode	(x=0X106DA0);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeDword	(x=0X106DA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106DAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106DB0);
	MakeName	(0X106DB0,	"arm11k_get_current_kprocess");
	MakeCode	(x=0X106DB8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106DC0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106DC4,	"CodeAddress");
	MakeCode	(x=0X106DC4);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeCode	(x=0X106DCC);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeDword	(x=0X106DD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106DD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106DDC);
	MakeName	(0X106DDC,	"arm11k_get_kernel_object");
	MakeCode	(x=0X106DE4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106DEC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106DF0);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeComm	(0X106DF4,	"CodeAddress");
	MakeCode	(x=0X106DF4);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeCode	(x=0X106DFC);
	OpOff		(x,	1,	0X10B0C8);
	OpOff		(x,	129,	0X10B0C8);
	MakeDword	(x=0X106E04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106E08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X106E0C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X106E0C,	"arm11k_memcpy");
	MakeComm	(0X106E14,	"param1-3\ndst, src, count");
	MakeCode	(x=0X106E1C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106E20,	"CodeAddress");
	MakeCode	(x=0X106E20);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeDword	(x=0X106E28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106E2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X106E30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X106E30,	"arm11k_replacel_svc_6D_handler");
	MakeCode	(x=0X106E3C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106E40,	"CodeAddress");
	MakeCode	(x=0X106E40);
	OpOff		(x,	1,	0X10837C);
	OpOff		(x,	129,	0X10837C);
	MakeDword	(x=0X106E48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106E4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106E50);
	MakeCode	(0X106E54);
	MakeName	(0X106E54,	"pa_to_va");
	MakeCode	(0X106E68);
	MakeCode	(0X106E7C);
	MakeCode	(0X106E90);
	MakeCode	(0X106E94);
	MakeName	(0X106E94,	"assign_rwx_to_0x1F000000");
	MakeComm	(0X106E98,	"size");
	MakeComm	(0X106E9C,	"addr");
	MakeCode	(x=0X106E9C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106EAC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X106EB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106EBC);
	MakeName	(0X106EBC,	"debounceKey");
	MakeCode	(x=0X106EC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106ECC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106ED4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106EDC);
	OpStkvar	(x,	1);
	MakeDword	(0X106EEC);
	MakeCode	(0X106EF0);
	MakeName	(0X106EF0,	"update_screen");
	MakeCode	(x=0X106EF4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106EF8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106F24,	"process");
	MakeComm	(0X106F44,	"size");
	MakeComm	(0X106F48,	"addr");
	MakeDword	(x=0X106F54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X106F58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X106F5C);
	MakeDword	(0X106F60);
	MakeDword	(0X106F64);
	MakeCode	(0X106F68);
	MakeCode	(x=0X106F6C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X106F84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X106F88);
	MakeName	(0X106F88,	"acquire_video");
	MakeCode	(x=0X106F8C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106F90);
	OpOff		(x,	1,	0X10B148);
	OpOff		(x,	129,	0X10B148);
	MakeCode	(x=0X106F9C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106FA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106FA4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X106FAC,	"REG_LCDCOLORFILLMAIN");
	MakeComm	(0X106FB4,	"REG_LCDCOLORFILLSUB");
	MakeCode	(x=0X106FBC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X106FD0);
	OpOff		(x,	1,	0X10B158);
	OpOff		(x,	129,	0X10B158);
	MakeCode	(x=0X106FD8);
	OpOff		(x,	1,	0X10B158);
	OpOff		(x,	129,	0X10B158);
	MakeCode	(x=0X106FE0);
	OpOff		(x,	1,	0X10B158);
	OpOff		(x,	129,	0X10B158);
	MakeCode	(x=0X106FE8);
	OpOff		(x,	1,	0X10B158);
	OpOff		(x,	129,	0X10B158);
	MakeComm	(0X107004,	"y");
	MakeComm	(0X107010,	"x");
	MakeComm	(0X107030,	"xs");
	MakeComm	(0X107034,	"ys");
	MakeDword	(x=0X10704C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X107050);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X107054);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X107058);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10705C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X107060);
	MakeDword	(0X107064);
	MakeCode	(x=0X107068);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X107068,	"release_video");
	MakeCode	(x=0X10706C);
	OpOff		(x,	1,	0X10B148);
	OpOff		(x,	129,	0X10B148);
	MakeCode	(x=0X107078);
	OpOff		(x,	1,	0X10B148);
	OpOff		(x,	129,	0X10B148);
	MakeCode	(x=0X107080);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X107084);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X107098);
	OpOff		(x,	1,	0X10B158);
	OpOff		(x,	129,	0X10B158);
	MakeCode	(x=0X1070A4);
	OpOff		(x,	1,	0X10B158);
	OpOff		(x,	129,	0X10B158);
	MakeCode	(x=0X1070B0);
	OpOff		(x,	1,	0X10B158);
	OpOff		(x,	129,	0X10B158);
	MakeCode	(x=0X1070BC);
	OpOff		(x,	1,	0X10B158);
	OpOff		(x,	129,	0X10B158);
	MakeDword	(x=0X1070C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1070CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1070D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1070D4);
	MakeName	(0X1070D4,	"controlVideo");
	MakeCode	(0X1070E8);
	MakeCode	(0X1070F8);
	ExtLinA		(0X107100,	0,	"get_framebuffer");
	MakeCode	(x=0X107100);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X10710C);
	MakeCode	(x=0X107110);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X107130);
	MakeDword	(x=0X107134);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X107138);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X107138,	"read_pad");
	MakeDword	(x=0X107154);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X107158);
	MakeName	(0X107158,	"wait_pad_input");
	MakeCode	(0X107188);
	MakeName	(0X107188,	"get_process_list_action");
	MakeCode	(x=0X107190);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X107194);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1071A4);
	OpStkvar	(x,	1);
	MakeComm	(0X1071A8,	"x");
	MakeComm	(0X1071AC,	"y");
	MakeComm	(0X1071B0,	"xs");
	MakeComm	(0X1071B4,	"ys");
	MakeComm	(0X1071C0,	"x");
	MakeComm	(0X1071C4,	"y");
	MakeComm	(0X1071C8,	"g");
	MakeCode	(x=0X1071C8);
	OpStkvar	(x,	1);
	MakeComm	(0X1071CC,	"b");
	MakeCode	(x=0X1071CC);
	OpStkvar	(x,	1);
	MakeComm	(0X1071D0,	"r");
	MakeComm	(0X1071D4,	"s");
	MakeCode	(x=0X1071D4);
	OpStkvar	(x,	1);
	MakeComm	(0X1071E0,	"g");
	MakeCode	(x=0X1071E0);
	OpStkvar	(x,	1);
	MakeComm	(0X1071E4,	"b");
	MakeCode	(x=0X1071E4);
	OpStkvar	(x,	1);
	MakeComm	(0X1071E8,	"x");
	MakeComm	(0X1071EC,	"r");
	MakeComm	(0X1071F0,	"y");
	MakeCode	(x=0X1071F4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X107234);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107240);
	OpStkvar	(x,	1);
	MakeComm	(0X107248,	"r");
	MakeComm	(0X10724C,	"y");
	MakeComm	(0X107250,	"g");
	MakeCode	(x=0X107250);
	OpStkvar	(x,	1);
	MakeComm	(0X107254,	"b");
	MakeCode	(x=0X107254);
	OpStkvar	(x,	1);
	MakeComm	(0X107258,	"s");
	MakeCode	(x=0X107258);
	OpStkvar	(x,	1);
	MakeComm	(0X10725C,	"x");
	MakeCode	(0X107270);
	MakeCode	(0X107298);
	MakeCode	(0X1072AC);
	MakeCode	(0X1072C4);
	MakeDword	(x=0X1072D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1072D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1072D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1072D8,	"s");
	MakeCode	(x=0X1072DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1072DC,	"invoke_osd_wait_for_input");
	MakeComm	(0X1072F4,	"nanoseconds");
	MakeCode	(x=0X107304);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10731C,	"x");
	MakeComm	(0X107320,	"y");
	MakeComm	(0X107324,	"xs");
	MakeComm	(0X107328,	"ys");
	MakeComm	(0X107330,	"x");
	MakeComm	(0X107334,	"y");
	MakeComm	(0X107338,	"r");
	MakeComm	(0X10733C,	"g");
	MakeCode	(x=0X10733C);
	OpStkvar	(x,	1);
	MakeComm	(0X107340,	"b");
	MakeCode	(x=0X107340);
	OpStkvar	(x,	1);
	MakeComm	(0X107344,	"s");
	MakeComm	(0X107350,	"x");
	MakeComm	(0X107354,	"y");
	MakeComm	(0X107358,	"b");
	MakeCode	(x=0X107358);
	OpStkvar	(x,	1);
	MakeComm	(0X10735C,	"g");
	MakeCode	(x=0X10735C);
	OpStkvar	(x,	1);
	MakeComm	(0X107360,	"r");
	MakeCode	(x=0X107364);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X10738C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X107390);
	MakeDword	(x=0X107394);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X107398);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X10739C);
	MakeName	(0X10739C,	"showDbg");
	MakeCode	(x=0X1073D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1073F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1073F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1073FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107404);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10741C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107420);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107428);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107430);
	OpStkvar	(x,	1);
	MakeDword	(x=0X107440);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X107444);
	MakeCode	(0X107448);
	MakeCode	(x=0X107478);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1074AC);
	OpStkvar	(x,	1);
	MakeCode	(0X1074B0);
	MakeComm	(0X1074B4,	"archive");
	MakeCode	(x=0X1074B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1074D0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1074D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1074EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1074F4);
	OpStkvar	(x,	1);
	MakeComm	(0X107504,	"string");
	MakeCode	(x=0X107508);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107510);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107514);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107518);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10751C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X107524);
	OpStkvar	(x,	1);
	MakeComm	(0X107534,	"openflags");
	MakeCode	(x=0X107534);
	OpStkvar	(x,	1);
	MakeComm	(0X10753C,	"attributes");
	MakeCode	(x=0X10753C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107548);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X107550,	"handle");
	MakeComm	(0X107554,	"out");
	MakeCode	(x=0X107554);
	OpStkvar	(x,	1);
	MakeComm	(0X10755C,	"handle");
	MakeCode	(x=0X10755C);
	OpStkvar	(x,	1);
	MakeDword	(x=0X107574);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X107578);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X10757C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X107580);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X107580,	"call_plugin_callback");
	MakeCode	(x=0X1075A0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X1075B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1075B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1075BC);
	MakeCode	(0X1075D8);
	MakeCode	(x=0X1075DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X107608);
	MakeDword	(x=0X107610);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X107614);
	MakeCode	(x=0X10768C);
	OpHex		(x,	1);
	MakeCode	(x=0X107698);
	OpHex		(x,	1);
	MakeCode	(0X1076E8);
	MakeCode	(0X107710);
	MakeCode	(0X107718);
	MakeCode	(x=0X107728);
	OpHex		(x,	1);
	MakeCode	(0X10774C);
	MakeCode	(0X10776C);
	MakeCode	(0X10777C);
	MakeCode	(0X10778C);
	MakeCode	(0X107794);
	MakeCode	(0X1077A4);
	MakeCode	(x=0X1077C4);
	OpHex		(x,	1);
	MakeCode	(x=0X1077E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1077E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1077F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1077F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10781C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107844);
	OpHex		(x,	1);
	MakeCode	(x=0X107848);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107860);
	OpHex		(x,	1);
	MakeCode	(x=0X10786C);
	OpHex		(x,	1);
	MakeCode	(0X107894);
	MakeCode	(x=0X10789C);
	OpStkvar	(x,	1);
	MakeCode	(0X1078C8);
	MakeCode	(0X1078D0);
	MakeCode	(x=0X1078D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1078DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1078E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1078EC);
	OpStkvar	(x,	1);
	MakeCode	(0X1078F8);
	MakeName	(0X1078F8,	"xsprintf");
	MakeCode	(x=0X107900);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107904);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X107908);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107910);
	OpStkvar	(x,	1);
	MakeDword	(x=0X107938);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X10793C);
	MakeCode	(x=0X107944);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107948);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X10794C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107958);
	OpStkvar	(x,	1);
	MakeDword	(x=0X107974);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X107978);
	MakeName	(0X107978,	"printf_hexnum");
	MakeCode	(x=0X107984);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1079B8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1079C8);
	MakeCode	(x=0X1079FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X107A14);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X107A34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X107A38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X107A3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X107A40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X107A44);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X107A80);
	MakeCode	(0X107AB0);
	MakeCode	(0X107AD4);
	MakeCode	(0X107AEC);
	MakeDword	(x=0X107AF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X107AF8);
	MakeCode	(x=0X107AFC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X107B1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X107B20);
	MakeDword	(0X107B24);
	MakeCode	(0X107B28);
	MakeCode	(0X107B98);
	MakeCode	(0X107BAC);
	MakeCode	(0X107BCC);
	MakeCode	(0X107C34);
	MakeCode	(0X107C48);
	MakeName	(0X107C48,	"memcpy");
	MakeCode	(x=0X107C58);
	OpHex		(x,	1);
	MakeCode	(x=0X107CA4);
	OpHex		(x,	1);
	MakeCode	(x=0X107CA8);
	OpHex		(x,	1);
	MakeCode	(x=0X107CE4);
	OpHex		(x,	1);
	MakeCode	(x=0X107CF4);
	OpHex		(x,	1);
	MakeCode	(0X107CFC);
	MakeCode	(0X107D28);
	MakeCode	(0X107D30);
	MakeCode	(x=0X107D38);
	OpHex		(x,	1);
	MakeName	(0X107D38,	"memset");
	MakeCode	(x=0X107D50);
	OpHex		(x,	1);
	MakeCode	(0X107D5C);
	MakeCode	(x=0X107D6C);
	OpHex		(x,	1);
	MakeCode	(x=0X107D7C);
	OpHex		(x,	1);
	MakeCode	(x=0X107DBC);
	OpHex		(x,	1);
	MakeCode	(x=0X107DC0);
	OpHex		(x,	1);
	MakeCode	(x=0X107DF0);
	OpHex		(x,	1);
	MakeCode	(x=0X107DFC);
	OpHex		(x,	1);
	MakeCode	(x=0X107E08);
	OpHex		(x,	1);
	MakeCode	(0X107E24);
	MakeCode	(x=0X107E2C);
	OpHex		(x,	1);
	MakeName	(0X107E2C,	"strcat");
	MakeDword	(0X107EA8);
	MakeDword	(0X107EAC);
	MakeCode	(0X107EB0);
	MakeName	(0X107EB0,	"strcmp");
	MakeCode	(x=0X107EB4);
	OpHex		(x,	1);
	MakeCode	(x=0X107EBC);
	OpHex		(x,	1);
	MakeCode	(x=0X107EC0);
	OpHex		(x,	1);
	MakeCode	(x=0X107EC4);
	OpHex		(x,	1);
	MakeCode	(x=0X107ED4);
	OpHex		(x,	1);
	MakeCode	(x=0X107EF0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107F34);
	OpHex		(x,	1);
	MakeCode	(x=0X107F3C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X107F44);
	OpHex		(x,	1);
	MakeCode	(0X107F68);
	MakeCode	(x=0X107F7C);
	OpHex		(x,	1);
	MakeCode	(x=0X107F80);
	OpHex		(x,	1);
	MakeCode	(x=0X107F94);
	OpHex		(x,	1);
	MakeCode	(0X107FC8);
	MakeCode	(x=0X107FD0);
	OpHex		(x,	1);
	MakeCode	(0X107FE4);
	MakeCode	(x=0X107FE8);
	OpHex		(x,	1);
	MakeCode	(0X107FF0);
	MakeCode	(0X108028);
	MakeCode	(0X10803C);
	MakeCode	(x=0X10804C);
	OpHex		(x,	1);
	MakeCode	(0X108080);
	MakeCode	(x=0X108088);
	OpHex		(x,	1);
	MakeCode	(x=0X108098);
	OpHex		(x,	1);
	MakeCode	(0X1080A0);
	MakeCode	(x=0X1080AC);
	OpHex		(x,	1);
	MakeCode	(x=0X1080B0);
	OpHex		(x,	1);
	MakeCode	(0X1080D4);
	MakeName	(0X1080D4,	"strncpy");
	MakeCode	(x=0X1080DC);
	OpHex		(x,	1);
	MakeCode	(x=0X1080E4);
	OpHex		(x,	1);
	MakeCode	(x=0X1080EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1080FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X108100);
	OpHex		(x,	1);
	MakeCode	(x=0X10815C);
	OpHex		(x,	1);
	MakeCode	(x=0X108168);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10816C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X108174);
	OpHex		(x,	1);
	MakeCode	(x=0X10818C);
	OpHex		(x,	1);
	MakeCode	(x=0X108198);
	OpHex		(x,	1);
	MakeCode	(x=0X1081A4);
	OpHex		(x,	1);
	MakeCode	(0X1081B0);
	MakeCode	(x=0X1081C4);
	OpHex		(x,	1);
	MakeName	(0X1081C4,	"strlen");
	MakeCode	(x=0X1081C8);
	OpHex		(x,	1);
	MakeCode	(x=0X108208);
	OpHex		(x,	1);
	MakeCode	(x=0X108210);
	OpHex		(x,	1);
	MakeCode	(x=0X108218);
	OpHex		(x,	1);
	MakeCode	(0X108224);
	MakeName	(0X108224,	"__udivsi3");
	MakeCode	(x=0X108240);
	OpHex		(x,	1);
	MakeCode	(0X1082C4);
	MakeCode	(0X1082D0);
	MakeCode	(0X10830C);
	MakeCode	(0X108318);
	MakeName	(0X108318,	"__aeabi_uidivmod");
	MakeCode	(0X108338);
	MakeDword	(0X10833C);
	MakeName	(0X10833C,	"pid_of_home_menu");
	MakeDword	(0X108340);
	MakeName	(0X108340,	"va_mapped_io_LCD");
	MakeDword	(0X108344);
	MakeName	(0X108344,	"pid_of_process_manager");
	MakeDword	(0X108348);
	MakeName	(0X108348,	"va_mapped_io_PDC");
	MakeDword	(0X10834C);
	MakeName	(0X10834C,	"va_mapped_io_PAD");
	MakeDword	(0X108350);
	MakeDword	(0X108354);
	MakeDword	(0X108358);
	MakeName	(0X108358,	"p_plgloader_info_ver_specific");
	MakeDword	(0X10835C);
	MakeName	(0X10835C,	"plgloader_info");
	MakeDword	(0X108360);
	MakeName	(0X108360,	"hCurKProcess");
	MakeDword	(0X108364);
	MakeDword	(0X108368);
	MakeDword	(0X10836C);
	MakeDword	(0X108370);
	MakeDword	(0X108374);
	MakeDword	(0X108378);
	MakeDword	(0X10837C);
	MakeName	(0X10837C,	"va_arm11_kernel_base_W");
	MakeDword	(0X108380);
	MakeName	(0X108380,	"offs_to_SVC_6D");
	MakeDword	(x=0X108384);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X108384,	"p_cb");
	MakeDword	(0X108388);
	MakeName	(0X108388,	"va_arm11_kernel_base_X");
	MakeDword	(0X10838C);
	MakeName	(0X10838C,	"offs_KProcessHandleTable");
	MakeDword	(0X108390);
	MakeName	(0X108390,	"some_offs_0");
	MakeDword	(0X108394);
	MakeName	(0X108394,	"offs_KCodeSet");
	MakeDword	(0X108398);
	MakeArray	(0X108398,	0X24);
	MakeName	(0X108398,	"pa_N3DS");
	MakeDword	(x=0X108428);
	MakeArray	(x,	0X374);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X108428,	"offsets_start");
	MakeStr		(0X1091F8,	0X109209);
	MakeName	(0X1091F8,	"offsets_end");
	MakeDword	(0X10920C);
	MakeDword	(0X109210);
	MakeDword	(0X109214);
	MakeDword	(0X109218);
	MakeDword	(0X10921C);
	MakeDword	(0X109220);
	MakeArray	(0X109220,	0X2);
	MakeDword	(0X109228);
	MakeArray	(0X109228,	0X2);
	MakeDword	(0X109230);
	MakeArray	(0X109230,	0X2);
	MakeDword	(0X109238);
	MakeArray	(0X109238,	0X4);
	MakeDword	(0X109248);
	MakeArray	(0X109248,	0X4);
	MakeDword	(0X109258);
	MakeArray	(0X109258,	0X4);
	MakeDword	(0X109268);
	MakeStr		(0X10926D,	0X10927A);
	MakeName	(0X10926D,	"a__text_start");
	MakeStr		(0X10927A,	0X109285);
	MakeName	(0X10927A,	"a__code_end");
	MakeStr		(0X109285,	0X10928D);
	MakeName	(0X109285,	"a__end__");
	MakeDword	(0X109290);
	MakeDword	(0X109294);
	MakeDword	(0X109298);
	MakeDword	(0X10929C);
	MakeDword	(0X1092A0);
	MakeDword	(0X1092A4);
	MakeDword	(0X1092A8);
	MakeDword	(0X1092AC);
	MakeDword	(0X1092B0);
	MakeDword	(0X1092B4);
	MakeDword	(0X1092B8);
	MakeDword	(0X1092BC);
	MakeArray	(0X1092BC,	0X200);
	MakeName	(0X1092BC,	"font");
	MakeCode	(0X109ABC);
	MakeName	(0X109ABC,	"dumpCmd");
	MakeCode	(x=0X109ACC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X109AD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeDword	(x=0X109AE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X109AEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X109AF0);
	MakeArray	(0X109AF0,	0X4D);
	MakeName	(0X109AF0,	"socketNetErrorCodeMap");
	MakeStr		(0X109B3D,	0X109B42);
	MakeName	(0X109B3D,	"aAcU");
	MakeStr		(0X109B42,	0X109B51);
	MakeName	(0X109B42,	"aPatchingSmdh");
	MakeStr		(0X109B51,	0X109B61);
	MakeName	(0X109B51,	"aFatal_Lr08x");
	MakeStr		(0X109B61,	0X109B87);
	MakeName	(0X109B61,	"aFsuser_opendir");
	MakeStr		(0X109B87,	0X109B96);
	MakeName	(0X109B87,	"aNoFileFound_");
	MakeStr		(0X109B96,	0X109B9B);
	MakeName	(0X109B96,	"aSS");
	MakeStr		(0X109B9B,	0X109BB8);
	MakeName	(0X109B9B,	"aOpenarchiveFai");
	MakeStr		(0X109BB8,	0X109BBA);
	MakeStr		(0X109BBA,	0X109BCC);
	MakeName	(0X109BBA,	"aOpenFailed08x");
	MakeStr		(0X109BCC,	0X109BE3);
	MakeName	(0X109BCC,	"aInitCfgMemoryF");
	MakeStr		(0X109BE3,	0X109BFE);
	MakeName	(0X109BE3,	"aFirmVersionNot");
	MakeStr		(0X109BFE,	0X109C1D);
	MakeName	(0X109BFE,	"aHomemenuVersio");
	MakeStr		(0X109C1D,	0X109C3C);
	MakeName	(0X109C1D,	"aFirmwareVersio");
	MakeStr		(0X109C3C,	0X109C46);
	MakeName	(0X109C3C,	"aPid0_dmp");
	MakeStr		(0X109C46,	0X109C50);
	MakeName	(0X109C46,	"aPid2_dmp");
	MakeStr		(0X109C50,	0X109C5A);
	MakeName	(0X109C50,	"aPid3_dmp");
	MakeStr		(0X109C5A,	0X109C64);
	MakeName	(0X109C5A,	"aPidf_dmp");
	MakeStr		(0X109C64,	0X109C71);
	MakeName	(0X109C64,	"aAxiwram_dmp");
	MakeStr		(0X109C71,	0X109CBD);
	MakeName	(0X109C71,	"aCurrentFirmwar");
	MakeStr		(0X109CBD,	0X109CCC);
	MakeName	(0X109CBD,	"aKernelhaxDone");
	MakeStr		(0X109CCC,	0X109CDD);
	MakeName	(0X109CCC,	"aHomemenuVerD");
	MakeStr		(0X109CDD,	0X109CFC);
	MakeName	(0X109CDD,	"aSendRemainSize");
	MakeStr		(0X109CFC,	0X109D1B);
	MakeName	(0X109CFC,	"aRecvRemainSize");
	MakeStr		(0X109D1B,	0X109D31);
	MakeName	(0X109D1B,	"aOpenfileFailed");
	MakeStr		(0X109D31,	0X109D4B);
	MakeName	(0X109D31,	"aSavedToSSucces");
	MakeStr		(0X109D4B,	0X109D62);
	MakeName	(0X109D4B,	"aBpDAlreadyEnab");
	MakeStr		(0X109D62,	0X109D71);
	MakeName	(0X109D62,	"aBpDEnabled");
	MakeStr		(0X109D71,	0X109D89);
	MakeName	(0X109D71,	"aBpDAlreadyDisa");
	MakeStr		(0X109D89,	0X109D99);
	MakeName	(0X109D89,	"aBpDDisabled");
	MakeStr		(0X109D99,	0X109DCD);
	MakeName	(0X109D99,	"aRtcheckremotem");
	MakeStr		(0X109DCD,	0X109DF2);
	MakeName	(0X109DCD,	"aCodeBreakpoint");
	MakeStr		(0X109DF2,	0X109E0B);
	MakeName	(0X109DF2,	"aInitBreakpoint");
	MakeStr		(0X109E0B,	0X109E20);
	MakeName	(0X109E0B,	"aOpenprocessFai");
	MakeStr		(0X109E20,	0X109E32);
	MakeName	(0X109E20,	"aH08xP08x");
	MakeStr		(0X109E32,	0X109E3E);
	MakeName	(0X109E32,	"aFreeidD");
	MakeStr		(0X109E3E,	0X109E4E);
	MakeName	(0X109E3E,	"aSetResumeFlag");
	MakeStr		(0X109E4E,	0X109E5C);
	MakeName	(0X109E4E,	"aInvalidBpid");
	MakeStr		(0X109E5C,	0X109E67);
	MakeName	(0X109E5C,	"aArm11_bin");
	MakeStr		(0X109E67,	0X109E83);
	MakeName	(0X109E67,	"aFsfile_getsi_0");
	MakeStr		(0X109E83,	0X109EA2);
	MakeName	(0X109E83,	"aSvc_controlmem");
	MakeStr		(0X109EA2,	0X109EBB);
	MakeName	(0X109EA2,	"aFsfile_readFai");
	MakeStr		(0X109EBB,	0X109ED6);
	MakeName	(0X109EBB,	"aProtectmemoryF");
	MakeStr		(0X109ED6,	0X109EF3);
	MakeName	(0X109ED6,	"aGetprocesslist");
	MakeStr		(0X109EF3,	0X109F10);
	MakeName	(0X109EF3,	"aGetprocessinfo");
	MakeStr		(0X109F10,	0X109F45);
	MakeName	(0X109F10,	"aPid0x08xPname8");
	MakeStr		(0X109F45,	0X109F5B);
	MakeName	(0X109F45,	"aEndOfProcessLi");
	MakeStr		(0X109F5B,	0X109F75);
	MakeName	(0X109F5B,	"aOpenprocessF_0");
	MakeStr		(0X109F75,	0X109F88);
	MakeName	(0X109F75,	"aValidMemregion");
	MakeStr		(0X109F88,	0X109FA2);
	MakeName	(0X109F88,	"a08x08xSize08x");
	MakeStr		(0X109FA2,	0X109FB5);
	MakeName	(0X109FA2,	"aEndOfMemlayout");
	MakeStr		(0X109FB5,	0X109FDA);
	MakeName	(0X109FB5,	"aOpenprocessF_1");
	MakeStr		(0X109FDA,	0X10A00E);
	MakeName	(0X109FDA,	"aRtcheckremot_0");
	MakeStr		(0X10A00E,	0X10A039);
	MakeName	(0X10A00E,	"aCopyremotememo");
	MakeStr		(0X10A039,	0X10A042);
	MakeName	(0X10A039,	"aFinished");
	MakeStr		(0X10A042,	0X10A05E);
	MakeName	(0X10A042,	"aGetthreadlistF");
	MakeStr		(0X10A05E,	0X10A06D);
	MakeName	(0X10A05E,	"aRecommendPc");
	MakeStr		(0X10A06D,	0X10A07C);
	MakeName	(0X10A06D,	"aRecommendLr");
	MakeStr		(0X10A07C,	0X10A089);
	MakeName	(0X10A07C,	"aTid0x08x");
	MakeStr		(0X10A089,	0X10A09D);
	MakeName	(0X10A089,	"aPc08xLr08x");
	MakeStr		(0X10A09D,	0X10A0B4);
	MakeName	(0X10A09D,	"aBuf08xSize08x");
	MakeStr		(0X10A0B4,	0X10A0C6);
	MakeName	(0X10A0B4,	"aArm11NotLoaded");
	MakeStr		(0X10A0C6,	0X10A0E4);
	MakeName	(0X10A0C6,	"aMapremotememor");
	MakeStr		(0X10A0E4,	0X10A106);
	MakeName	(0X10A0E4,	"aProtectremotem");
	MakeStr		(0X10A106,	0X10A128);
	MakeName	(0X10A106,	"aCopyremoteme_0");
	MakeStr		(0X10A128,	0X10A138);
	MakeName	(0X10A128,	"aRemotepc08x");
	MakeStr		(0X10A138,	0X10A15A);
	MakeName	(0X10A138,	"aCopyremoteme_1");
	MakeStr		(0X10A15A,	0X10A17C);
	MakeName	(0X10A15A,	"aCopyremoteme_2");
	MakeStr		(0X10A17C,	0X10A19E);
	MakeName	(0X10A17C,	"aCopyremoteme_3");
	MakeStr		(0X10A19E,	0X10A1B7);
	MakeName	(0X10A19E,	"aWillListenAtPortD");
	MakeStr		(0X10A1B7,	0X10A1C2);
	MakeName	(0X10A1B7,	"aCpsr08x");
	MakeStr		(0X10A1C2,	0X10A1D3);
	MakeName	(0X10A1C2,	"aLr08xSp08x");
	MakeStr		(0X10A1D3,	0X10A1DD);
	MakeName	(0X10A1D3,	"aRD08x");
	MakeStr		(0X10A1DD,	0X10A1F0);
	MakeName	(0X10A1DD,	"aBreakpointDHit");
	MakeStr		(0X10A1F0,	0X10A1F6);
	MakeName	(0X10A1F0,	"aHello");
	MakeStr		(0X10A1F6,	0X10A208);
	MakeName	(0X10A1F6,	"aBindFailed08x");
	MakeStr		(0X10A208,	0X10A21C);
	MakeName	(0X10A208,	"aListenFailed08");
	MakeStr		(0X10A21C,	0X10A236);
	MakeName	(0X10A21C,	"aRtrecvsocketFa");
	MakeStr		(0X10A236,	0X10A252);
	MakeName	(0X10A236,	"aBrokenProtocol");
	MakeStr		(0X10A252,	0X10A285);
	MakeName	(0X10A252,	"aRtcheckremot_1");
	MakeStr		(0X10A285,	0X10A2A1);
	MakeName	(0X10A285,	"aSoc_initialize");
	MakeStr		(0X10A2A1,	0X10A2BF);
	MakeName	(0X10A2A1,	"aSvc_createthre");
	MakeStr		(0X10A2BF,	0X10A2C7);
	MakeName	(0X10A2BF,	"aFsUser");
	MakeStr		(0X10A2C7,	0X10A2D7);
	MakeName	(0X10A2C7,	"aProcessManager");
	MakeStr		(0X10A2D7,	0X10A2DF);
	MakeName	(0X10A2D7,	"aPlugins");
	MakeStr		(0X10A2DF,	0X10A2EB);
	MakeName	(0X10A2DF,	"aNtrCfw2_0");
	MakeStr		(0X10A2EB,	0X10A30F);
	MakeName	(0X10A2EB,	"aExpandPoolAddr");
	MakeStr		(0X10A30F,	0X10A32E);
	MakeName	(0X10A30F,	"aAllocPlgMemory");
	MakeStr		(0X10A32E,	0X10A335);
	MakeName	(0X10A32E,	"aFsReg");
	MakeStr		(0X10A335,	0X10A355);
	MakeName	(0X10A335,	"aFsuser_initial");
	MakeStr		(0X10A355,	0X10A369);
	MakeName	(0X10A355,	"aFsuserhandle08");
	MakeStr		(0X10A369,	0X10A389);
	MakeName	(0X10A369,	"aOpenMenuProces");
	MakeStr		(0X10A389,	0X10A39C);
	MakeName	(0X10A389,	"aHmenuprocess08");
	MakeStr		(0X10A39C,	0X10A3B6);
	MakeName	(0X10A39C,	"aLoadPlginfoFai");
	MakeStr		(0X10A3B6,	0X10A3C9);
	MakeName	(0X10A3B6,	"aProctid08x08x");
	MakeStr		(0X10A3C9,	0X10A3D7);
	MakeName	(0X10A3C9,	"aTidMismatch");
	MakeStr		(0X10A3D7,	0X10A3F9);
	MakeName	(0X10A3D7,	"aAllocPluginMem");
	MakeStr		(0X10A3F9,	0X10A40B);
	MakeName	(0X10A3F9,	"aRwxFailed08x");
	MakeStr		(0X10A40B,	0X10A426);
	MakeName	(0X10A40B,	"aCopyPlginfoFai");
	MakeStr		(0X10A426,	0X10A43D);
	MakeName	(0X10A426,	"aLoadPlgFailed0");
	MakeStr		(0X10A43D,	0X10A45A);
	MakeName	(0X10A43D,	"aAttachProcessF");
	MakeStr		(0X10A45A,	0X10A47C);
	MakeName	(0X10A45A,	"aRunappletTid00");
	MakeStr		(0X10A47C,	0X10A487);
	MakeName	(0X10A47C,	"aPluginS");
	MakeStr		(0X10A487,	0X10A48D);
	MakeName	(0X10A487,	"aSS_0");
	MakeStr		(0X10A48D,	0X10A4B9);
	MakeName	(0X10A48D,	"aLoadingPluginS");
	MakeStr		(0X10A4B9,	0X10A4D5);
	MakeName	(0X10A4B9,	"aAllocPluginM_0");
	MakeStr		(0X10A4D5,	0X10A4F0);
	MakeName	(0X10A4D5,	"aRtloadfiletobu");
	MakeStr		(0X10A4F0,	0X10A50B);
	MakeName	(0X10A4F0,	"aStartingApplet");
	MakeStr		(0X10A50B,	0X10A510);
	MakeName	(0X10A50B,	"aGame");
	MakeStr		(0X10A510,	0X10A519);
	MakeName	(0X10A510,	"a08x08x");
	MakeStr		(0X10A519,	0X10A524);
	MakeName	(0X10A519,	"aPlg08x");
	MakeStr		(0X10A524,	0X10A545);
	MakeName	(0X10A524,	"aFsuser_openarc");
	MakeStr		(0X10A545,	0X10A54E);
	MakeName	(0X10A545,	"aNtr_bin");
	MakeStr		(0X10A54E,	0X10A564);
	MakeName	(0X10A54E,	"aArm11BinSize08");
	MakeStr		(0X10A564,	0X10A586);
	MakeName	(0X10A564,	"aAllocMemoryFor");
	MakeStr		(0X10A586,	0X10A59C);
	MakeName	(0X10A586,	"aLoadArm11binFa");
	MakeStr		(0X10A59C,	0X10A5A1);
	MakeName	(0X10A59C,	"aHome");
	MakeStr		(0X10A5A1,	0X10A5BF);
	MakeName	(0X10A5A1,	"aOpenprocessF_2");
	MakeStr		(0X10A5BF,	0X10A5D9);
	MakeName	(0X10A5BF,	"aOutaddr08xAddr");
	MakeStr		(0X10A5D9,	0X10A602);
	MakeName	(0X10A5D9,	"aSvc_flushproce");
	MakeStr		(0X10A602,	0X10A62B);
	MakeName	(0X10A602,	"aSvc_flushpro_0");
	MakeStr		(0X10A62B,	0X10A64A);
	MakeName	(0X10A62B,	"aReadremotememo");
	MakeStr		(0X10A64A,	0X10A663);
	MakeName	(0X10A64A,	"aOpenprocessF_3");
	MakeStr		(0X10A663,	0X10A67F);
	MakeName	(0X10A663,	"aDumpFinishedAt");
	MakeStr		(0X10A67F,	0X10A69D);
	MakeName	(0X10A67F,	"aReadremoteme_0");
	MakeStr		(0X10A69D,	0X10A6A9);
	MakeName	(0X10A69D,	"aHfile08x");
	MakeStr		(0X10A6A9,	0X10A6C9);
	MakeName	(0X10A6A9,	"aDebugactivepro");
	MakeStr		(0X10A6C9,	0X10A6D6);
	MakeName	(0X10A6C9,	"aHdebug08x");
	MakeStr		(0X10A6D6,	0X10A6F9);
	MakeName	(0X10A6D6,	"aReadmemoryAddr");
	MakeStr		(0X10A6F9,	0X10A702);
	MakeName	(0X10A6F9,	"aDumpcode");
	MakeStr		(0X10A702,	0X10A70B);
	MakeName	(0X10A702,	"aTestpath");
	MakeStr		(0X10A70B,	0X10A714);
	MakeName	(0X10A70B,	"aOpenfile");
	MakeStr		(0X10A714,	0X10A725);
	MakeName	(0X10A714,	"aOpenFileFailed");
	MakeStr		(0X10A725,	0X10A73B);
	MakeName	(0X10A725,	"aPatchSmFailed0");
	MakeStr		(0X10A73B,	0X10A757);
	MakeName	(0X10A73B,	"aGetprocessli_0");
	MakeStr		(0X10A757,	0X10A763);
	MakeName	(0X10A757,	"aProcesslist");
	MakeStr		(0X10A763,	0X10A771);
	MakeName	(0X10A763,	"aDump_pid08x");
	MakeStr		(0X10A771,	0X10A77B);
	MakeName	(0X10A771,	"aPnameS");
	MakeStr		(0X10A77B,	0X10A780);
	MakeName	(0X10A77B,	"aDump");
	MakeStr		(0X10A780,	0X10A785);
	MakeName	(0X10A780,	"aInfo");
	MakeStr		(0X10A785,	0X10A79C);
	MakeName	(0X10A785,	"aOpenfileFail_0");
	MakeStr		(0X10A79C,	0X10A7B9);
	MakeName	(0X10A79C,	"aFsfile_getsize");
	MakeStr		(0X10A7B9,	0X10A7DF);
	MakeName	(0X10A7B9,	"aRtloadfileto_0");
	MakeStr		(0X10A7DF,	0X10A7F9);
	MakeName	(0X10A7DF,	"aFsfile_readF_0");
	MakeStr		(0X10A7F9,	0X10A812);
	MakeName	(0X10A7F9,	"aOpenthreadFail");
	MakeStr		(0X10A812,	0X10A820);
	MakeName	(0X10A812,	"aTop_04d_bmp");
	MakeStr		(0X10A820,	0X10A82E);
	MakeName	(0X10A820,	"aBot_04d_bmp");
	MakeStr		(0X10A82E,	0X10A841);
	MakeName	(0X10A82E,	"aOut_addr08x");
	MakeStr		(0X10A841,	0X10A861);
	MakeName	(0X10A841,	"aInitializingSc");
	MakeStr		(0X10A861,	0X10A871);
	MakeName	(0X10A861,	"aTakeScreenshot");
	MakeStr		(0X10A871,	0X10A882);
	MakeName	(0X10A871,	"aBmpIndexIsD");
	MakeStr		(0X10A882,	0X10A888);
	MakeName	(0X10A882,	"aSocU");
	MakeStr		(0X10A888,	0X10A88D);
	MakeName	(0X10A888,	"aSrv");
	MakeStr		(0X10A88D,	0X10A891);
	MakeStr		(0X10A891,	0X10A895);
	MakeStr		(0X10A895,	0X10A8AA);
	MakeName	(0X10A895,	"aHttp44670_orgN");
	MakeStr		(0X10A8AA,	0X10A8BE);
	MakeName	(0X10A8AA,	"aPressBToClose_");
	MakeStr		(0X10A8BE,	0X10A8C3);
	MakeName	(0X10A8BE,	"aDbg");
	MakeStr		(0X10A8C3,	0X10A8CA);
	MakeName	(0X10A8C3,	"a08lx");
	MakeStr		(0X10A8CA,	0X10A8D0);
	MakeName	(0X10A8CA,	"a02x");
	MakeStr		(0X10A8D0,	0X10A8D6);
	MakeName	(0X10A8D0,	"a04x");
	MakeStr		(0X10A8D6,	0X10A8DD);
	MakeName	(0X10A8D6,	"a08lx_0");
	MakeByte	(0X10A8DD);
	MakeArray	(0X10A8DD,	0X3);
	MakeDword	(0X10A8E0);
	MakeArray	(0X10A8E0,	0X11);
	MakeDword	(0X10A924);
	MakeName	(0X10A924,	"firmware_version_internal");
	MakeDword	(0X10A928);
	MakeName	(0X10A928,	"nintendo_home_version");
	MakeDword	(0X10A92C);
	MakeName	(0X10A92C,	"hFSUser");
	MakeDword	(0X10A930);
	MakeName	(0X10A930,	"install_state");
	MakeDword	(x=0X10A934);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X10A934,	"some_callback");
	MakeDword	(0X10A938);
	MakeArray	(0X10A938,	0X3);
	MakeName	(0X10A938,	"config_mem_offs_1000");
	MakeDword	(0X10A944);
	MakeName	(0X10A944,	"process_manager_patch_addr");
	MakeStruct	(0X10A948,	"RT_HOOK");
	MakeName	(0X10A948,	"rthook_return_C821180B");
	MakeDword	(0X10AA14);
	MakeName	(0X10AA14,	"nintendo_home_ptr_fsuser_handle");
	MakeStruct	(0X10AA18,	"RT_HOOK");
	MakeName	(0X10AA18,	"rthook_patch_smdh");
	MakeRptCmt	(0X10AAE4,	"nss:CardUpdateInitialize");
	MakeDword	(0X10AAE4);
	MakeName	(0X10AAE4,	"nintendo_home_nss_CardUpdateInitialize_addr");
	MakeComm	(0X10AAE8,	"called by nn::applet::CTR::detail::PrepareToStartApplication(nn::fs::TitleDataSpecifier const*, bool)");
	MakeDword	(0X10AAE8);
	MakeName	(0X10AAE8,	"nintendo_home_applet_start_hook_addr");
	MakeComm	(0X10AAEC,	"called by nn::fs::CTR::MPCore::detail::FileServerArchive::File::TryRead");
	MakeRptCmt	(0X10AAEC,	"FSFile:Read");
	MakeDword	(0X10AAEC);
	MakeName	(0X10AAEC,	"nintendo_home_FSFile_Read_addr");
	MakeDword	(0X10AAF0);
	MakeName	(0X10AAF0,	"nintendo_home_FlushDataCache_addr");
	MakeDword	(0X10AAF4);
	MakeDword	(0X10AAF8);
	MakeDword	(0X10AAFC);
	MakeDword	(0X10AB00);
	MakeName	(0X10AB00,	"p_config_memory");
	MakeDword	(0X10AB04);
	MakeDword	(0X10AB08);
	MakeName	(0X10AB08,	"num_total_plugins");
	MakeDword	(0X10AB0C);
	MakeName	(0X10AB0C,	"plgBufferPtr");
	MakeDword	(0X10AB10);
	MakeName	(0X10AB10,	"plgSize");
	MakeDword	(0X10AB14);
	MakeName	(0X10AB14,	"arm11BinStart");
	MakeDword	(0X10AB18);
	MakeName	(0X10AB18,	"arm11BinSize");
	MakeDword	(0X10AB1C);
	MakeDword	(0X10AB20);
	MakeArray	(0X10AB20,	0X24);
	MakeDword	(0X10ABB0);
	MakeArray	(0X10ABB0,	0X10);
	MakeDword	(0X10ABF0);
	MakeArray	(0X10ABF0,	0XBF);
	MakeName	(0X10ABF0,	"g_plugin_func_ptrs?");
	MakeCode	(0X10AEEC);
	MakeDword	(0X10AEF0);
	MakeName	(0X10AEF0,	"arm11BinEnd");
	MakeDword	(0X10AEF4);
	MakeArray	(0X10AEF4,	0X23);
	MakeName	(0X10AEF4,	"rthook_home_injection");
	MakeDword	(0X10AF80);
	MakeArray	(0X10AF80,	0X10);
	MakeDword	(0X10AFC0);
	MakeName	(0X10AFC0,	"some_filename?");
	MakeDword	(0X10AFC4);
	MakeDword	(0X10AFC8);
	MakeDword	(0X10AFCC);
	MakeArray	(0X10AFCC,	0X3);
	MakeDword	(0X10AFD8);
	MakeName	(0X10AFD8,	"p_plgloader_info");
	MakeDword	(0X10AFDC);
	MakeName	(0X10AFDC,	"arm11BinEnd2");
	MakeStruct	(0X10AFE0,	"RT_HOOK");
	MakeName	(0X10AFE0,	"rthook_applet_start");
	MakeDword	(0X10B0AC);
	MakeName	(0X10B0AC,	"cur_pid");
	MakeDword	(0X10B0B0);
	MakeName	(0X10B0B0,	"hProcess");
	MakeDword	(0X10B0B4);
	MakeName	(0X10B0B4,	"ntrScreenShotBuffer");
	MakeDword	(0X10B0B8);
	MakeName	(0X10B0B8,	"bmp_idx");
	MakeDword	(0X10B0BC);
	MakeName	(0X10B0BC,	"socketHandle");
	MakeDword	(0X10B0C0);
	MakeName	(0X10B0C0,	"socketErrno");
	MakeDword	(0X10B0C4);
	MakeName	(0X10B0C4,	"srcHandle");
	MakeDword	(0X10B0C8);
	MakeName	(0X10B0C8,	"g_arm11_cmd");
	MakeDword	(0X10B0CC);
	MakeName	(0X10B0CC,	"g_arm11_param1");
	MakeDword	(0X10B0D0);
	MakeName	(0X10B0D0,	"g_arm11_param2");
	MakeDword	(0X10B0D4);
	MakeArray	(0X10B0D4,	0X1D);
	MakeName	(0X10B0D4,	"g_arm11_param3");
	MakeDword	(0X10B148);
	MakeName	(0X10B148,	"is_NTR_OSD_requested");
	MakeDword	(0X10B14C);
	MakeArray	(0X10B14C,	0X3);
	MakeDword	(0X10B158);
	MakeDword	(0X10B15C);
	MakeDword	(0X10B160);
	MakeDword	(0X10B164);
	MakeDword	(0X10B168);
	MakeArray	(0X10B168,	0X6);
	MakeDword	(0X10B180);
	MakeDword	(x=0X10B184);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X10B188,	"will point to update_plugin_info");
	MakeDword	(x=0X10B188);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X10B188,	"cb_plugin_info");
}

static Functions_0(void) {

	MakeFunction    (0X100100,0X1001A4);
	SetFunctionFlags(0X100100,0x400);
	MakeNameEx(0X10014C, "fixup_reloc", SN_LOCAL);
	MakeFunction    (0X1001D0,0X1001FC);
	SetFunctionFlags(0X1001D0,0x400);
	SetType(0X1001D0, "void ntr2dPaintPixel(int x, int y, char r, char g, char b, int screen);");
	MakeFrame(0X1001D0, 0, 0, 0);
	MakeLocal(0X1001D0, 0X1001FC, "[bp+0]", "b");
	MakeLocal(0X1001D0, 0X1001FC, "[bp+0X4]", "screen");
	MakeFunction    (0X1001FC,0X100270);
	SetFunctionFlags(0X1001FC,0x404);
	SetType(0X1001FC, "void ntr2dPaintSquare(int x, int y, char r, char g, char b, int w, int h, int screen);");
	MakeFrame(0X1001FC, 0X30, 0, 0);
	MakeLocal(0X1001FC, 0X100270, "[bp-0X30]", "b");
	MakeLocal(0X1001FC, 0X100270, "[bp-0X2C]", "screen");
	MakeLocal(0X1001FC, 0X100270, "[bp+0X4]", "w");
	MakeLocal(0X1001FC, 0X100270, "[bp+0X8]", "h");
	MakeFunction    (0X100270,0X1002D8);
	SetFunctionFlags(0X100270,0x404);
	SetType(0X100270, "void ntr2dBlank(int x, int y, int xs, int ys);");
	MakeFrame(0X100270, 0X30, 0, 0);
	MakeLocal(0X100270, 0X1002D8, "[bp-0X28]", "h");
	MakeLocal(0X100270, 0X1002D8, "[bp-0X24]", "screen");
	MakeFunction    (0X1002DC,0X100374);
	SetFunctionFlags(0X1002DC,0x404);
	SetType(0X1002DC, "void ntr2dPaintLetter(char letter, int x, int y, char r, char g, char b, int screen);");
	MakeFrame(0X1002DC, 0X40, 0, 0);
	MakeLocal(0X1002DC, 0X100374, "[bp-0X40]", "b");
	MakeLocal(0X1002DC, 0X100374, "[bp-0X3C]", "screen");
	MakeLocal(0X1002DC, 0X100374, "[bp-0X34]", "g");
	MakeFunction    (0X100378,0X1003F8);
	SetFunctionFlags(0X100378,0x400);
	SetType(0X100378, "void ntr2dPaintWord(char *word, int x, int y, char r, char g, char b, int screen);");
	MakeFrame(0X100378, 0X40, 0, 0);
	MakeLocal(0X100378, 0X1003F8, "[bp-0X38]", "screen");
	MakeLocal(0X100378, 0X1003F8, "[bp+0]", "g");
	MakeLocal(0X100378, 0X1003F8, "[bp+0X4]", "b");
	MakeFunction    (0X1003F8,0X100480);
	SetFunctionFlags(0X1003F8,0x400);
	SetType(0X1003F8, "void ntr2dPrint(char *s, int x, int y, char r, char g, char b);");
	MakeFrame(0X1003F8, 0X30, 0, 0);
	MakeLocal(0X1003F8, 0X100480, "[bp-0X28]", "screen");
	MakeLocal(0X1003F8, 0X100480, "[bp+0]", "g");
	MakeLocal(0X1003F8, 0X100480, "[bp+0X4]", "b");
	MakeFunction    (0X100484,0X1004CC);
	SetFunctionFlags(0X100484,0x400);
	SetType(0X100484, "void ntr2dPrintU8(u8 sh, int x, int y, char r, char g, char b);");
	MakeFrame(0X100484, 0X20, 0, 0);
	MakeLocal(0X100484, 0X1004CC, "[bp-0X20]", "g");
	MakeLocal(0X100484, 0X1004CC, "[bp-0X1C]", "b");
	MakeLocal(0X100484, 0X1004CC, "[bp-0X14]", "s");
	MakeFunction    (0X1004CC,0X100518);
	SetFunctionFlags(0X1004CC,0x400);
	SetType(0X1004CC, "void ntr2dPrintU32(u32 sh, int x, int y, char r, char g, char b);");
	MakeFrame(0X1004CC, 0X30, 0, 0);
	MakeLocal(0X1004CC, 0X100518, "[bp-0X30]", "g");
	MakeLocal(0X1004CC, 0X100518, "[bp-0X2C]", "b");
	MakeLocal(0X1004CC, 0X100518, "[bp-0X24]", "s");
	MakeFunction    (0X100518,0X100564);
	SetFunctionFlags(0X100518,0x400);
	SetType(0X100518, "Result acuCmd1(Handle servhandle, u32 *ptr);");
	MakeFrame(0X100518, 0X18, 0, 0);
	MakeFunction    (0X100568,0X1005C0);
	SetFunctionFlags(0X100568,0x400);
	SetType(0X100568, "Result acuCmd26(Handle servhandle, u32 *ptr, u8 val);");
	MakeFrame(0X100568, 0X20, 0, 0);
	MakeFunction    (0X1005C8,0X100600);
	SetFunctionFlags(0X1005C8,0x400);
	SetType(0X1005C8, "Result acuGetWifiStatus(Handle servhandle, u32 *out);");
	MakeFrame(0X1005C8, 0X10, 0, 0);
	MakeFunction    (0X100600,0X100658);
	SetFunctionFlags(0X100600,0x400);
	SetType(0X100600, "Result acuWaitInternetConnection();");
	MakeFrame(0X100600, 0X10, 0, 0);
	MakeLocal(0X100600, 0X100658, "[bp-0X10]", "handle");
	MakeLocal(0X100600, 0X100658, "[bp-0XC]", "out");
	MakeFunction    (0X10065C,0X100680);
	SetFunctionFlags(0X10065C,0x400);
	SetType(0X10065C, "int __cdecl main(int argc, const char **argv, const char **envp);");
	MakeFunction    (0X10068C,0X1006BC);
	SetFunctionFlags(0X10068C,0x400);
	SetType(0X10068C, "Result __fastcall FSUSER_Initialize(Handle handle);");
	MakeFrame(0X10068C, 0X10, 0, 0);
	MakeFunction    (0X1006C0,0X10075C);
	SetFunctionFlags(0X1006C0,0x400);
	SetType(0X1006C0, "Result FSUSER_OpenFile(Handle handle, Handle *out, FS_archive archive, FS_path fileLowPath, u32 openflags, u32 attributes);");
	MakeFrame(0X1006C0, 0X20, 0, 0);
	MakeLocal(0X1006C0, 0X10075C, "[bp+0X1C]", "openflags");
	MakeLocal(0X1006C0, 0X10075C, "[bp+0X20]", "attributes");
	MakeLocal(0X1006C0, 0X10075C, "[bp+0X24]", "openFlags");
	MakeLocal(0X1006C0, 0X10075C, "[bp+0X28]", "unknown");
	MakeFunction    (0X100760,0X10081C);
	SetFunctionFlags(0X100760,0x400);
	SetType(0X100760, "Result FSUSER_OpenFileDirectly(Handle handle, Handle *out, FS_archive archive, FS_path fileLowPath, u32 openflags, u32 attributes);");
	MakeFrame(0X100760, 0X20, 0, 0);
	MakeLocal(0X100760, 0X10081C, "[bp+0X1C]", "openflags");
	MakeLocal(0X100760, 0X10081C, "[bp+0X20]", "attributes");
	MakeFunction    (0X100820,0X1008A0);
	SetFunctionFlags(0X100820,0x400);
	SetType(0X100820, "Result __fastcall FSUSER_OpenArchive(Handle handle, FS_archive *archive);");
	MakeFunction    (0X1008A4,0X10092C);
	SetFunctionFlags(0X1008A4,0x400);
	SetType(0X1008A4, "Result FSUSER_OpenDirectory(Handle handle, Handle *out, FS_archive archive, FS_path dirLowPath);");
	MakeFrame(0X1008A4, 0X20, 0, 0);
	MakeFunction    (0X100930,0X100980);
	SetFunctionFlags(0X100930,0x400);
	SetType(0X100930, "Result __fastcall FSUSER_CloseArchive(Handle handle, FS_archive *archive);");
	MakeFunction    (0X100984,0X1009B0);
	SetFunctionFlags(0X100984,0x400);
	SetType(0X100984, "Result FSFILE_Close(Handle handle);");
	MakeFrame(0X100984, 0X10, 0, 0);
	MakeFunction    (0X1009B4,0X100A1C);
	SetFunctionFlags(0X1009B4,0x400);
	SetType(0X1009B4, "Result FSFILE_Read(Handle handle, u32 *bytesRead, u64 offset, u32 *buffer, u32 size);");
	MakeFrame(0X1009B4, 0X20, 0, 0);
	MakeLocal(0X1009B4, 0X100A1C, "[bp+0]", "size");
	MakeFunction    (0X100A20,0X100A90);
	SetFunctionFlags(0X100A20,0x400);
	SetType(0X100A20, "Result FSFILE_Write(Handle handle, u32 *bytesWritten, u64 offset, u32 *buffer, u32 size, u32 flushFlags);");
	MakeFrame(0X100A20, 0X20, 0, 0);
	MakeLocal(0X100A20, 0X100A90, "[bp+0]", "buffer");
	MakeLocal(0X100A20, 0X100A90, "[bp+0X4]", "size");
	MakeLocal(0X100A20, 0X100A90, "[bp+0X8]", "flushFlags_r");
	MakeFunction    (0X100A94,0X100AD4);
	SetFunctionFlags(0X100A94,0x400);
	SetType(0X100A94, "Result FSFILE_GetSize(Handle handle, u64 *size);");
	MakeFrame(0X100A94, 0X10, 0, 0);
	MakeFunction    (0X100AD8,0X100B10);
	SetFunctionFlags(0X100AD8,0x400);
	SetType(0X100AD8, "Result __fastcall FSFILE_SetSize(Handle handle, u64 size);");
	MakeFrame(0X100AD8, 0X18, 0, 0);
	MakeFunction    (0X100B14,0X100B74);
	SetFunctionFlags(0X100B14,0x400);
	SetType(0X100B14, "Result __fastcall FSDIR_Read(Handle handle, u32 *entriesRead, u32 entrycount, u16 *buffer);");
	MakeFrame(0X100B14, 0X18, 0, 0);
	MakeFunction    (0X100B78,0X100BA4);
	SetFunctionFlags(0X100B78,0x400);
	SetType(0X100B78, "Result __fastcall FSDIR_Close(Handle handle);");
	MakeFrame(0X100B78, 0X10, 0, 0);
	MakeFunction    (0X100BA8,0X100BB0);
	SetFunctionFlags(0X100BA8,0x400);
	MakeFunction    (0X100BB4,0X100C08);
	SetFunctionFlags(0X100BB4,0x400);
	MakeFrame(0X100BB4, 0X18, 0, 0);
	MakeNameEx(0X100BFC, "invalid_smdh", SN_LOCAL);
	MakeFunction    (0X100C14,0X100C28);
	SetFunctionFlags(0X100C14,0x400);
	MakeFrame(0X100C14, 0X8, 0, 0);
	MakeFunction    (0X100C28,0X100C88);
	SetFunctionFlags(0X100C28,0x400);
	MakeFunction    (0X100CA8,0X100E28);
	SetFunctionFlags(0X100CA8,0x400);
	MakeFrame(0X100CA8, 0X18, 0, 0);
	MakeLocal(0X100CA8, 0X100E28, "[bp-0X18]", "size");
	MakeLocal(0X100CA8, 0X100E28, "[bp-0X10]", "dst_addr");
	MakeLocal(0X100CA8, 0X100E28, "[bp-0XC]", "hSrc");
	MakeFunction    (0X100E98,0X100EE4);
	SetFunctionFlags(0X100E98,0x400);
	MakeFrame(0X100E98, 0X18, 0, 0);
	MakeFunction    (0X100EEC,0X100F18);
	SetFunctionFlags(0X100EEC,0x401);
	MakeFrame(0X100EEC, 0X8, 0, 0);
	MakeFunction    (0X100F20,0X100F44);
	SetFunctionFlags(0X100F20,0x400);
	MakeFrame(0X100F20, 0X8, 0, 0);
	MakeFunction    (0X100F48,0X1010F0);
	SetFunctionFlags(0X100F48,0x400);
	MakeFrame(0X100F48, 0X6458, 0, 0);
	MakeLocal(0X100F48, 0X1010F0, "[bp-0X6434]", "out");
	MakeLocal(0X100F48, 0X1010F0, "[bp-0X6430]", "entriesRead");
	MakeLocal(0X100F48, 0X1010F0, "[bp-0X6420]", "buffer");
	MakeFunction    (0X101100,0X101198);
	SetFunctionFlags(0X101100,0x400);
	MakeFrame(0X101100, 0X100, 0, 0);
	MakeFunction    (0X1011AC,0X1011C4);
	SetFunctionFlags(0X1011AC,0x400);
	MakeFunction    (0X1011C8,0X101240);
	SetFunctionFlags(0X1011C8,0x400);
	SetType(0X1011C8, "int __cdecl set_KProcess_refcount_to_1(unsigned int pid);");
	MakeFrame(0X1011C8, 0X18, 0, 0);
	MakeLocal(0X1011C8, 0X101240, "[bp-0X18]", "handle");
	MakeFunction    (0X101244,0X101348);
	SetFunctionFlags(0X101244,0x401);
	MakeFrame(0X101244, 0X8, 0, 0);
	MakeNameEx(0X101318, "check_hotkey_loop", SN_LOCAL);
	MakeNameEx(0X101338, "skip_NTR_OSD", SN_LOCAL);
	MakeFunction    (0X101384,0X101400);
	SetFunctionFlags(0X101384,0x400);
	MakeFrame(0X101384, 0X20, 0, 0);
	MakeLocal(0X101384, 0X101400, "[bp-0X20]", "operation");
	MakeLocal(0X101384, 0X101400, "[bp-0X1C]", "permissions");
	MakeLocal(0X101384, 0X101400, "[bp-0X14]", "outaddr");
	MakeFunction    (0X101408,0X101488);
	SetFunctionFlags(0X101408,0x400);
	MakeFrame(0X101408, 0X248, 0, 0);
	MakeLocal(0X101408, 0X101488, "[bp-0X244]", "handle");
	MakeLocal(0X101408, 0X101488, "[bp-0X240]", "buf");
	MakeFunction    (0X10149C,0X1014BC);
	SetFunctionFlags(0X10149C,0x400);
	MakeFrame(0X10149C, 0X8, 0, 0);
	MakeFunction    (0X1014C0,0X1014E8);
	SetFunctionFlags(0X1014C0,0x400);
	MakeFrame(0X1014C0, 0X8, 0, 0);
	MakeFunction    (0X101504,0X101780);
	SetFunctionFlags(0X101504,0x400);
	SetType(0X101504, "int ntrInstall(void);");
	MakeFrame(0X101504, 0X28, 0, 0);
	MakeLocal(0X101504, 0X101780, "[bp-0X1C]", "thread");
	MakeNameEx(0X1015FC, "loop", SN_LOCAL);
	MakeNameEx(0X1016E4, "inject_code_into_nintendo_home", SN_LOCAL);
	MakeNameEx(0X101708, "dl_button_pressed", SN_LOCAL);
	MakeNameEx(0X10173C, "check_pm_pid", SN_LOCAL);
	MakeNameEx(0X101750, "not_process_manager", SN_LOCAL);
	MakeNameEx(0X101774, "leave_func", SN_LOCAL);
	MakeFunction    (0X1017F0,0X101800);
	SetFunctionFlags(0X1017F0,0x404);
	SetType(0X1017F0, "void ntrMemoryWriteColor(u32 address, u8 r, u8 g, u8 b);");
	MakeFunction    (0X101800,0X101808);
	SetFunctionFlags(0X101800,0x404);
	SetType(0X101800, "void ntrMemoryWriteByte(u32 address, u8 byte);");
	MakeFunction    (0X101808,0X10181C);
	SetFunctionFlags(0X101808,0x404);
	SetType(0X101808, "char ntrMemoryNibbleToReadable(u8 nibble);");
	MakeFunction    (0X10181C,0X101858);
	SetFunctionFlags(0X10181C,0x400);
	SetType(0X10181C, "u32 ntrMemoryByteToString(u8 byte, char *ret, int max_len);");
	MakeFunction    (0X101858,0X1018B0);
	SetFunctionFlags(0X101858,0x404);
	SetType(0X101858, "u32 ntrMemoryU32ToString(u32 byte, char *ret, int max_len);");
	MakeFunction    (0X1018B0,0X1018B8);
	SetFunctionFlags(0X1018B0,0x404);
	SetType(0X1018B0, "void __stdcall sleep(s64 ns);");
	MakeFunction    (0X1018B8,0X1018D0);
	SetFunctionFlags(0X1018B8,0x400);
	MakeFrame(0X1018B8, 0X28, 0, 0);
	MakeFunction    (0X1018D0,0X1018DC);
	SetFunctionFlags(0X1018D0,0x400);
	MakeFunction    (0X1018DC,0X1018E8);
	SetFunctionFlags(0X1018DC,0x400);
	MakeFunction    (0X1018F0,0X101920);
	SetFunctionFlags(0X1018F0,0x400);
	MakeFunction    (0X101924,0X101980);
	SetFunctionFlags(0X101924,0x400);
	MakeFrame(0X101924, 0X20, 0, 0);
	MakeLocal(0X101924, 0X101980, "[bp-0X10]", "varg_r0");
	MakeLocal(0X101924, 0X101980, "[bp-0XC]", "varg_r1");
	MakeLocal(0X101924, 0X101980, "[bp-0X8]", "varg_r2");
	MakeLocal(0X101924, 0X101980, "[bp-0X4]", "varg_r3");
	MakeFunction    (0X101984,0X1019A8);
	SetFunctionFlags(0X101984,0x400);
	MakeFunction    (0X1019AC,0X1019F8);
	SetFunctionFlags(0X1019AC,0x400);
	MakeFrame(0X1019AC, 0X8, 0, 0);
	MakeFunction    (0X101A00,0X101A4C);
	SetFunctionFlags(0X101A00,0x400);
	MakeFrame(0X101A00, 0X8, 0, 0);
	MakeFunction    (0X101A54,0X101B7C);
	SetFunctionFlags(0X101A54,0x410);
	MakeFrame(0X101A54, 0X260, 32, 0);
	MakeLocal(0X101A54, 0X101B7C, "[bp-0X244]", "openflags");
	MakeLocal(0X101A54, 0X101B7C, "[bp-0X240]", "attributes");
	MakeLocal(0X101A54, 0X101B7C, "[bp-0X234]", "out");
	MakeLocal(0X101A54, 0X101B7C, "[bp-0X230]", "bytesWritten");
	MakeFunction    (0X101B94,0X101BD0);
	SetFunctionFlags(0X101B94,0x400);
	MakeFunction    (0X101BD4,0X101C48);
	SetFunctionFlags(0X101BD4,0x400);
	MakeFrame(0X101BD4, 0X8, 0, 0);
	MakeFunction    (0X101C54,0X101CC8);
	SetFunctionFlags(0X101C54,0x400);
	MakeFrame(0X101C54, 0X8, 0, 0);
	MakeFunction    (0X101CD4,0X101DAC);
	SetFunctionFlags(0X101CD4,0x400);
	MakeFrame(0X101CD4, 0X20, 0, 0);
	MakeFunction    (0X101DB4,0X101EAC);
	SetFunctionFlags(0X101DB4,0x400);
	MakeFrame(0X101DB4, 0X20, 0, 0);
	MakeNameEx(0X101E40, "copy_dmp_cmd", SN_LOCAL);
	MakeFunction    (0X101EC0,0X101F50);
	SetFunctionFlags(0X101EC0,0x400);
	MakeFrame(0X101EC0, 0X10, 0, 0);
	MakeFunction    (0X101F5C,0X102020);
	SetFunctionFlags(0X101F5C,0x400);
	MakeFrame(0X101F5C, 0X658, 0, 0);
	MakeLocal(0X101F5C, 0X102020, "[bp-0X658]", "handle");
	MakeLocal(0X101F5C, 0X102020, "[bp-0X654]", "src");
	MakeNameEx(0X101FD0, "print_all_handles", SN_LOCAL);
	MakeFunction    (0X102034,0X1020FC);
	SetFunctionFlags(0X102034,0x400);
	MakeFrame(0X102034, 0X10, 0, 0);
	MakeFunction    (0X10210C,0X10226C);
	SetFunctionFlags(0X10210C,0x400);
	MakeFrame(0X10210C, 0X60, 0, 0);
	MakeLocal(0X10210C, 0X10226C, "[bp-0X44]", "openflags");
	MakeLocal(0X10210C, 0X10226C, "[bp-0X40]", "attributes");
	MakeLocal(0X10210C, 0X10226C, "[bp-0X34]", "outaddr");
	MakeLocal(0X10210C, 0X10226C, "[bp-0X30]", "out");
	MakeLocal(0X10210C, 0X10226C, "[bp-0X2C]", "bytesRead");
	MakeLocal(0X10210C, 0X10226C, "[bp-0X28]", "size");
	MakeFunction    (0X102298,0X102334);
	SetFunctionFlags(0X102298,0x400);
	MakeFrame(0X102298, 0X1D8, 0, 0);
	MakeLocal(0X102298, 0X102334, "[bp-0X1CC]", "processCount");
	MakeLocal(0X102298, 0X102334, "[bp-0X1A0]", "processIds");
	MakeFunction    (0X102344,0X102408);
	SetFunctionFlags(0X102344,0x400);
	MakeFrame(0X102344, 0X20, 0, 0);
	MakeLocal(0X102344, 0X102408, "[bp-0X1C]", "hKProcess");
	MakeFunction    (0X102420,0X102578);
	SetFunctionFlags(0X102420,0x400);
	MakeFrame(0X102420, 0X30, 0, 0);
	MakeLocal(0X102420, 0X102578, "[bp-0X30]", "size");
	MakeLocal(0X102420, 0X102578, "[bp-0X24]", "hProcess");
	MakeFunction    (0X102594,0X1026F0);
	SetFunctionFlags(0X102594,0x400);
	MakeFrame(0X102594, 0X30, 0, 0);
	MakeLocal(0X102594, 0X1026F0, "[bp-0X30]", "size");
	MakeLocal(0X102594, 0X1026F0, "[bp-0X24]", "hProcess");
	MakeFunction    (0X10270C,0X102894);
	SetFunctionFlags(0X10270C,0x400);
	MakeFrame(0X10270C, 0XB10, 0, 0);
	MakeLocal(0X10270C, 0X102894, "[bp-0XB08]", "threadIds");
	MakeFunction    (0X1028A4,0X1029C0);
	SetFunctionFlags(0X1028A4,0x400);
	MakeFrame(0X1028A4, 0X7F0, 0, 0);
	MakeLocal(0X1028A4, 0X1029C0, "[bp-0X7F0]", "hProcess");
	MakeFunction    (0X1029DC,0X102B80);
	SetFunctionFlags(0X1029DC,0x400);
	SetType(0X1029DC, "int __cdecl inject_ntr_into_remote_process(unsigned int handle, unsigned int addr_jmpcode, void *buf);");
	MakeFrame(0X1029DC, 0X78, 0, 0);
	MakeLocal(0X1029DC, 0X102B80, "[bp-0X78]", "size");
	MakeLocal(0X1029DC, 0X102B80, "[bp-0X70]", "src_addr");
	MakeFunction    (0X102BC0,0X102C60);
	SetFunctionFlags(0X102BC0,0x400);
	MakeFrame(0X102BC0, 0X250, 0, 0);
	MakeLocal(0X102BC0, 0X102C60, "[bp-0X24C]", "handle");
	MakeLocal(0X102BC0, 0X102C60, "[bp-0X248]", "buf");
	MakeFunction    (0X102C70,0X102CC4);
	SetFunctionFlags(0X102C70,0x400);
	MakeFrame(0X102C70, 0X10, 0, 0);
	MakeFunction    (0X102CD4,0X102D74);
	SetFunctionFlags(0X102CD4,0x400);
	MakeFrame(0X102CD4, 0X18, 0, 0);
	MakeFunction    (0X102D7C,0X102EA4);
	SetFunctionFlags(0X102D7C,0x400);
	MakeFrame(0X102D7C, 0X10, 0, 0);
	MakeFunction    (0X102EB0,0X102FEC);
	SetFunctionFlags(0X102EB0,0x400);
	MakeFrame(0X102EB0, 0X28, 0, 0);
	MakeNameEx(0X102F54, "good_magic_val", SN_LOCAL);
	MakeNameEx(0X102FCC, "recvd_54_bytes", SN_LOCAL);
	MakeFunction    (0X103008,0X103018);
	SetFunctionFlags(0X103008,0x401);
	MakeFrame(0X103008, 0X8, 0, 0);
	MakeFunction    (0X103018,0X103060);
	SetFunctionFlags(0X103018,0x400);
	MakeFrame(0X103018, 0X8, 0, 0);
	MakeFunction    (0X103070,0X103258);
	SetFunctionFlags(0X103070,0x400);
	MakeFrame(0X103070, 0X20, 0, 0);
	MakeLocal(0X103070, 0X103258, "[bp-0X18]", "outaddr");
	MakeLocal(0X103070, 0X103258, "[bp-0X14]", "thread");
	MakeNameEx(0X103204, "more_than_one_connection", SN_LOCAL);
	MakeFunction    (0X103284,0X1032C0);
	SetFunctionFlags(0X103284,0x404);
	SetType(0X103284, "u32 __fastcall osConvertVaddr2Physaddr(u32 vaddr);");
	MakeFunction    (0X1032C0,0X1032E0);
	SetFunctionFlags(0X1032C0,0x400);
	MakeFrame(0X1032C0, 0X10, 0, 0);
	MakeLocal(0X1032C0, 0X1032E0, "[bp-0XC]", "process");
	MakeFunction    (0X1032E0,0X1032E8);
	SetFunctionFlags(0X1032E0,0x404);
	MakeFunction    (0X1032E8,0X103360);
	SetFunctionFlags(0X1032E8,0x400);
	SetType(0X1032E8, "void *plgRequestMemory(u32 size);");
	MakeFrame(0X1032E8, 0X20, 0, 0);
	MakeLocal(0X1032E8, 0X103360, "[bp-0X14]", "outaddr");
	MakeFunction    (0X10336C,0X103398);
	SetFunctionFlags(0X10336C,0x400);
	MakeFrame(0X10336C, 0X8, 0, 0);
	MakeFunction    (0X1033A0,0X1033E0);
	SetFunctionFlags(0X1033A0,0x400);
	MakeFunction    (0X1033F0,0X1034C8);
	SetFunctionFlags(0X1033F0,0x400);
	MakeFrame(0X1033F0, 0X238, 0, 0);
	MakeFunction    (0X1034DC,0X10351C);
	SetFunctionFlags(0X1034DC,0x400);
	SetType(0X1034DC, "int __cdecl plgRegisterMenuEntry(unsigned int catalog, char *title, void *callback);");
	MakeFrame(0X1034DC, 0XC, 0, 0);
	MakeFunction    (0X103524,0X1035C8);
	SetFunctionFlags(0X103524,0x400);
	MakeFrame(0X103524, 0X28, 0, 0);
	MakeLocal(0X103524, 0X1035C8, "[bp-0X1C]", "outaddr");
	MakeFunction    (0X1035E0,0X103640);
	SetFunctionFlags(0X1035E0,0x400);
	MakeFrame(0X1035E0, 0X8, 0, 0);
	MakeFunction    (0X103654,0X1038B0);
	SetFunctionFlags(0X103654,0x400);
	MakeFrame(0X103654, 0X498, 0, 0);
	MakeLocal(0X103654, 0X1038B0, "[bp-0X498]", "size");
	MakeLocal(0X103654, 0X1038B0, "[bp-0X488]", "dst_addr");
	MakeLocal(0X103654, 0X1038B0, "[bp-0X260]", "buf");
	MakeFunction    (0X1038E8,0X10390C);
	SetFunctionFlags(0X1038E8,0);
	MakeFrame(0X1038E8, 0X10, 0, 0);
	MakeFunction    (0X103910,0X103968);
	SetFunctionFlags(0X103910,0x400);
	MakeFrame(0X103910, 0X18, 0, 0);
	MakeFunction    (0X103974,0X10399C);
	SetFunctionFlags(0X103974,0x400);
	MakeFrame(0X103974, 0X8, 0, 0);
	MakeFunction    (0X1039A8,0X103AA8);
	SetFunctionFlags(0X1039A8,0x400);
	MakeFrame(0X1039A8, 0X4A8, 0, 0);
	MakeLocal(0X1039A8, 0X103AA8, "[bp-0X484]", "out");
	MakeLocal(0X1039A8, 0X103AA8, "[bp-0X480]", "entriesRead");
	MakeFunction    (0X103AB4,0X103AEC);
	SetFunctionFlags(0X103AB4,0x400);
	MakeFunction    (0X103B00,0X103BF8);
	SetFunctionFlags(0X103B00,0x400);
	MakeFrame(0X103B00, 0X1228, 0, 0);
	MakeLocal(0X103B00, 0X103BF8, "[bp-0X10E0]", "fileName");
	MakeFunction    (0X103C14,0X103C94);
	SetFunctionFlags(0X103C14,0x400);
	MakeFrame(0X103C14, 0X30, 0, 0);
	MakeFunction    (0X103CA8,0X103D24);
	SetFunctionFlags(0X103CA8,0x400);
	MakeFrame(0X103CA8, 0X248, 0, 0);
	MakeLocal(0X103CA8, 0X103D24, "[bp-0X244]", "handle");
	MakeLocal(0X103CA8, 0X103D24, "[bp-0X240]", "buf");
	MakeFunction    (0X103D2C,0X103DB0);
	SetFunctionFlags(0X103D2C,0x400);
	MakeFrame(0X103D2C, 0X10, 0, 0);
	MakeFunction    (0X103DC4,0X103F14);
	SetFunctionFlags(0X103DC4,0x400);
	MakeFrame(0X103DC4, 0X18, 0, 0);
	MakeFunction    (0X103F58,0X103FB8);
	SetFunctionFlags(0X103F58,0x400);
	MakeFrame(0X103F58, 0X18, 0, 0);
	MakeFunction    (0X103FC8,0X103FE4);
	SetFunctionFlags(0X103FC8,0x400);
	SetType(0X103FC8, "u32 ntrGetCurrentProcessId();");
	MakeFrame(0X103FC8, 0X8, 0, 0);
	MakeFunction    (0X103FEC,0X104048);
	SetFunctionFlags(0X103FEC,0x400);
	SetType(0X103FEC, "u32 ntrGetCurrentProcessHandle();");
	MakeFrame(0X103FEC, 0X18, 0, 0);
	MakeLocal(0X103FEC, 0X104048, "[bp-0X14]", "process");
	MakeFunction    (0X104058,0X1040F0);
	SetFunctionFlags(0X104058,0x400);
	SetType(0X104058, "uint32_t __fastcall controlRemoteMemory(Handle hProcess, void *addr, uint32_t size);");
	MakeFrame(0X104058, 0X30, 0, 0);
	MakeFunction    (0X1040FC,0X104120);
	SetFunctionFlags(0X1040FC,0x400);
	SetType(0X1040FC, "u32 ntrProtectRemoteMemory(Handle hProcess, void *addr, u32 size);");
	MakeFrame(0X1040FC, 0X10, 0, 0);
	MakeFunction    (0X104120,0X104140);
	SetFunctionFlags(0X104120,0x400);
	SetType(0X104120, "u32 ntrProtectMemory(void *addr, u32 size);");
	MakeFrame(0X104120, 0X10, 0, 0);
	MakeFunction    (0X104140,0X104284);
	SetFunctionFlags(0X104140,0x400);
	SetType(0X104140, "int __fastcall inter_process_dma_copy(u32 hDst, void *dst_addr, u32 hSrc, const void *src_addr, u32 size);");
	MakeFrame(0X104140, 0X88, 0, 0);
	MakeLocal(0X104140, 0X104284, "[bp-0X88]", "src");
	MakeLocal(0X104140, 0X104284, "[bp-0X78]", "hdma");
	MakeLocal(0X104140, 0X104284, "[bp-0X74]", "state");
	MakeLocal(0X104140, 0X104284, "[bp+0]", "size");
	MakeFunction    (0X1042A4,0X1042F4);
	SetFunctionFlags(0X1042A4,0x400);
	SetType(0X1042A4, "int __cdecl sub_1042A4(unsigned int handle, void *buf);");
	MakeFrame(0X1042A4, 0X208, 0, 0);
	MakeLocal(0X1042A4, 0X1042F4, "[bp-0X108]", "dst");
	MakeFunction    (0X1042F8,0X1043B0);
	SetFunctionFlags(0X1042F8,0x400);
	MakeFrame(0X1042F8, 0X228, 0, 0);
	MakeLocal(0X1042F8, 0X1043B0, "[bp-0X224]", "handle");
	MakeLocal(0X1042F8, 0X1043B0, "[bp-0X220]", "dst");
	MakeFunction    (0X1043B8,0X10454C);
	SetFunctionFlags(0X1043B8,0x400);
	SetType(0X1043B8, "void __cdecl dumpProcessToFile(u32 processId, char *filename);");
	MakeFrame(0X1043B8, 0X1078, 0, 0);
	MakeLocal(0X1043B8, 0X10454C, "[bp-0X1078]", "size");
	MakeLocal(0X1043B8, 0X10454C, "[bp-0X105C]", "openflags");
	MakeLocal(0X1043B8, 0X10454C, "[bp-0X1058]", "attributes");
	MakeLocal(0X1043B8, 0X10454C, "[bp-0X1050]", "hKProcess");
	MakeLocal(0X1043B8, 0X10454C, "[bp-0X104C]", "out");
	MakeFunction    (0X104570,0X104708);
	SetFunctionFlags(0X104570,0x400);
	MakeFrame(0X104570, 0X1078, 0, 0);
	MakeLocal(0X104570, 0X104708, "[bp-0X1078]", "size");
	MakeLocal(0X104570, 0X104708, "[bp-0X1074]", "flushFlags");
	MakeLocal(0X104570, 0X104708, "[bp-0X105C]", "openflags");
	MakeLocal(0X104570, 0X104708, "[bp-0X1058]", "attributes");
	MakeLocal(0X104570, 0X104708, "[bp-0X1050]", "handle");
	MakeLocal(0X104570, 0X104708, "[bp-0X104C]", "out");
	MakeFunction    (0X104728,0X10486C);
	SetFunctionFlags(0X104728,0x400);
	SetType(0X104728, "s32 dumpMemoryToFile(u32 va_dumpaddr, u32 size, char *filename);");
	MakeFrame(0X104728, 0X1128, 0, 0);
	MakeLocal(0X104728, 0X10486C, "[bp-0X1128]", "size");
	MakeLocal(0X104728, 0X10486C, "[bp-0X110C]", "openflags");
	MakeLocal(0X104728, 0X10486C, "[bp-0X1108]", "attributes");
	MakeLocal(0X104728, 0X10486C, "[bp-0X1100]", "out");
	MakeLocal(0X104728, 0X10486C, "[bp-0X10FC]", "bytesWritten");
	MakeFunction    (0X10488C,0X104910);
	SetFunctionFlags(0X10488C,0x400);
	MakeFrame(0X10488C, 0X28, 0, 0);
	MakeLocal(0X10488C, 0X104910, "[bp-0X28]", "size");
	MakeLocal(0X10488C, 0X104910, "[bp-0X1C]", "hProcess");
	MakeNameEx(0X104908, "err", SN_LOCAL);
	MakeFunction    (0X104914,0X104958);
	SetFunctionFlags(0X104914,0x400);
	MakeFrame(0X104914, 0X58, 0, 0);
	MakeNameEx(0X104950, "patch_success", SN_LOCAL);
	MakeFunction    (0X104968,0X104AB4);
	SetFunctionFlags(0X104968,0x400);
	MakeFrame(0X104968, 0X6C0, 0, 0);
	MakeLocal(0X104968, 0X104AB4, "[bp-0X68C]", "a1");
	MakeLocal(0X104968, 0X104AB4, "[bp-0X658]", "processIds");
	MakeFunction    (0X104ACC,0X104AD8);
	SetFunctionFlags(0X104ACC,0x404);
	SetType(0X104ACC, "int __cdecl rtInitLock(RT_LOCK *lock);");
	MakeFunction    (0X104AD8,0X104B08);
	SetFunctionFlags(0X104AD8,0x400);
	SetType(0X104AD8, "int __cdecl rtAcquireLock(RT_LOCK *lock);");
	MakeFrame(0X104AD8, 0X8, 0, 0);
	MakeFunction    (0X104B0C,0X104B18);
	SetFunctionFlags(0X104B0C,0x400);
	SetType(0X104B0C, "int __cdecl rtReleaseLock(RT_LOCK *lock);");
	MakeFunction    (0X104B18,0X104B30);
	SetFunctionFlags(0X104B18,0x400);
	SetType(0X104B18, "uint32_t __fastcall rtAlignToPageSize(uint32_t size);");
	MakeFunction    (0X104B30,0X104B3C);
	SetFunctionFlags(0X104B30,0x404);
	SetType(0X104B30, "uint32_t __fastcall rtGetPageOfAddress(uint32_t addr);");
	MakeFunction    (0X104B3C,0X104B8C);
	SetFunctionFlags(0X104B3C,0x400);
	SetType(0X104B3C, "uint32_t __fastcall rtCheckRemoteMemoryRegionSafeForWrite(Handle hProcess, uint32_t addr, uint32_t size);");
	MakeFrame(0X104B3C, 0X10, 0, 0);
	MakeFunction    (0X104B8C,0X104BE0);
	SetFunctionFlags(0X104B8C,0x400);
	SetType(0X104B8C, "uint32_t __fastcall rtSafeCopyMemory(uint32_t dst, uint32_t src, uint32_t size);");
	MakeFrame(0X104B8C, 0X18, 0, 0);
	MakeFunction    (0X104BE4,0X104C40);
	SetFunctionFlags(0X104BE4,0x400);
	MakeFrame(0X104BE4, 0X18, 0, 0);
	MakeFunction    (0X104C40,0X104C98);
	SetFunctionFlags(0X104C40,0x400);
	MakeFrame(0X104C40, 0X18, 0, 0);
	MakeFunction    (0X104C98,0X104CB4);
	SetFunctionFlags(0X104C98,0x400);
	MakeFrame(0X104C98, 0X8, 0, 0);
	MakeFunction    (0X104CB4,0X104D90);
	SetFunctionFlags(0X104CB4,0x400);
	SetType(0X104CB4, "uint32_t __fastcall rtGetFileSize(uint8_t *fileName);");
	MakeFrame(0X104CB4, 0X60, 0, 0);
	MakeLocal(0X104CB4, 0X104D90, "[bp-0X44]", "openflags");
	MakeLocal(0X104CB4, 0X104D90, "[bp-0X40]", "attributes");
	MakeLocal(0X104CB4, 0X104D90, "[bp-0X34]", "out");
	MakeLocal(0X104CB4, 0X104D90, "[bp-0X30]", "size");
	MakeFunction    (0X104DA0,0X104ED0);
	SetFunctionFlags(0X104DA0,0x400);
	SetType(0X104DA0, "uint32_t __fastcall rtLoadFileToBuffer(uint8_t *fileName, uint32_t *pBuf, uint32_t bufSize);");
	MakeFrame(0X104DA0, 0X68, 0, 0);
	MakeLocal(0X104DA0, 0X104ED0, "[bp-0X68]", "size");
	MakeLocal(0X104DA0, 0X104ED0, "[bp-0X4C]", "openflags");
	MakeLocal(0X104DA0, 0X104ED0, "[bp-0X48]", "attributes");
	MakeLocal(0X104DA0, 0X104ED0, "[bp-0X40]", "out");
	MakeLocal(0X104DA0, 0X104ED0, "[bp-0X3C]", "bytesRead");
	MakeFunction    (0X104EE8,0X104F64);
	SetFunctionFlags(0X104EE8,0x400);
	SetType(0X104EE8, "int __cdecl rtGetThreadContext(Handle hProcess, u32 threadId, void *threadContext);");
	MakeFrame(0X104EE8, 0X18, 0, 0);
	MakeLocal(0X104EE8, 0X104F64, "[bp-0X14]", "handle");
	MakeFunction    (0X104F68,0X104F7C);
	SetFunctionFlags(0X104F68,0x404);
	SetType(0X104F68, "uint32_t __fastcall rtGenerateJumpCode(uint32_t dst, uint32_t *buf);");
	MakeFunction    (0X104F80,0X104F94);
	SetFunctionFlags(0X104F80,0x400);
	SetType(0X104F80, "uint32_t __fastcall rtFlushInstructionCache(void *ptr, uint32_t size);");
	MakeFunction    (0X104F98,0X10500C);
	SetFunctionFlags(0X104F98,0x400);
	SetType(0X104F98, "void __fastcall rtInitHook(RT_HOOK *hook, uint32_t funcAddr, uint32_t callbackAddr);");
	MakeFrame(0X104F98, 0X10, 0, 0);
	MakeFunction    (0X105010,0X105054);
	SetFunctionFlags(0X105010,0x404);
	SetType(0X105010, "void __fastcall rtEnableHook(RT_HOOK *hook);");
	MakeFrame(0X105010, 0X8, 0, 0);
	MakeFunction    (0X105054,0X105098);
	SetFunctionFlags(0X105054,0x404);
	SetType(0X105054, "void __fastcall rtDisableHook(RT_HOOK *hook);");
	MakeFrame(0X105054, 0X8, 0, 0);
	MakeFunction    (0X105098,0X105110);
	SetFunctionFlags(0X105098,0x400);
	SetType(0X105098, "Handle ntrFileCreate(char *filename, u32 mode);");
	MakeFrame(0X105098, 0X48, 0, 0);
	MakeLocal(0X105098, 0X105110, "[bp-0X2C]", "openflags");
	MakeLocal(0X105098, 0X105110, "[bp-0X28]", "attributes");
	MakeLocal(0X105098, 0X105110, "[bp-0X20]", "out");
	MakeFunction    (0X105118,0X10514C);
	SetFunctionFlags(0X105118,0x400);
	MakeFrame(0X105118, 0X20, 0, 0);
	MakeLocal(0X105118, 0X10514C, "[bp-0X14]", "bytesRead");
	MakeFunction    (0X10514C,0X105188);
	SetFunctionFlags(0X10514C,0x400);
	SetType(0X10514C, "u32 __fastcall ntrFileWrite(Handle file, u64 offset, char *buffer, u32 size);");
	MakeFrame(0X10514C, 0X28, 0, 0);
	MakeLocal(0X10514C, 0X105188, "[bp-0X14]", "bytesWritten");
	MakeLocal(0X10514C, 0X105188, "[bp+0]", "flushFlags");
	MakeFunction    (0X105188,0X10518C);
	SetFunctionFlags(0X105188,0x480);
	SetType(0X105188, "Result ntrFileClose(Handle handle);");
	MakeFunction    (0X10518C,0X1051AC);
	SetFunctionFlags(0X10518C,0x400);
	SetType(0X10518C, "u8 *__fastcall ntrU32ToU8Array(u8 *array, u32 number);");
	MakeFunction    (0X1051AC,0X1051BC);
	SetFunctionFlags(0X1051AC,0x400);
	SetType(0X1051AC, "u16 ntrU16ToU8Array(u8 *array, u16 number);");
	MakeFunction    (0X1051BC,0X1052C4);
	SetFunctionFlags(0X1051BC,0x400);
	SetType(0X1051BC, "u32 __fastcall ntrScreenShotSaveFile(char *buffer, u16 width, u16 height, char *filename);");
	MakeFrame(0X1051BC, 0X20, 0, 0);
	MakeFunction    (0X1052C4,0X1053F4);
	SetFunctionFlags(0X1052C4,0x400);
	MakeFrame(0X1052C4, 0X24, 0, 0);
	MakeFunction    (0X1053F4,0X10543C);
	SetFunctionFlags(0X1053F4,0x400);
	SetType(0X1053F4, "u32 ntrScreenShotGetIndex(void);");
	MakeFrame(0X1053F4, 0X48, 0, 0);
	MakeFunction    (0X105440,0X105594);
	SetFunctionFlags(0X105440,0x400);
	SetType(0X105440, "void ntrScreenShotCreate(void);");
	MakeFrame(0X105440, 0X78, 0, 0);
	MakeLocal(0X105440, 0X105594, "[bp-0X60]", "filename");
	MakeFunction    (0X1055B0,0X105640);
	SetFunctionFlags(0X1055B0,0x400);
	SetType(0X1055B0, "void ntrCreateScreenShotCallback(void);");
	MakeFrame(0X1055B0, 0X18, 0, 0);
	MakeFunction    (0X10564C,0X1056A0);
	SetFunctionFlags(0X10564C,0x400);
	SetType(0X10564C, "void ntrScreenShotBuiltinPluginInit(void);");
	MakeFrame(0X10564C, 0X8, 0, 0);
	MakeFunction    (0X1056C0,0X105714);
	SetFunctionFlags(0X1056C0,0x400);
	SetType(0X1056C0, "void ntrPlgInitSharedFunctions(void);");
	MakeFunction    (0X10573C,0X105774);
	SetFunctionFlags(0X10573C,0x400);
	SetType(0X10573C, "s32 socketNetConvertError(s32 sock_retval);");
	MakeFunction    (0X105778,0X1057C0);
	SetFunctionFlags(0X105778,0x400);
	SetType(0X105778, "Result socketCmd1(Handle memhandle, u32 memsize);");
	MakeFrame(0X105778, 0X10, 0, 0);
	MakeFunction    (0X105804,0X105864);
	SetFunctionFlags(0X105804,0x400);
	SetType(0X105804, "Result socketInitialize(u32 *context_addr, u32 context_size);");
	MakeFrame(0X105804, 0X18, 0, 0);
	MakeLocal(0X105804, 0X105864, "[bp-0X18]", "otherpermission");
	MakeLocal(0X105804, 0X105864, "[bp-0XC]", "memhandle");
	MakeFunction    (0X10586C,0X105878);
	SetFunctionFlags(0X10586C,0x400);
	SetType(0X10586C, "int socketGetErrno(void);");
	MakeFunction    (0X10587C,0X1058E4);
	SetFunctionFlags(0X10587C,0x400);
	SetType(0X10587C, "int socketOpen(int domain, int type, int protocol);");
	MakeFrame(0X10587C, 0X18, 0, 0);
	MakeFunction    (0X1058EC,0X105944);
	SetFunctionFlags(0X1058EC,0x400);
	SetType(0X1058EC, "int socketClose(int sockfd);");
	MakeFrame(0X1058EC, 0X10, 0, 0);
	MakeFunction    (0X10594C,0X1059AC);
	SetFunctionFlags(0X10594C,0x400);
	SetType(0X10594C, "int socketShutdown(int sockfd, int shutdown_type);");
	MakeFrame(0X10594C, 0X10, 0, 0);
	MakeFunction    (0X1059B4,0X105A14);
	SetFunctionFlags(0X1059B4,0x400);
	SetType(0X1059B4, "int socketListen(int sockfd, int max_connections);");
	MakeFrame(0X1059B4, 0X10, 0, 0);
	MakeFunction    (0X105A1C,0X105B14);
	SetFunctionFlags(0X105A1C,0x400);
	SetType(0X105A1C, "int socketAccept(int sockfd, struct sockaddr *addr, int *addrlen);");
	MakeFrame(0X105A1C, 0X48, 0, 0);
	MakeFunction    (0X105B20,0X105BE8);
	SetFunctionFlags(0X105B20,0x400);
	SetType(0X105B20, "int socketBind(int sockfd, const struct sockaddr *addr, int addrlen);");
	MakeFrame(0X105B20, 0X40, 0, 0);
	MakeFunction    (0X105BF0,0X105CB8);
	SetFunctionFlags(0X105BF0,0x400);
	SetType(0X105BF0, "int socketConnect(int sockfd, const struct sockaddr *addr, int addrlen);");
	MakeFrame(0X105BF0, 0X40, 0, 0);
	MakeFunction    (0X105CC0,0X105DDC);
	SetFunctionFlags(0X105CC0,0x400);
	SetType(0X105CC0, "int socketIpcCmd7RecvFromOther(int sockfd, void *buf, int len, int flags, struct sockaddr *src_addr, int *addrlen);");
	MakeFrame(0X105CC0, 0X48, 0, 0);
	MakeLocal(0X105CC0, 0X105DDC, "[bp+0]", "src_addr");
	MakeLocal(0X105CC0, 0X105DDC, "[bp+0X4]", "addrlen");
	MakeFunction    (0X105DE4,0X105F24);
	SetFunctionFlags(0X105DE4,0x400);
	SetType(0X105DE4, "int socketIpcCmd8RecvFrom(int sockfd, void *buf, int len, int flags, struct sockaddr *src_addr, int *addrlen);");
	MakeFrame(0X105DE4, 0X58, 0, 0);
	MakeLocal(0X105DE4, 0X105F24, "[bp+0]", "src_addr");
	MakeLocal(0X105DE4, 0X105F24, "[bp+0X4]", "addrlen");
	MakeFunction    (0X105F2C,0X106038);
	SetFunctionFlags(0X105F2C,0x400);
	SetType(0X105F2C, "int socketIpcCmd9SendToOther(int sockfd, const void *buf, int len, int flags, const struct sockaddr *dest_addr, int addrlen);");
	MakeFrame(0X105F2C, 0X50, 0, 0);
	MakeLocal(0X105F2C, 0X106038, "[bp+0]", "dest_addr");
	MakeLocal(0X105F2C, 0X106038, "[bp+0X4]", "addrlen");
	MakeFunction    (0X106040,0X106150);
	SetFunctionFlags(0X106040,0x400);
	SetType(0X106040, "int socketIpcCmdASendTo(int sockfd, const void *buf, int len, int flags, const struct sockaddr *dest_addr, int addrlen);");
	MakeFrame(0X106040, 0X50, 0, 0);
	MakeLocal(0X106040, 0X106150, "[bp+0]", "dest_addr");
	MakeLocal(0X106040, 0X106150, "[bp+0X4]", "addrlen");
	MakeFunction    (0X106158,0X106184);
	SetFunctionFlags(0X106158,0x400);
	SetType(0X106158, "int socketRecvFrom(int sockfd, void *buf, int len, int flags, struct sockaddr *src_addr, int *addrlen);");
	MakeFrame(0X106158, 0X4, 0, 0);
	MakeLocal(0X106158, 0X106184, "[bp+0]", "src_addr");
	MakeLocal(0X106158, 0X106184, "[bp+0X4]", "addrlen");
	MakeFunction    (0X106184,0X1061B0);
	SetFunctionFlags(0X106184,0x400);
	SetType(0X106184, "int socketSendTo(int sockfd, const void *buf, int len, int flags, const struct sockaddr *dest_addr, int addrlen);");
	MakeFrame(0X106184, 0X4, 0, 0);
	MakeLocal(0X106184, 0X1061B0, "[bp+0]", "dest_addr");
	MakeLocal(0X106184, 0X1061B0, "[bp+0X4]", "addrlen");
	MakeFunction    (0X1061B0,0X1061CC);
	SetFunctionFlags(0X1061B0,0x400);
	SetType(0X1061B0, "int socketRecv(int sockfd, void *buf, int len, int flags);");
	MakeFrame(0X1061B0, 0X10, 0, 0);
	MakeLocal(0X1061B0, 0X1061CC, "[bp-0X10]", "src_addr");
	MakeLocal(0X1061B0, 0X1061CC, "[bp-0XC]", "addrlen");
	MakeFunction    (0X1061CC,0X1061E8);
	SetFunctionFlags(0X1061CC,0x400);
	SetType(0X1061CC, "int socketSend(int sockfd, const void *buf, int len, int flags);");
	MakeFrame(0X1061CC, 0X10, 0, 0);
	MakeLocal(0X1061CC, 0X1061E8, "[bp-0X10]", "dest_addr");
	MakeLocal(0X1061CC, 0X1061E8, "[bp-0XC]", "addrlen");
	MakeFunction    (0X1061E8,0X106298);
	SetFunctionFlags(0X1061E8,0x400);
	SetType(0X1061E8, "int socketGetSockOpt(int sockfd, int level, int option_name, void *data, int *data_len);");
	MakeFrame(0X1061E8, 0X20, 0, 0);
	MakeLocal(0X1061E8, 0X106298, "[bp+0]", "data_len");
	MakeFunction    (0X1062A0,0X106328);
	SetFunctionFlags(0X1062A0,0x400);
	SetType(0X1062A0, "int socketSetSockOpt(int sockfd, int level, int option_name, const void *data, int data_len);");
	MakeFrame(0X1062A0, 0X20, 0, 0);
	MakeLocal(0X1062A0, 0X106328, "[bp+0]", "data_len");
	MakeFunction    (0X106330,0X1063F0);
	SetFunctionFlags(0X106330,0x400);
	SetType(0X106330, "int socketFcntl(int sockfd, int cmd, ...);");
	MakeFrame(0X106330, 0X28, 0, 0);
	MakeLocal(0X106330, 0X1063F0, "[bp-0XC]", "varg_r1");
	MakeLocal(0X106330, 0X1063F0, "[bp-0X8]", "varg_r2");
	MakeLocal(0X106330, 0X1063F0, "[bp-0X4]", "varg_r3");
	MakeFunction    (0X1063F8,0X106450);
	SetFunctionFlags(0X1063F8,0x400);
	SetType(0X1063F8, "int socketAtMark(int sockfd);");
	MakeFrame(0X1063F8, 0X10, 0, 0);
	MakeFunction    (0X106458,0X106494);
	SetFunctionFlags(0X106458,0x400);
	SetType(0X106458, "__int32 socketGetHostId();");
	MakeFrame(0X106458, 0X8, 0, 0);
	MakeFunction    (0X106498,0X10657C);
	SetFunctionFlags(0X106498,0x400);
	SetType(0X106498, "int socketGetSockName(int sockfd, struct sockaddr *addr, int *addr_len);");
	MakeFrame(0X106498, 0X40, 0, 0);
	MakeFunction    (0X106588,0X10666C);
	SetFunctionFlags(0X106588,0x400);
	SetType(0X106588, "int socketGetPeerName(int sockfd, struct sockaddr *addr, int *addr_len);");
	MakeFrame(0X106588, 0X40, 0, 0);
	MakeFunction    (0X106678,0X1066A0);
	SetFunctionFlags(0X106678,0x400);
	SetType(0X106678, "Result __stdcall srvExit();");
	MakeFrame(0X106678, 0X8, 0, 0);
	MakeFunction    (0X1066A4,0X1066DC);
	SetFunctionFlags(0X1066A4,0x400);
	SetType(0X1066A4, "Result __fastcall srvRegisterClient(Handle *handleptr);");
	MakeFrame(0X1066A4, 0X10, 0, 0);
	MakeFunction    (0X1066E4,0X106710);
	SetFunctionFlags(0X1066E4,0x400);
	SetType(0X1066E4, "Result __stdcall srvInit();");
	MakeFrame(0X1066E4, 0X8, 0, 0);
	MakeNameEx(0X106708, "err", SN_LOCAL);
	MakeFunction    (0X106718,0X10679C);
	SetFunctionFlags(0X106718,0x400);
	SetType(0X106718, "Result __fastcall srvGetServiceHandle(Handle *handleptr, Handle *out, unsigned __int8 *server);");
	MakeFrame(0X106718, 0X20, 0, 0);
	MakeFunction    (0X1067B0,0X1067BC);
	SetFunctionFlags(0X1067B0,0x400);
	SetType(0X1067B0, "u32 *svcGetThreadCommandBuffer(void);");
	MakeFunction    (0X1067BC,0X1067DC);
	SetFunctionFlags(0X1067BC,0x404);
	SetType(0X1067BC, "s32 __stdcall svcControlMemory(u32 *addr_out, u32 addr0, u32 addr1, u32 size, MemOp op, MemPerm perm);");
	MakeFrame(0X1067BC, 0X8, 0, 0);
	MakeLocal(0X1067BC, 0X1067DC, "[bp+0]", "operation");
	MakeLocal(0X1067BC, 0X1067DC, "[bp+0X4]", "permissions");
	MakeFunction    (0X1067DC,0X1067E4);
	SetFunctionFlags(0X1067DC,0x404);
	SetType(0X1067DC, "void svcExitProcess(void);");
	MakeFunction    (0X1067E4,0X106804);
	SetFunctionFlags(0X1067E4,0x404);
	SetType(0X1067E4, "Result svcCreateThread(Handle *thread, ThreadFunc entrypoint, u32 arg, u32 *stacktop, s32 threadpriority, s32 processorid);");
	MakeFrame(0X1067E4, 0X8, 0, 0);
	MakeLocal(0X1067E4, 0X106804, "[bp+0]", "threadpriority");
	MakeLocal(0X1067E4, 0X106804, "[bp+0X4]", "processorid");
	MakeFunction    (0X106804,0X10680C);
	SetFunctionFlags(0X106804,0x401);
	SetType(0X106804, "void svcExitThread(void);");
	MakeFunction    (0X10680C,0X106814);
	SetFunctionFlags(0X10680C,0x400);
	SetType(0X10680C, "void svcSleepThread(s64 nanoseconds);");
	MakeFunction    (0X106814,0X106828);
	SetFunctionFlags(0X106814,0x404);
	SetType(0X106814, "Result svcCreateMutex(Handle *mutex, bool initialLocked);");
	MakeFrame(0X106814, 0X4, 0, 0);
	MakeFunction    (0X106828,0X106830);
	SetFunctionFlags(0X106828,0x404);
	SetType(0X106828, "Result svcReleaseMutex(Handle mutex);");
	MakeFunction    (0X106830,0X106844);
	SetFunctionFlags(0X106830,0x404);
	SetType(0X106830, "Result svcReleaseSemaphore(s32 *count, Handle semaphore, s32 releaseCount);");
	MakeFrame(0X106830, 0X4, 0, 0);
	MakeFunction    (0X106844,0X106858);
	SetFunctionFlags(0X106844,0x404);
	SetType(0X106844, "Result svcCreateEvent(Handle *event, ResetType resettype);");
	MakeFrame(0X106844, 0X4, 0, 0);
	MakeFunction    (0X106858,0X106860);
	SetFunctionFlags(0X106858,0x404);
	SetType(0X106858, "Result svcSignalEvent(Handle event);");
	MakeFunction    (0X106860,0X106868);
	SetFunctionFlags(0X106860,0x404);
	SetType(0X106860, "Result svcClearEvent(Handle event);");
	MakeFunction    (0X106868,0X106880);
	SetFunctionFlags(0X106868,0x404);
	SetType(0X106868, "Result svcCreateMemoryBlock(Handle *memblock, u32 addr, u32 size, u32 mypermission, u32 otherpermission);");
	MakeFrame(0X106868, 0X4, 0, 0);
	MakeLocal(0X106868, 0X106880, "[bp+0]", "otherpermission");
	MakeFunction    (0X106880,0X106888);
	SetFunctionFlags(0X106880,0x404);
	SetType(0X106880, "Result svcMapMemoryBlock(Handle memblock, u32 addr, u32 mypermissions, u32 otherpermission);");
	MakeFunction    (0X106888,0X106890);
	SetFunctionFlags(0X106888,0x404);
	SetType(0X106888, "Result svcUnmapMemoryBlock(Handle memblock, u32 addr);");
	MakeFunction    (0X106890,0X106898);
	SetFunctionFlags(0X106890,0x404);
	SetType(0X106890, "Result svcArbitrateAddress(Handle arbiter, u32 addr, ArbitrationType type, s32 value, s64 nanoseconds);");
	MakeFunction    (0X106898,0X1068A0);
	SetFunctionFlags(0X106898,0x400);
	SetType(0X106898, "Result svcCloseHandle(Handle handle);");
	MakeFunction    (0X1068A0,0X1068A8);
	SetFunctionFlags(0X1068A0,0x404);
	SetType(0X1068A0, "Result svcWaitSynchronization1(Handle handle, s64 nanoseconds);");
	MakeFunction    (0X1068A8,0X1068C8);
	SetFunctionFlags(0X1068A8,0x404);
	SetType(0X1068A8, "Result svcWaitSynchronizationN(s32 *out, Handle *handles, s32 handlecount, bool waitAll, s64 nanoseconds);");
	MakeFrame(0X1068A8, 0X4, 0, 0);
	MakeLocal(0X1068A8, 0X1068C8, "[bp+0]", "nanoseconds");
	MakeFunction    (0X1068C8,0X1068D0);
	SetFunctionFlags(0X1068C8,0x404);
	SetType(0X1068C8, "s64 svcGetSystemTick(void);");
	MakeFunction    (0X1068D0,0X1068EC);
	SetFunctionFlags(0X1068D0,0x404);
	SetType(0X1068D0, "Result svcGetSystemInfo(s64 *out, SystemInfoType type, s32 param);");
	MakeFrame(0X1068D0, 0X8, 0, 0);
	MakeFunction    (0X1068EC,0X106908);
	SetFunctionFlags(0X1068EC,0x404);
	SetType(0X1068EC, "Result svcGetProcessInfo(s64 *out, Handle process, ProcessInfoType type);");
	MakeFrame(0X1068EC, 0X8, 0, 0);
	MakeFunction    (0X106908,0X10691C);
	SetFunctionFlags(0X106908,0x404);
	SetType(0X106908, "Result svcConnectToPort(volatile Handle *out, const char *portName);");
	MakeFrame(0X106908, 0X4, 0, 0);
	MakeFunction    (0X10691C,0X106924);
	SetFunctionFlags(0X10691C,0x400);
	SetType(0X10691C, "Result svcSendSyncRequest(Handle session);");
	MakeFunction    (0X106924,0X106938);
	SetFunctionFlags(0X106924,0x444);
	SetType(0X106924, "Result svcGetProcessId(u32 *out, Handle handle);");
	MakeFrame(0X106924, 0X4, 0, 0);
	MakeFunction    (0X106938,0X10694C);
	SetFunctionFlags(0X106938,0x444);
	SetType(0X106938, "Result svcGetThreadId(u32 *out, Handle handle);");
	MakeFrame(0X106938, 0X4, 0, 0);
	MakeFunction    (0X10694C,0X106954);
	SetFunctionFlags(0X10694C,0x444);
	SetType(0X10694C, "Result svcSetThreadIdealProcessor(Handle handle, u32 processorid);");
	MakeFunction    (0X106954,0X106968);
	SetFunctionFlags(0X106954,0x404);
	SetType(0X106954, "Result svcOpenThread(Handle *thread, Handle process, u32 threadId);");
	MakeFrame(0X106954, 0X4, 0, 0);
	MakeFunction    (0X106968,0X106970);
	SetFunctionFlags(0X106968,0x400);
	SetType(0X106968, "Result svcFlushProcessDataCache(Handle process, const void *addr, u32 size);");
	MakeFunction    (0X106970,0X106978);
	SetFunctionFlags(0X106970,0x400);
	SetType(0X106970, "Result svcInvalidateProcessDataCache(Handle process, void *addr, u32 size);");
	MakeFunction    (0X106978,0X106980);
	SetFunctionFlags(0X106978,0x404);
	MakeFunction    (0X106980,0X106988);
	SetFunctionFlags(0X106980,0x404);
	SetType(0X106980, "Result svcAddCodeSegment(unsigned int Addr, unsigned int Size);");
	MakeFunction    (0X106988,0X106990);
	SetFunctionFlags(0X106988,0x400);
	SetType(0X106988, "void svcTerminateProcess(Handle);");
	MakeFunction    (0X106990,0X1069A4);
	SetFunctionFlags(0X106990,0x404);
	SetType(0X106990, "Result svcOpenProcess(Handle *process, u32 processId);");
	MakeFrame(0X106990, 0X4, 0, 0);
	MakeFunction    (0X1069A4,0X1069BC);
	SetFunctionFlags(0X1069A4,0x404);
	SetType(0X1069A4, "Result svcControlProcessMemory(Handle KProcess, unsigned int Addr0, unsigned int Addr1, unsigned int Size, unsigned int Type, unsigned int Permissions);");
	MakeFrame(0X1069A4, 0XC, 0, 0);
	MakeLocal(0X1069A4, 0X1069BC, "[bp+0]", "Type");
	MakeLocal(0X1069A4, 0X1069BC, "[bp+0X4]", "Permissions");
	MakeFunction    (0X1069BC,0X1069C4);
	SetFunctionFlags(0X1069BC,0x404);
	SetType(0X1069BC, "Result svcMapProcessMemory(Handle KProcess, unsigned int StartAddr, unsigned int EndAddr);");
	MakeFunction    (0X1069C4,0X1069E4);
	SetFunctionFlags(0X1069C4,0x404);
	SetType(0X1069C4, "Result svcStartInterProcessDma(Handle *dma, Handle dstProcess, void *dst, Handle srcProcess, const void *src, u32 size, u32 *config);");
	MakeFrame(0X1069C4, 0XC, 0, 0);
	MakeLocal(0X1069C4, 0X1069E4, "[bp+0]", "src");
	MakeLocal(0X1069C4, 0X1069E4, "[bp+0X4]", "size");
	MakeLocal(0X1069C4, 0X1069E4, "[bp+0X8]", "config");
	MakeFunction    (0X1069E4,0X1069F8);
	SetFunctionFlags(0X1069E4,0x404);
	SetType(0X1069E4, "Result svcGetDmaState(u32 *state, Handle dma);");
	MakeFrame(0X1069E4, 0X4, 0, 0);
	MakeFunction    (0X1069F8,0X106A00);
	SetFunctionFlags(0X1069F8,0x400);
	SetType(0X1069F8, "Result svcBackdoor(unsigned int CodeAddress);");
	MakeFunction    (0X106A00,0X106A14);
	SetFunctionFlags(0X106A00,0x404);
	SetType(0X106A00, "Result svcGetProcessList(s32 *processCount, u32 *processIds, s32 processIdMaxCount);");
	MakeFrame(0X106A00, 0X4, 0, 0);
	MakeFunction    (0X106A14,0X106A28);
	SetFunctionFlags(0X106A14,0x404);
	SetType(0X106A14, "Result svcGetThreadList(s32 *threadCount, u32 *threadIds, s32 threadIdMaxCount, Handle domain);");
	MakeFrame(0X106A14, 0X4, 0, 0);
	MakeFunction    (0X106A28,0X106A30);
	SetFunctionFlags(0X106A28,0x404);
	MakeFunction    (0X106A30,0X106A44);
	SetFunctionFlags(0X106A30,0x404);
	SetType(0X106A30, "Result svcDebugActiveProcess(Handle *debug, u32 processID);");
	MakeFrame(0X106A30, 0X4, 0, 0);
	MakeFunction    (0X106A44,0X106A4C);
	SetFunctionFlags(0X106A44,0x400);
	SetType(0X106A44, "Result svcReadProcessMemory(void *buffer, Handle debug, u32 addr, u32 size);");
	MakeFunction    (0X106A4C,0X106A54);
	SetFunctionFlags(0X106A4C,0x404);
	SetType(0X106A4C, "Result svcWriteProcessMemory(Handle debug, const void *buffer, u32 addr, u32 size);");
	MakeFunction    (0X106A60,0X106A74);
	SetFunctionFlags(0X106A60,0x400);
	SetType(0X106A60, "int __cdecl get_kernel_object_ptr(void *kprocesshandletable, unsigned int hProcess);");
	MakeFunction    (0X106A80,0X106B60);
	SetFunctionFlags(0X106A80,0x400);
	MakeFrame(0X106A80, 0X10, 0, 0);
	MakeFunction    (0X106B68,0X106BF4);
	SetFunctionFlags(0X106B68,0x400);
	MakeFrame(0X106B68, 0X8, 0, 0);
	MakeFunction    (0X106C0C,0X106C5C);
	SetFunctionFlags(0X106C0C,0x400);
	MakeFrame(0X106C0C, 0X8, 0, 0);
	MakeFunction    (0X106C64,0X106D50);
	SetFunctionFlags(0X106C64,0x400);
	MakeFrame(0X106C64, 0X8, 0, 0);
	MakeNameEx(0X106C88, "_memcpy", SN_LOCAL);
	MakeFunction    (0X106D5C,0X106D84);
	SetFunctionFlags(0X106D5C,0x400);
	MakeFrame(0X106D5C, 0X8, 0, 0);
	MakeFunction    (0X106D8C,0X106DA8);
	SetFunctionFlags(0X106D8C,0x400);
	MakeFunction    (0X106DB0,0X106DD4);
	SetFunctionFlags(0X106DB0,0x400);
	MakeFrame(0X106DB0, 0X8, 0, 0);
	MakeFunction    (0X106DDC,0X106E04);
	SetFunctionFlags(0X106DDC,0x400);
	SetType(0X106DDC, "int __cdecl arm11k_get_kernel_object(unsigned int handle);");
	MakeFrame(0X106DDC, 0X8, 0, 0);
	MakeFunction    (0X106E0C,0X106E28);
	SetFunctionFlags(0X106E0C,0x400);
	SetType(0X106E0C, "int __cdecl arm11k_memcpy(void *dst, void *src, unsigned int count);");
	MakeFunction    (0X106E30,0X106E48);
	SetFunctionFlags(0X106E30,0x400);
	MakeFunction    (0X106E54,0X106E94);
	SetFunctionFlags(0X106E54,0x400);
	MakeFunction    (0X106E94,0X106EB8);
	SetFunctionFlags(0X106E94,0x400);
	MakeFrame(0X106E94, 0X8, 0, 0);
	MakeFunction    (0X106EBC,0X106EEC);
	SetFunctionFlags(0X106EBC,0x404);
	MakeFrame(0X106EBC, 0X8, 0, 0);
	MakeFunction    (0X106EF0,0X106F54);
	SetFunctionFlags(0X106EF0,0x400);
	MakeFrame(0X106EF0, 0X10, 0, 0);
	MakeFunction    (0X106F68,0X106F84);
	SetFunctionFlags(0X106F68,0x400);
	MakeFrame(0X106F68, 0X8, 0, 0);
	MakeFunction    (0X106F88,0X10704C);
	SetFunctionFlags(0X106F88,0x400);
	MakeFrame(0X106F88, 0X18, 0, 0);
	MakeFunction    (0X107068,0X1070C8);
	SetFunctionFlags(0X107068,0x400);
	MakeFunction    (0X1070D4,0X107134);
	SetFunctionFlags(0X1070D4,0x400);
	SetType(0X1070D4, "int __cdecl controlVideo(unsigned int cmd, unsigned int arg1, unsigned int arg2, unsigned int arg3);");
	MakeFrame(0X1070D4, 0X8, 0, 0);
	MakeNameEx(0X10710C, "set_framebuffer", SN_LOCAL);
	MakeFunction    (0X107138,0X107154);
	SetFunctionFlags(0X107138,0x444);
	MakeFunction    (0X107158,0X107188);
	SetFunctionFlags(0X107158,0x400);
	MakeFrame(0X107158, 0X8, 0, 0);
	MakeFunction    (0X107188,0X1072D0);
	SetFunctionFlags(0X107188,0x400);
	MakeFrame(0X107188, 0X100, 0, 0);
	MakeLocal(0X107188, 0X1072D0, "[bp-0X100]", "g");
	MakeLocal(0X107188, 0X1072D0, "[bp-0XFC]", "b");
	MakeLocal(0X107188, 0X1072D0, "[bp-0XF4]", "s");
	MakeFunction    (0X1072DC,0X10738C);
	SetFunctionFlags(0X1072DC,0x400);
	MakeFrame(0X1072DC, 0X18, 0, 0);
	MakeLocal(0X1072DC, 0X10738C, "[bp-0X18]", "g");
	MakeLocal(0X1072DC, 0X10738C, "[bp-0X14]", "b");
	MakeFunction    (0X10739C,0X1073D8);
	SetFunctionFlags(0X10739C,0x400);
	MakeFrame(0X10739C, 0X1A0, 0, 0);
	MakeFunction    (0X1073D8,0X107440);
	SetFunctionFlags(0X1073D8,0x400);
	MakeFrame(0X1073D8, 0X8, 0, 0);
	MakeFunction    (0X107448,0X107478);
	SetFunctionFlags(0X107448,0x400);
	MakeFunction    (0X107478,0X1074B0);
	SetFunctionFlags(0X107478,0x400);
	MakeFrame(0X107478, 0X4, 0, 0);
	MakeFunction    (0X1074B0,0X107574);
	SetFunctionFlags(0X1074B0,0x400);
	MakeFrame(0X1074B0, 0X130, 0, 0);
	MakeLocal(0X1074B0, 0X107574, "[bp-0X114]", "openflags");
	MakeLocal(0X1074B0, 0X107574, "[bp-0X110]", "attributes");
	MakeLocal(0X1074B0, 0X107574, "[bp-0X104]", "out");
	MakeFunction    (0X107580,0X1075B4);
	SetFunctionFlags(0X107580,0x400);
	MakeFunction    (0X1075BC,0X1075DC);
	SetFunctionFlags(0X1075BC,0x400);
	MakeFrame(0X1075BC, 0X8, 0, 0);
	MakeFunction    (0X1075DC,0X107610);
	SetFunctionFlags(0X1075DC,0x400);
	MakeFrame(0X1075DC, 0X10, 0, 0);
	MakeFunction    (0X107614,0X1078D0);
	SetFunctionFlags(0X107614,0x400);
	MakeFrame(0X107614, 0X40, 0, 0);
	MakeFunction    (0X1078D0,0X1078F8);
	SetFunctionFlags(0X1078D0,0x400);
	MakeFrame(0X1078D0, 0X20, 0, 0);
	MakeLocal(0X1078D0, 0X1078F8, "[bp-0X10]", "varg_r0");
	MakeLocal(0X1078D0, 0X1078F8, "[bp-0XC]", "varg_r1");
	MakeLocal(0X1078D0, 0X1078F8, "[bp-0X8]", "varg_r2");
	MakeLocal(0X1078D0, 0X1078F8, "[bp-0X4]", "varg_r3");
	MakeFunction    (0X1078F8,0X107938);
	SetFunctionFlags(0X1078F8,0x400);
	MakeFrame(0X1078F8, 0X20, 0, 0);
	MakeLocal(0X1078F8, 0X107938, "[bp-0XC]", "varg_r1");
	MakeLocal(0X1078F8, 0X107938, "[bp-0X8]", "varg_r2");
	MakeLocal(0X1078F8, 0X107938, "[bp-0X4]", "varg_r3");
	MakeFunction    (0X10793C,0X107974);
	SetFunctionFlags(0X10793C,0x400);
	MakeFrame(0X10793C, 0X20, 0, 0);
	MakeLocal(0X10793C, 0X107974, "[bp-0XC]", "varg_r1");
	MakeLocal(0X10793C, 0X107974, "[bp-0X8]", "varg_r2");
	MakeLocal(0X10793C, 0X107974, "[bp-0X4]", "varg_r3");
	MakeFunction    (0X107978,0X107A34);
	SetFunctionFlags(0X107978,0x400);
	MakeFrame(0X107978, 0X10, 0, 0);
	MakeFunction    (0X107A44,0X107AF4);
	SetFunctionFlags(0X107A44,0x400);
	MakeFunction    (0X107AF8,0X107B1C);
	SetFunctionFlags(0X107AF8,0x400);
	MakeFrame(0X107AF8, 0X10, 0, 0);
	MakeFunction    (0X107B28,0X107C48);
	SetFunctionFlags(0X107B28,0x400);
	MakeFrame(0X107B28, 0, 0, 0);
	MakeFunction    (0X107C48,0X107D38);
	SetFunctionFlags(0X107C48,0x444);
	MakeFrame(0X107C48, 0X10, 0, 0);
	MakeFunction    (0X107D38,0X107E2C);
	SetFunctionFlags(0X107D38,0x400);
	MakeFrame(0X107D38, 0X8, 0, 0);
	MakeFunction    (0X107E2C,0X107EA8);
	SetFunctionFlags(0X107E2C,0x400);
	MakeFrame(0X107E2C, 0X8, 0, 0);
	MakeFunction    (0X107EB0,0X1080D4);
	SetFunctionFlags(0X107EB0,0x400);
	MakeFrame(0X107EB0, 0X4, 0, 0);
	MakeFunction    (0X1080D4,0X1081C4);
	SetFunctionFlags(0X1080D4,0x404);
	MakeFrame(0X1080D4, 0X8, 0, 0);
	MakeFunction    (0X1081C4,0X108224);
	SetFunctionFlags(0X1081C4,0x444);
	SetType(0X1081C4, "int __fastcall strlen(char *string);");
	MakeFunction    (0X108224,0X108318);
	SetFunctionFlags(0X108224,0x444);
	MakeFunction    (0X108318,0X108338);
	SetFunctionFlags(0X108318,0x444);
	MakeFunction    (0X109ABC,0X109AE8);
	SetFunctionFlags(0X109ABC,0x400);
	MakeFrame(0X109ABC, 0X38, 0, 0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	SetRegEx(0X100100,"T",0,3);
	SetRegEx(0X100100,"DS",0,3);
	SetRegEx(0X100104,"T",0,3);
	SetRegEx(0X100124,"T",0,3);
	SetRegEx(0X10014C,"T",0,3);
	SetRegEx(0X100168,"T",0,3);
	SetRegEx(0X1001A4,"T",0,3);
	SetRegEx(0X1001C4,"T",0,3);
	SetRegEx(0X1001D0,"T",0,3);
	SetRegEx(0X1001FC,"T",0,3);
	SetRegEx(0X100224,"T",0,3);
	SetRegEx(0X100230,"T",0,3);
	SetRegEx(0X100260,"T",0,3);
	SetRegEx(0X100268,"T",0,3);
	SetRegEx(0X100270,"T",0,3);
	SetRegEx(0X1002DC,"T",0,3);
	SetRegEx(0X100314,"T",0,3);
	SetRegEx(0X100320,"T",0,3);
	SetRegEx(0X100354,"T",0,3);
	SetRegEx(0X100378,"T",0,3);
	SetRegEx(0X1003A4,"T",0,3);
	SetRegEx(0X1003F0,"T",0,3);
	SetRegEx(0X1003F8,"T",0,3);
	SetRegEx(0X100484,"T",0,3);
	SetRegEx(0X1004CC,"T",0,3);
	SetRegEx(0X100518,"T",0,3);
	SetRegEx(0X100568,"T",0,3);
	SetRegEx(0X1005C8,"T",0,3);
	SetRegEx(0X100600,"T",0,3);
	SetRegEx(0X100624,"T",0,3);
	SetRegEx(0X100650,"T",0,3);
	SetRegEx(0X10065C,"T",0,3);
	SetRegEx(0X10066C,"T",0,3);
	SetRegEx(0X100688,"T",0,3);
	SetRegEx(0X10068C,"T",0,3);
	SetRegEx(0X1006C0,"T",0,3);
	SetRegEx(0X100750,"T",0,3);
	SetRegEx(0X100760,"T",0,3);
	SetRegEx(0X100810,"T",0,3);
	SetRegEx(0X100820,"T",0,3);
	SetRegEx(0X100898,"T",0,3);
	SetRegEx(0X1008A4,"T",0,3);
	SetRegEx(0X100920,"T",0,3);
	SetRegEx(0X100930,"T",0,3);
	SetRegEx(0X100978,"T",0,3);
	SetRegEx(0X100984,"T",0,3);
	SetRegEx(0X1009B4,"T",0,3);
	SetRegEx(0X100A20,"T",0,3);
	SetRegEx(0X100A94,"T",0,3);
	SetRegEx(0X100AD8,"T",0,3);
	SetRegEx(0X100B14,"T",0,3);
	SetRegEx(0X100B78,"T",0,3);
	SetRegEx(0X100BB4,"T",0,3);
	SetRegEx(0X100BFC,"T",0,3);
	SetRegEx(0X100C14,"T",0,3);
	SetRegEx(0X100C28,"T",0,3);
	SetRegEx(0X100CA8,"T",0,3);
	SetRegEx(0X100D2C,"T",0,3);
	SetRegEx(0X100D68,"T",0,3);
	SetRegEx(0X100D78,"T",0,3);
	SetRegEx(0X100DC4,"T",0,3);
	SetRegEx(0X100E0C,"T",0,3);
	SetRegEx(0X100E14,"T",0,3);
	SetRegEx(0X100E98,"T",0,3);
	SetRegEx(0X100EAC,"T",0,3);
	SetRegEx(0X100ED0,"T",0,3);
	SetRegEx(0X100EEC,"T",0,3);
	SetRegEx(0X100F20,"T",0,3);
	SetRegEx(0X100F48,"T",0,3);
	SetRegEx(0X100F4C,"T",0,3);
	SetRegEx(0X100FF0,"T",0,3);
	SetRegEx(0X101000,"T",0,3);
	SetRegEx(0X10103C,"T",0,3);
	SetRegEx(0X10105C,"T",0,3);
	SetRegEx(0X10106C,"T",0,3);
	SetRegEx(0X101078,"T",0,3);
	SetRegEx(0X101080,"T",0,3);
	SetRegEx(0X1010D4,"T",0,3);
	SetRegEx(0X1010DC,"T",0,3);
	SetRegEx(0X101100,"T",0,3);
	SetRegEx(0X101168,"T",0,3);
	SetRegEx(0X101190,"T",0,3);
	SetRegEx(0X1011AC,"T",0,3);
	SetRegEx(0X1011C8,"T",0,3);
	SetRegEx(0X1011F4,"T",0,3);
	SetRegEx(0X101238,"T",0,3);
	SetRegEx(0X101244,"T",0,3);
	SetRegEx(0X1012DC,"T",0,3);
	SetRegEx(0X101318,"T",0,3);
	SetRegEx(0X101338,"T",0,3);
	SetRegEx(0X101384,"T",0,3);
	SetRegEx(0X1013E0,"T",0,3);
	SetRegEx(0X1013F8,"T",0,3);
	SetRegEx(0X101408,"T",0,3);
	SetRegEx(0X10149C,"T",0,3);
	SetRegEx(0X1014A4,"T",0,3);
	SetRegEx(0X1014C0,"T",0,3);
	SetRegEx(0X1014C8,"T",0,3);
	SetRegEx(0X1014EC,"T",0,3);
	SetRegEx(0X101504,"T",0,3);
	SetRegEx(0X10157C,"T",0,3);
	SetRegEx(0X101590,"T",0,3);
	SetRegEx(0X1015AC,"T",0,3);
	SetRegEx(0X1015FC,"T",0,3);
	SetRegEx(0X10160C,"T",0,3);
	SetRegEx(0X101640,"T",0,3);
	SetRegEx(0X1016E4,"T",0,3);
	SetRegEx(0X101708,"T",0,3);
	SetRegEx(0X10173C,"T",0,3);
	SetRegEx(0X101750,"T",0,3);
	SetRegEx(0X101774,"T",0,3);
	SetRegEx(0X1017F0,"T",0,3);
	SetRegEx(0X101800,"T",0,3);
	SetRegEx(0X101808,"T",0,3);
	SetRegEx(0X10181C,"T",0,3);
	SetRegEx(0X101854,"T",0,3);
	SetRegEx(0X101858,"T",0,3);
	SetRegEx(0X101878,"T",0,3);
	SetRegEx(0X1018AC,"T",0,3);
	SetRegEx(0X1018B0,"T",0,3);
	SetRegEx(0X1018B8,"T",0,3);
	SetRegEx(0X1018D0,"T",0,3);
	SetRegEx(0X1018DC,"T",0,3);
	SetRegEx(0X1018E8,"T",0,3);
	SetRegEx(0X1018F0,"T",0,3);
	SetRegEx(0X101924,"T",0,3);
	SetRegEx(0X101970,"T",0,3);
	SetRegEx(0X101984,"T",0,3);
	SetRegEx(0X1019AC,"T",0,3);
	SetRegEx(0X1019E8,"T",0,3);
	SetRegEx(0X101A00,"T",0,3);
	SetRegEx(0X101A3C,"T",0,3);
	SetRegEx(0X101A54,"T",0,3);
	SetRegEx(0X101B08,"T",0,3);
	SetRegEx(0X101B60,"T",0,3);
	SetRegEx(0X101B74,"T",0,3);
	SetRegEx(0X101B94,"T",0,3);
	SetRegEx(0X101BA4,"T",0,3);
	SetRegEx(0X101BD4,"T",0,3);
	SetRegEx(0X101C38,"T",0,3);
	SetRegEx(0X101C40,"T",0,3);
	SetRegEx(0X101C54,"T",0,3);
	SetRegEx(0X101CB8,"T",0,3);
	SetRegEx(0X101CC0,"T",0,3);
	SetRegEx(0X101CD4,"T",0,3);
	SetRegEx(0X101D14,"T",0,3);
	SetRegEx(0X101D48,"T",0,3);
	SetRegEx(0X101DB4,"T",0,3);
	SetRegEx(0X101E04,"T",0,3);
	SetRegEx(0X101E24,"T",0,3);
	SetRegEx(0X101E40,"T",0,3);
	SetRegEx(0X101EC0,"T",0,3);
	SetRegEx(0X101F2C,"T",0,3);
	SetRegEx(0X101F5C,"T",0,3);
	SetRegEx(0X101F60,"T",0,3);
	SetRegEx(0X101FA0,"T",0,3);
	SetRegEx(0X101FD0,"T",0,3);
	SetRegEx(0X101FF8,"T",0,3);
	SetRegEx(0X102014,"T",0,3);
	SetRegEx(0X102034,"T",0,3);
	SetRegEx(0X102088,"T",0,3);
	SetRegEx(0X1020B4,"T",0,3);
	SetRegEx(0X1020BC,"T",0,3);
	SetRegEx(0X1020C8,"T",0,3);
	SetRegEx(0X1020DC,"T",0,3);
	SetRegEx(0X1020F0,"T",0,3);
	SetRegEx(0X10210C,"T",0,3);
	SetRegEx(0X10224C,"T",0,3);
	SetRegEx(0X102250,"T",0,3);
	SetRegEx(0X102258,"T",0,3);
	SetRegEx(0X102264,"T",0,3);
	SetRegEx(0X102298,"T",0,3);
	SetRegEx(0X1022CC,"T",0,3);
	SetRegEx(0X1022F0,"T",0,3);
	SetRegEx(0X102318,"T",0,3);
	SetRegEx(0X10232C,"T",0,3);
	SetRegEx(0X102344,"T",0,3);
	SetRegEx(0X102384,"T",0,3);
	SetRegEx(0X102398,"T",0,3);
	SetRegEx(0X1023D4,"T",0,3);
	SetRegEx(0X1023DC,"T",0,3);
	SetRegEx(0X1023F0,"T",0,3);
	SetRegEx(0X102400,"T",0,3);
	SetRegEx(0X102420,"T",0,3);
	SetRegEx(0X102450,"T",0,3);
	SetRegEx(0X10247C,"T",0,3);
	SetRegEx(0X102484,"T",0,3);
	SetRegEx(0X102490,"T",0,3);
	SetRegEx(0X1024B8,"T",0,3);
	SetRegEx(0X102500,"T",0,3);
	SetRegEx(0X102508,"T",0,3);
	SetRegEx(0X102514,"T",0,3);
	SetRegEx(0X10251C,"T",0,3);
	SetRegEx(0X102554,"T",0,3);
	SetRegEx(0X10255C,"T",0,3);
	SetRegEx(0X102570,"T",0,3);
	SetRegEx(0X102594,"T",0,3);
	SetRegEx(0X1025C8,"T",0,3);
	SetRegEx(0X1025F4,"T",0,3);
	SetRegEx(0X102624,"T",0,3);
	SetRegEx(0X102630,"T",0,3);
	SetRegEx(0X102670,"T",0,3);
	SetRegEx(0X102678,"T",0,3);
	SetRegEx(0X1026AC,"T",0,3);
	SetRegEx(0X1026CC,"T",0,3);
	SetRegEx(0X1026D4,"T",0,3);
	SetRegEx(0X1026E8,"T",0,3);
	SetRegEx(0X10270C,"T",0,3);
	SetRegEx(0X102750,"T",0,3);
	SetRegEx(0X1027A8,"T",0,3);
	SetRegEx(0X1027B8,"T",0,3);
	SetRegEx(0X1027C8,"T",0,3);
	SetRegEx(0X1027EC,"T",0,3);
	SetRegEx(0X1027F4,"T",0,3);
	SetRegEx(0X102810,"T",0,3);
	SetRegEx(0X102818,"T",0,3);
	SetRegEx(0X102824,"T",0,3);
	SetRegEx(0X102834,"T",0,3);
	SetRegEx(0X102858,"T",0,3);
	SetRegEx(0X102860,"T",0,3);
	SetRegEx(0X10287C,"T",0,3);
	SetRegEx(0X102884,"T",0,3);
	SetRegEx(0X102888,"T",0,3);
	SetRegEx(0X1028A4,"T",0,3);
	SetRegEx(0X1028A8,"T",0,3);
	SetRegEx(0X1028EC,"T",0,3);
	SetRegEx(0X10291C,"T",0,3);
	SetRegEx(0X102948,"T",0,3);
	SetRegEx(0X10299C,"T",0,3);
	SetRegEx(0X1029A4,"T",0,3);
	SetRegEx(0X1029B4,"T",0,3);
	SetRegEx(0X1029DC,"T",0,3);
	SetRegEx(0X102A24,"T",0,3);
	SetRegEx(0X102A4C,"T",0,3);
	SetRegEx(0X102AA4,"T",0,3);
	SetRegEx(0X102B68,"T",0,3);
	SetRegEx(0X102B74,"T",0,3);
	SetRegEx(0X102B78,"T",0,3);
	SetRegEx(0X102BC0,"T",0,3);
	SetRegEx(0X102BC4,"T",0,3);
	SetRegEx(0X102C28,"T",0,3);
	SetRegEx(0X102C48,"T",0,3);
	SetRegEx(0X102C58,"T",0,3);
	SetRegEx(0X102C70,"T",0,3);
	SetRegEx(0X102C9C,"T",0,3);
	SetRegEx(0X102CD4,"T",0,3);
	SetRegEx(0X102D5C,"T",0,3);
	SetRegEx(0X102D60,"T",0,3);
	SetRegEx(0X102D7C,"T",0,3);
	SetRegEx(0X102DAC,"T",0,3);
	SetRegEx(0X102DEC,"T",0,3);
	SetRegEx(0X102E04,"T",0,3);
	SetRegEx(0X102E14,"T",0,3);
	SetRegEx(0X102E24,"T",0,3);
	SetRegEx(0X102E34,"T",0,3);
	SetRegEx(0X102E44,"T",0,3);
	SetRegEx(0X102E54,"T",0,3);
	SetRegEx(0X102E64,"T",0,3);
	SetRegEx(0X102E74,"T",0,3);
	SetRegEx(0X102E84,"T",0,3);
	SetRegEx(0X102E94,"T",0,3);
	SetRegEx(0X102EB0,"T",0,3);
	SetRegEx(0X102EB4,"T",0,3);
	SetRegEx(0X102EE0,"T",0,3);
	SetRegEx(0X102F44,"T",0,3);
	SetRegEx(0X102F54,"T",0,3);
	SetRegEx(0X102F5C,"T",0,3);
	SetRegEx(0X102F88,"T",0,3);
	SetRegEx(0X102F94,"T",0,3);
	SetRegEx(0X102FCC,"T",0,3);
	SetRegEx(0X103008,"T",0,3);
	SetRegEx(0X103018,"T",0,3);
	SetRegEx(0X103070,"T",0,3);
	SetRegEx(0X1030C8,"T",0,3);
	SetRegEx(0X1030EC,"T",0,3);
	SetRegEx(0X103100,"T",0,3);
	SetRegEx(0X103148,"T",0,3);
	SetRegEx(0X103190,"T",0,3);
	SetRegEx(0X1031E8,"T",0,3);
	SetRegEx(0X103204,"T",0,3);
	SetRegEx(0X103248,"T",0,3);
	SetRegEx(0X10324C,"T",0,3);
	SetRegEx(0X103250,"T",0,3);
	SetRegEx(0X103298,"T",0,3);
	SetRegEx(0X1032AC,"T",0,3);
	SetRegEx(0X1032C0,"T",0,3);
	SetRegEx(0X1032E0,"T",0,3);
	SetRegEx(0X1032E8,"T",0,3);
	SetRegEx(0X1032F4,"T",0,3);
	SetRegEx(0X1032FC,"T",0,3);
	SetRegEx(0X103358,"T",0,3);
	SetRegEx(0X10336C,"T",0,3);
	SetRegEx(0X103394,"T",0,3);
	SetRegEx(0X1033B8,"T",0,3);
	SetRegEx(0X1033C0,"T",0,3);
	SetRegEx(0X1033F0,"T",0,3);
	SetRegEx(0X103424,"T",0,3);
	SetRegEx(0X10345C,"T",0,3);
	SetRegEx(0X103460,"T",0,3);
	SetRegEx(0X103478,"T",0,3);
	SetRegEx(0X103484,"T",0,3);
	SetRegEx(0X103494,"T",0,3);
	SetRegEx(0X1034DC,"T",0,3);
	SetRegEx(0X1034F8,"T",0,3);
	SetRegEx(0X103524,"T",0,3);
	SetRegEx(0X1035B8,"T",0,3);
	SetRegEx(0X1035BC,"T",0,3);
	SetRegEx(0X1035C0,"T",0,3);
	SetRegEx(0X1035E0,"T",0,3);
	SetRegEx(0X103608,"T",0,3);
	SetRegEx(0X103630,"T",0,3);
	SetRegEx(0X103654,"T",0,3);
	SetRegEx(0X103694,"T",0,3);
	SetRegEx(0X10371C,"T",0,3);
	SetRegEx(0X103728,"T",0,3);
	SetRegEx(0X103734,"T",0,3);
	SetRegEx(0X10378C,"T",0,3);
	SetRegEx(0X10379C,"T",0,3);
	SetRegEx(0X1037C4,"T",0,3);
	SetRegEx(0X10382C,"T",0,3);
	SetRegEx(0X103870,"T",0,3);
	SetRegEx(0X10388C,"T",0,3);
	SetRegEx(0X103898,"T",0,3);
	SetRegEx(0X1038A0,"T",0,3);
	SetRegEx(0X1038A4,"T",0,3);
	SetRegEx(0X1038E8,"T",0,3);
	SetRegEx(0X103910,"T",0,3);
	SetRegEx(0X103974,"T",0,3);
	SetRegEx(0X1039A8,"T",0,3);
	SetRegEx(0X103A34,"T",0,3);
	SetRegEx(0X103A48,"T",0,3);
	SetRegEx(0X103A54,"T",0,3);
	SetRegEx(0X103A60,"T",0,3);
	SetRegEx(0X103A9C,"T",0,3);
	SetRegEx(0X103AB4,"T",0,3);
	SetRegEx(0X103AFC,"T",0,3);
	SetRegEx(0X103B00,"T",0,3);
	SetRegEx(0X103B38,"T",0,3);
	SetRegEx(0X103BAC,"T",0,3);
	SetRegEx(0X103BB4,"T",0,3);
	SetRegEx(0X103BE0,"T",0,3);
	SetRegEx(0X103BE8,"T",0,3);
	SetRegEx(0X103C14,"T",0,3);
	SetRegEx(0X103CA8,"T",0,3);
	SetRegEx(0X103CAC,"T",0,3);
	SetRegEx(0X103CFC,"T",0,3);
	SetRegEx(0X103D0C,"T",0,3);
	SetRegEx(0X103D1C,"T",0,3);
	SetRegEx(0X103D2C,"T",0,3);
	SetRegEx(0X103D70,"T",0,3);
	SetRegEx(0X103DAC,"T",0,3);
	SetRegEx(0X103DC4,"T",0,3);
	SetRegEx(0X103E28,"T",0,3);
	SetRegEx(0X103E78,"T",0,3);
	SetRegEx(0X103EA0,"T",0,3);
	SetRegEx(0X103F58,"T",0,3);
	SetRegEx(0X103F78,"T",0,3);
	SetRegEx(0X103FB4,"T",0,3);
	SetRegEx(0X103FC4,"T",0,3);
	SetRegEx(0X103FC8,"T",0,3);
	SetRegEx(0X103FEC,"T",0,3);
	SetRegEx(0X10403C,"T",0,3);
	SetRegEx(0X104054,"T",0,3);
	SetRegEx(0X104058,"T",0,3);
	SetRegEx(0X1040E0,"T",0,3);
	SetRegEx(0X1040E4,"T",0,3);
	SetRegEx(0X1040FC,"T",0,3);
	SetRegEx(0X104120,"T",0,3);
	SetRegEx(0X104140,"T",0,3);
	SetRegEx(0X1041B0,"T",0,3);
	SetRegEx(0X1041BC,"T",0,3);
	SetRegEx(0X1041EC,"T",0,3);
	SetRegEx(0X104238,"T",0,3);
	SetRegEx(0X104264,"T",0,3);
	SetRegEx(0X10427C,"T",0,3);
	SetRegEx(0X1042A4,"T",0,3);
	SetRegEx(0X1042F8,"T",0,3);
	SetRegEx(0X104338,"T",0,3);
	SetRegEx(0X104394,"T",0,3);
	SetRegEx(0X1043A4,"T",0,3);
	SetRegEx(0X1043B8,"T",0,3);
	SetRegEx(0X10446C,"T",0,3);
	SetRegEx(0X1044BC,"T",0,3);
	SetRegEx(0X1044D4,"T",0,3);
	SetRegEx(0X104504,"T",0,3);
	SetRegEx(0X104530,"T",0,3);
	SetRegEx(0X104540,"T",0,3);
	SetRegEx(0X104570,"T",0,3);
	SetRegEx(0X10464C,"T",0,3);
	SetRegEx(0X1046A8,"T",0,3);
	SetRegEx(0X1046C0,"T",0,3);
	SetRegEx(0X1046EC,"T",0,3);
	SetRegEx(0X1046FC,"T",0,3);
	SetRegEx(0X104728,"T",0,3);
	SetRegEx(0X1047E4,"T",0,3);
	SetRegEx(0X10481C,"T",0,3);
	SetRegEx(0X104844,"T",0,3);
	SetRegEx(0X104860,"T",0,3);
	SetRegEx(0X10488C,"T",0,3);
	SetRegEx(0X1048F4,"T",0,3);
	SetRegEx(0X104904,"T",0,3);
	SetRegEx(0X104908,"T",0,3);
	SetRegEx(0X104914,"T",0,3);
	SetRegEx(0X104950,"T",0,3);
	SetRegEx(0X104968,"T",0,3);
	SetRegEx(0X1049B8,"T",0,3);
	SetRegEx(0X104A04,"T",0,3);
	SetRegEx(0X104A08,"T",0,3);
	SetRegEx(0X104A70,"T",0,3);
	SetRegEx(0X104AA8,"T",0,3);
	SetRegEx(0X104ACC,"T",0,3);
	SetRegEx(0X104AD8,"T",0,3);
	SetRegEx(0X104AE0,"T",0,3);
	SetRegEx(0X104AFC,"T",0,3);
	SetRegEx(0X104B0C,"T",0,3);
	SetRegEx(0X104B18,"T",0,3);
	SetRegEx(0X104B30,"T",0,3);
	SetRegEx(0X104B3C,"T",0,3);
	SetRegEx(0X104B5C,"T",0,3);
	SetRegEx(0X104B84,"T",0,3);
	SetRegEx(0X104B8C,"T",0,3);
	SetRegEx(0X104BD8,"T",0,3);
	SetRegEx(0X104BE4,"T",0,3);
	SetRegEx(0X104BFC,"T",0,3);
	SetRegEx(0X104C2C,"T",0,3);
	SetRegEx(0X104C38,"T",0,3);
	SetRegEx(0X104C40,"T",0,3);
	SetRegEx(0X104C58,"T",0,3);
	SetRegEx(0X104C84,"T",0,3);
	SetRegEx(0X104C90,"T",0,3);
	SetRegEx(0X104C98,"T",0,3);
	SetRegEx(0X104CB4,"T",0,3);
	SetRegEx(0X104D40,"T",0,3);
	SetRegEx(0X104D6C,"T",0,3);
	SetRegEx(0X104D7C,"T",0,3);
	SetRegEx(0X104DA0,"T",0,3);
	SetRegEx(0X104E34,"T",0,3);
	SetRegEx(0X104E78,"T",0,3);
	SetRegEx(0X104EA8,"T",0,3);
	SetRegEx(0X104EAC,"T",0,3);
	SetRegEx(0X104EBC,"T",0,3);
	SetRegEx(0X104EE8,"T",0,3);
	SetRegEx(0X104F24,"T",0,3);
	SetRegEx(0X104F58,"T",0,3);
	SetRegEx(0X104F68,"T",0,3);
	SetRegEx(0X104F80,"T",0,3);
	SetRegEx(0X104F98,"T",0,3);
	SetRegEx(0X105010,"T",0,3);
	SetRegEx(0X105054,"T",0,3);
	SetRegEx(0X105098,"T",0,3);
	SetRegEx(0X105118,"T",0,3);
	SetRegEx(0X10514C,"T",0,3);
	SetRegEx(0X105188,"T",0,3);
	SetRegEx(0X10518C,"T",0,3);
	SetRegEx(0X1051AC,"T",0,3);
	SetRegEx(0X1051BC,"T",0,3);
	SetRegEx(0X1052C4,"T",0,3);
	SetRegEx(0X1052E8,"T",0,3);
	SetRegEx(0X1052F8,"T",0,3);
	SetRegEx(0X10530C,"T",0,3);
	SetRegEx(0X105324,"T",0,3);
	SetRegEx(0X10533C,"T",0,3);
	SetRegEx(0X105364,"T",0,3);
	SetRegEx(0X10538C,"T",0,3);
	SetRegEx(0X10539C,"T",0,3);
	SetRegEx(0X1053CC,"T",0,3);
	SetRegEx(0X1053D0,"T",0,3);
	SetRegEx(0X1053E0,"T",0,3);
	SetRegEx(0X1053F0,"T",0,3);
	SetRegEx(0X1053F4,"T",0,3);
	SetRegEx(0X105400,"T",0,3);
	SetRegEx(0X105430,"T",0,3);
	SetRegEx(0X105440,"T",0,3);
	SetRegEx(0X10558C,"T",0,3);
	SetRegEx(0X1055B0,"T",0,3);
	SetRegEx(0X1055E0,"T",0,3);
	SetRegEx(0X1055E4,"T",0,3);
	SetRegEx(0X10564C,"T",0,3);
	SetRegEx(0X1056C0,"T",0,3);
	SetRegEx(0X10573C,"T",0,3);
	SetRegEx(0X105760,"T",0,3);
	SetRegEx(0X10576C,"T",0,3);
	SetRegEx(0X105778,"T",0,3);
	SetRegEx(0X1057C8,"T",0,3);
	SetRegEx(0X105804,"T",0,3);
	SetRegEx(0X10585C,"T",0,3);
	SetRegEx(0X10586C,"T",0,3);
	SetRegEx(0X10587C,"T",0,3);
	SetRegEx(0X1058DC,"T",0,3);
	SetRegEx(0X1058EC,"T",0,3);
	SetRegEx(0X105934,"T",0,3);
	SetRegEx(0X10594C,"T",0,3);
	SetRegEx(0X10599C,"T",0,3);
	SetRegEx(0X1059B4,"T",0,3);
	SetRegEx(0X105A04,"T",0,3);
	SetRegEx(0X105A1C,"T",0,3);
	SetRegEx(0X105AAC,"T",0,3);
	SetRegEx(0X105B00,"T",0,3);
	SetRegEx(0X105B0C,"T",0,3);
	SetRegEx(0X105B20,"T",0,3);
	SetRegEx(0X105BD8,"T",0,3);
	SetRegEx(0X105BE0,"T",0,3);
	SetRegEx(0X105BF0,"T",0,3);
	SetRegEx(0X105CA8,"T",0,3);
	SetRegEx(0X105CB0,"T",0,3);
	SetRegEx(0X105CC0,"T",0,3);
	SetRegEx(0X105D80,"T",0,3);
	SetRegEx(0X105DC8,"T",0,3);
	SetRegEx(0X105DD4,"T",0,3);
	SetRegEx(0X105DE4,"T",0,3);
	SetRegEx(0X105EC8,"T",0,3);
	SetRegEx(0X105F10,"T",0,3);
	SetRegEx(0X105F1C,"T",0,3);
	SetRegEx(0X105F2C,"T",0,3);
	SetRegEx(0X105FB8,"T",0,3);
	SetRegEx(0X105FBC,"T",0,3);
	SetRegEx(0X106020,"T",0,3);
	SetRegEx(0X10602C,"T",0,3);
	SetRegEx(0X106030,"T",0,3);
	SetRegEx(0X106040,"T",0,3);
	SetRegEx(0X1060CC,"T",0,3);
	SetRegEx(0X1060D0,"T",0,3);
	SetRegEx(0X106138,"T",0,3);
	SetRegEx(0X106144,"T",0,3);
	SetRegEx(0X106148,"T",0,3);
	SetRegEx(0X106158,"T",0,3);
	SetRegEx(0X106174,"T",0,3);
	SetRegEx(0X106184,"T",0,3);
	SetRegEx(0X1061A0,"T",0,3);
	SetRegEx(0X1061B0,"T",0,3);
	SetRegEx(0X1061CC,"T",0,3);
	SetRegEx(0X1061E8,"T",0,3);
	SetRegEx(0X106278,"T",0,3);
	SetRegEx(0X106284,"T",0,3);
	SetRegEx(0X106290,"T",0,3);
	SetRegEx(0X1062A0,"T",0,3);
	SetRegEx(0X106318,"T",0,3);
	SetRegEx(0X106330,"T",0,3);
	SetRegEx(0X10635C,"T",0,3);
	SetRegEx(0X106368,"T",0,3);
	SetRegEx(0X106394,"T",0,3);
	SetRegEx(0X1063D0,"T",0,3);
	SetRegEx(0X1063DC,"T",0,3);
	SetRegEx(0X1063E0,"T",0,3);
	SetRegEx(0X1063F8,"T",0,3);
	SetRegEx(0X106440,"T",0,3);
	SetRegEx(0X106458,"T",0,3);
	SetRegEx(0X106498,"T",0,3);
	SetRegEx(0X10651C,"T",0,3);
	SetRegEx(0X106528,"T",0,3);
	SetRegEx(0X106570,"T",0,3);
	SetRegEx(0X106574,"T",0,3);
	SetRegEx(0X106588,"T",0,3);
	SetRegEx(0X10660C,"T",0,3);
	SetRegEx(0X106618,"T",0,3);
	SetRegEx(0X106660,"T",0,3);
	SetRegEx(0X106664,"T",0,3);
	SetRegEx(0X106678,"T",0,3);
	SetRegEx(0X106694,"T",0,3);
	SetRegEx(0X1066A4,"T",0,3);
	SetRegEx(0X1066E4,"T",0,3);
	SetRegEx(0X106708,"T",0,3);
	SetRegEx(0X106718,"T",0,3);
	SetRegEx(0X106794,"T",0,3);
	SetRegEx(0X1067B0,"T",0,3);
	SetRegEx(0X1067BC,"T",0,3);
	SetRegEx(0X1067DC,"T",0,3);
	SetRegEx(0X1067E4,"T",0,3);
	SetRegEx(0X106804,"T",0,3);
	SetRegEx(0X10680C,"T",0,3);
	SetRegEx(0X106814,"T",0,3);
	SetRegEx(0X106828,"T",0,3);
	SetRegEx(0X106830,"T",0,3);
	SetRegEx(0X106844,"T",0,3);
	SetRegEx(0X106858,"T",0,3);
	SetRegEx(0X106860,"T",0,3);
	SetRegEx(0X106868,"T",0,3);
	SetRegEx(0X106880,"T",0,3);
	SetRegEx(0X106888,"T",0,3);
	SetRegEx(0X106890,"T",0,3);
	SetRegEx(0X106898,"T",0,3);
	SetRegEx(0X1068A0,"T",0,3);
	SetRegEx(0X1068A8,"T",0,3);
	SetRegEx(0X1068C8,"T",0,3);
	SetRegEx(0X1068D0,"T",0,3);
	SetRegEx(0X1068EC,"T",0,3);
	SetRegEx(0X106908,"T",0,3);
	SetRegEx(0X10691C,"T",0,3);
	SetRegEx(0X106924,"T",0,3);
	SetRegEx(0X106938,"T",0,3);
	SetRegEx(0X10694C,"T",0,3);
	SetRegEx(0X106954,"T",0,3);
	SetRegEx(0X106968,"T",0,3);
	SetRegEx(0X106970,"T",0,3);
	SetRegEx(0X106978,"T",0,3);
	SetRegEx(0X106980,"T",0,3);
	SetRegEx(0X106988,"T",0,3);
	SetRegEx(0X106990,"T",0,3);
	SetRegEx(0X1069A4,"T",0,3);
	SetRegEx(0X1069BC,"T",0,3);
	SetRegEx(0X1069C4,"T",0,3);
	SetRegEx(0X1069E4,"T",0,3);
	SetRegEx(0X1069F8,"T",0,3);
	SetRegEx(0X106A00,"T",0,3);
	SetRegEx(0X106A14,"T",0,3);
	SetRegEx(0X106A28,"T",0,3);
	SetRegEx(0X106A30,"T",0,3);
	SetRegEx(0X106A44,"T",0,3);
	SetRegEx(0X106A4C,"T",0,3);
	SetRegEx(0X106A54,"T",0,3);
	SetRegEx(0X106A60,"T",0,3);
	SetRegEx(0X106A74,"T",0,3);
	SetRegEx(0X106A78,"T",0,3);
	SetRegEx(0X106A80,"T",0,3);
	SetRegEx(0X106AA8,"T",0,3);
	SetRegEx(0X106AE0,"T",0,3);
	SetRegEx(0X106B00,"T",0,3);
	SetRegEx(0X106B40,"T",0,3);
	SetRegEx(0X106B48,"T",0,3);
	SetRegEx(0X106B54,"T",0,3);
	SetRegEx(0X106B68,"T",0,3);
	SetRegEx(0X106C0C,"T",0,3);
	SetRegEx(0X106C64,"T",0,3);
	SetRegEx(0X106C88,"T",0,3);
	SetRegEx(0X106CA0,"T",0,3);
	SetRegEx(0X106CCC,"T",0,3);
	SetRegEx(0X106D1C,"T",0,3);
	SetRegEx(0X106D3C,"T",0,3);
	SetRegEx(0X106D5C,"T",0,3);
	SetRegEx(0X106D8C,"T",0,3);
	SetRegEx(0X106DB0,"T",0,3);
	SetRegEx(0X106DDC,"T",0,3);
	SetRegEx(0X106E0C,"T",0,3);
	SetRegEx(0X106E30,"T",0,3);
	SetRegEx(0X106E50,"T",0,3);
	SetRegEx(0X106E54,"T",0,3);
	SetRegEx(0X106E68,"T",0,3);
	SetRegEx(0X106E7C,"T",0,3);
	SetRegEx(0X106E90,"T",0,3);
	SetRegEx(0X106E94,"T",0,3);
	SetRegEx(0X106EBC,"T",0,3);
	SetRegEx(0X106ECC,"T",0,3);
	SetRegEx(0X106EF0,"T",0,3);
	SetRegEx(0X106F68,"T",0,3);
	SetRegEx(0X106F88,"T",0,3);
	SetRegEx(0X10703C,"T",0,3);
	SetRegEx(0X107068,"T",0,3);
	SetRegEx(0X1070D4,"T",0,3);
	SetRegEx(0X1070E8,"T",0,3);
	SetRegEx(0X1070F8,"T",0,3);
	SetRegEx(0X10710C,"T",0,3);
	SetRegEx(0X107128,"T",0,3);
	SetRegEx(0X107130,"T",0,3);
	SetRegEx(0X107138,"T",0,3);
	SetRegEx(0X107158,"T",0,3);
	SetRegEx(0X10715C,"T",0,3);
	SetRegEx(0X107168,"T",0,3);
	SetRegEx(0X107188,"T",0,3);
	SetRegEx(0X1071A8,"T",0,3);
	SetRegEx(0X107220,"T",0,3);
	SetRegEx(0X107270,"T",0,3);
	SetRegEx(0X107274,"T",0,3);
	SetRegEx(0X107298,"T",0,3);
	SetRegEx(0X1072AC,"T",0,3);
	SetRegEx(0X1072C4,"T",0,3);
	SetRegEx(0X1072C8,"T",0,3);
	SetRegEx(0X1072DC,"T",0,3);
	SetRegEx(0X107304,"T",0,3);
	SetRegEx(0X10731C,"T",0,3);
	SetRegEx(0X107384,"T",0,3);
	SetRegEx(0X10739C,"T",0,3);
	SetRegEx(0X1073D8,"T",0,3);
	SetRegEx(0X1073F4,"T",0,3);
	SetRegEx(0X107420,"T",0,3);
	SetRegEx(0X107448,"T",0,3);
	SetRegEx(0X107460,"T",0,3);
	SetRegEx(0X107478,"T",0,3);
	SetRegEx(0X107484,"T",0,3);
	SetRegEx(0X1074B0,"T",0,3);
	SetRegEx(0X10756C,"T",0,3);
	SetRegEx(0X107580,"T",0,3);
	SetRegEx(0X1075BC,"T",0,3);
	SetRegEx(0X1075C4,"T",0,3);
	SetRegEx(0X1075D8,"T",0,3);
	SetRegEx(0X1075DC,"T",0,3);
	SetRegEx(0X1075F4,"T",0,3);
	SetRegEx(0X107608,"T",0,3);
	SetRegEx(0X107614,"T",0,3);
	SetRegEx(0X107624,"T",0,3);
	SetRegEx(0X10766C,"T",0,3);
	SetRegEx(0X107674,"T",0,3);
	SetRegEx(0X1076E8,"T",0,3);
	SetRegEx(0X107710,"T",0,3);
	SetRegEx(0X107718,"T",0,3);
	SetRegEx(0X107730,"T",0,3);
	SetRegEx(0X10774C,"T",0,3);
	SetRegEx(0X107750,"T",0,3);
	SetRegEx(0X107758,"T",0,3);
	SetRegEx(0X107760,"T",0,3);
	SetRegEx(0X10776C,"T",0,3);
	SetRegEx(0X10777C,"T",0,3);
	SetRegEx(0X10778C,"T",0,3);
	SetRegEx(0X107794,"T",0,3);
	SetRegEx(0X107798,"T",0,3);
	SetRegEx(0X1077A4,"T",0,3);
	SetRegEx(0X1077A8,"T",0,3);
	SetRegEx(0X1077CC,"T",0,3);
	SetRegEx(0X107818,"T",0,3);
	SetRegEx(0X107878,"T",0,3);
	SetRegEx(0X107894,"T",0,3);
	SetRegEx(0X107898,"T",0,3);
	SetRegEx(0X1078B0,"T",0,3);
	SetRegEx(0X1078C8,"T",0,3);
	SetRegEx(0X1078D0,"T",0,3);
	SetRegEx(0X1078F8,"T",0,3);
	SetRegEx(0X10793C,"T",0,3);
	SetRegEx(0X107978,"T",0,3);
	SetRegEx(0X1079AC,"T",0,3);
	SetRegEx(0X1079C8,"T",0,3);
	SetRegEx(0X1079D4,"T",0,3);
	SetRegEx(0X1079FC,"T",0,3);
	SetRegEx(0X107A14,"T",0,3);
	SetRegEx(0X107A28,"T",0,3);
	SetRegEx(0X107A44,"T",0,3);
	SetRegEx(0X107A68,"T",0,3);
	SetRegEx(0X107A80,"T",0,3);
	SetRegEx(0X107AB0,"T",0,3);
	SetRegEx(0X107AD4,"T",0,3);
	SetRegEx(0X107AEC,"T",0,3);
	SetRegEx(0X107AF8,"T",0,3);
	SetRegEx(0X107B20,"T",0,3);
	SetRegEx(0X107B28,"T",0,3);
	SetRegEx(0X107B98,"T",0,3);
	SetRegEx(0X107BAC,"T",0,3);
	SetRegEx(0X107BC4,"T",0,3);
	SetRegEx(0X107BCC,"T",0,3);
	SetRegEx(0X107BDC,"T",0,3);
	SetRegEx(0X107BE0,"T",0,3);
	SetRegEx(0X107C14,"T",0,3);
	SetRegEx(0X107C34,"T",0,3);
	SetRegEx(0X107C40,"T",0,3);
	SetRegEx(0X107C48,"T",0,3);
	SetRegEx(0X107C6C,"T",0,3);
	SetRegEx(0X107CCC,"T",0,3);
	SetRegEx(0X107CFC,"T",0,3);
	SetRegEx(0X107D00,"T",0,3);
	SetRegEx(0X107D08,"T",0,3);
	SetRegEx(0X107D10,"T",0,3);
	SetRegEx(0X107D20,"T",0,3);
	SetRegEx(0X107D28,"T",0,3);
	SetRegEx(0X107D30,"T",0,3);
	SetRegEx(0X107D38,"T",0,3);
	SetRegEx(0X107D5C,"T",0,3);
	SetRegEx(0X107D68,"T",0,3);
	SetRegEx(0X107D74,"T",0,3);
	SetRegEx(0X107D98,"T",0,3);
	SetRegEx(0X107DD4,"T",0,3);
	SetRegEx(0X107DDC,"T",0,3);
	SetRegEx(0X107E00,"T",0,3);
	SetRegEx(0X107E10,"T",0,3);
	SetRegEx(0X107E1C,"T",0,3);
	SetRegEx(0X107E24,"T",0,3);
	SetRegEx(0X107E2C,"T",0,3);
	SetRegEx(0X107E60,"T",0,3);
	SetRegEx(0X107E80,"T",0,3);
	SetRegEx(0X107E8C,"T",0,3);
	SetRegEx(0X107E98,"T",0,3);
	SetRegEx(0X107EB0,"T",0,3);
	SetRegEx(0X107EF0,"T",0,3);
	SetRegEx(0X107F00,"T",0,3);
	SetRegEx(0X107F1C,"T",0,3);
	SetRegEx(0X107F44,"T",0,3);
	SetRegEx(0X107F68,"T",0,3);
	SetRegEx(0X107F94,"T",0,3);
	SetRegEx(0X107FC8,"T",0,3);
	SetRegEx(0X107FD0,"T",0,3);
	SetRegEx(0X107FE4,"T",0,3);
	SetRegEx(0X107FF0,"T",0,3);
	SetRegEx(0X108028,"T",0,3);
	SetRegEx(0X10803C,"T",0,3);
	SetRegEx(0X108044,"T",0,3);
	SetRegEx(0X10804C,"T",0,3);
	SetRegEx(0X108080,"T",0,3);
	SetRegEx(0X108088,"T",0,3);
	SetRegEx(0X108094,"T",0,3);
	SetRegEx(0X1080A0,"T",0,3);
	SetRegEx(0X1080AC,"T",0,3);
	SetRegEx(0X1080D4,"T",0,3);
	SetRegEx(0X1080EC,"T",0,3);
	SetRegEx(0X108124,"T",0,3);
	SetRegEx(0X108158,"T",0,3);
	SetRegEx(0X108174,"T",0,3);
	SetRegEx(0X10818C,"T",0,3);
	SetRegEx(0X1081B0,"T",0,3);
	SetRegEx(0X1081C4,"T",0,3);
	SetRegEx(0X1081F0,"T",0,3);
	SetRegEx(0X108224,"T",0,3);
	SetRegEx(0X108250,"T",0,3);
	SetRegEx(0X108264,"T",0,3);
	SetRegEx(0X10827C,"T",0,3);
	SetRegEx(0X1082C4,"T",0,3);
	SetRegEx(0X1082D0,"T",0,3);
	SetRegEx(0X10830C,"T",0,3);
	SetRegEx(0X108318,"T",0,3);
	SetRegEx(0X108338,"T",0,3);
	SetRegEx(0X109ABC,"T",0,3);
	SetRegEx(0X10A780,"T",0,3);
	SetRegEx(0X10AAA4,"T",0,3);
	SetRegEx(0X10ABB0,"T",0,3);
	SetRegEx(0X10AF80,"T",0,3);
	SetRegEx(0X10B06C,"T",0,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
        EndTypeUpdating(UTP_STRUCT);
}

// End of file.
